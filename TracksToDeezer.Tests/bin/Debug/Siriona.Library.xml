<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Siriona.Library</name>
    </assembly>
    <members>
        <member name="T:Siriona.Library.Action">
            <summary>
            Represents a action delegate.
            </summary>
        </member>
        <member name="T:Siriona.Library.Action`2">
            <summary>
            Represents a action delegate.
            </summary>
        </member>
        <member name="T:Siriona.Library.Action`3">
            <summary>
            Represents a action delegate.
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Siriona.Library.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Siriona.Library.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Siriona.Library.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Siriona.Library.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Siriona.Library.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Siriona.Library.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Siriona.Library.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Siriona.Library.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Siriona.Library.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Siriona.Library.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:Siriona.Library.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Siriona.Library.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Siriona.Library.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Siriona.Library.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Siriona.Library.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Siriona.Library.AttributeUtility">
            <summary>
            Provides utility for accessing attributes.
            </summary>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified attribute is associated with a class member.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="member">The method.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified attribute is associated with a class member.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="member">The method.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets an attribute associated with a class member.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="member">The method.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets an attribute associated with a class member.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="member">The member.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Object)">
            <summary>
            Determines whether the specified attribute is associated with the class of an object.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseObject">The object.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Object,System.Boolean)">
            <summary>
            Determines whether the specified attribute is associated with the class of an object.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseObject">The object.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Object)">
            <summary>
            Gets an attribute associated with the class of an object.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseObject">The object.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            Gets an attribute associated with the class of an object.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseObject">The object.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Type)">
            <summary>
            Determines whether the specified attribute is associated with the specified type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="type">The type.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determines whether the specified attribute is associated with the specified type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Type)">
            <summary>
            Gets an attribute associated with the specified type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="type">The type.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets an attribute associated with the specified type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="type">The type.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Enum)">
            <summary>
            Determines whether the specified attribute is associated with the struct or the field of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseEnum">The base enum.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.HasAttribute``1(System.Enum,System.Boolean)">
            <summary>
            Determines whether the specified attribute is associated with the struct or the field of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseEnum">The base enum.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Enum)">
            <summary>
            Gets an attribute associated with the struct or the field of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseEnum">The enum.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.AttributeUtility.GetAttribute``1(System.Enum,System.Boolean)">
            <summary>
            Gets an attribute associated with the struct or the field of an <see cref="T:System.Enum"/> type.
            </summary>
            <typeparam name="T">The attribute type.</typeparam>
            <param name="baseEnum">The enum.</param>
            <param name="inherit">if set to <c>true</c>, search in base classes.</param>
            <returns>
            The attribute if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Binary.BinaryUtility">
            <summary>
            Provide utility function to manage byte arrays.
            </summary>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.GetHashCode(System.Byte[])">
            <summary>
            Returns a platform-independant hash code of a byte array.
            </summary>
            <param name="value">The string</param>
            <returns>The hashcode</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.MarshalStream(System.IO.Stream)">
            <summary>
            Copies the content of a stream into an unmanaged buffer.
            </summary>
            <param name="stream">The stream to copy.</param>
            <returns>The marshaled buffer.</returns>
            <remarks>The buffer must be freed using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">Marshal.FreeHGlobal</see></remarks>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.MarshalStream(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Copies the content of a stream into an unmanaged buffer.
            </summary>
            <param name="stream">The stream to copy.</param>
            <param name="offset">The position of the first byte to copy in the stream.</param>
            <param name="length">The number of bytes to copy.</param>
            <returns>The marshaled buffer.</returns>
            <remarks>The buffer must be freed using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">Marshal.FreeHGlobal</see></remarks>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to an hexadecimal string. Alphabetic characters are lowercase.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>The string representing the buffer content.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ToHexString(System.Byte[],System.Boolean)">
            <summary>
            Converts a byte array to an hexadecimal string.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <param name="uppercase">Indicates if alphabetic characters are uppercase or lowercase.</param>
            <returns>The string representing the buffer content.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array to an hexadecimal string. Alphabetic characters are lowercase.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <param name="index">The index at which conversion begins.</param>
            <param name="length">The number of bytes to convert.</param>
            <returns>The string representing the buffer content.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ToHexString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts a byte array to an hexadecimal string.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <param name="index">The index at which conversion begins.</param>
            <param name="length">The number of bytes to convert.</param>
            <param name="uppercase">Indicates if alphabetic characters are uppercase or lowercase.</param>
            <returns>The string representing the buffer content.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.FromHexString(System.String)">
            <summary>
            Convert an hexadecimal string to a byte array.
            </summary>
            <param name="value">The string representing the bytes.</param>
            <returns>The array filled with bytes.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ToHexChar(System.Byte,System.Char)">
            <summary>
            Convert a byte between 0x0 and 0xf to a char.
            </summary>
            <param name="b">The byte value.</param>
            <param name="a">The 'a' or 'A' character.</param>
            <returns>The converted character.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.FromHexChar(System.Char)">
            <summary>
            Convert an hexadecimal char to a byte value.
            </summary>
            <param name="c">The character to convert.</param>
            <returns>The byte value.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.BufferEquals(System.Byte[],System.Byte[])">
            <summary>
            Tests if two buffers are equal.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <returns><c>true</c> if buffers are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.BufferEquals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Tests if two buffers are equal.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="offset1">The offset at which comparison starts in the first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <param name="offset2">The offset at which comparison starts in the second buffer.</param>
            <param name="length">The number of characters to compare.</param>
            <returns><c>true</c> if buffers are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compares two buffers.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <returns>A positive value if <c>buffer1</c> is "higher" than <c>buffer2</c>, a negative value if <c>buffer1</c> is "lower" than <c>buffer2</c>, or <c>0</c> if <c>buffer1</c> equals <c>buffer2</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.Compare(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares parts of two buffers.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="offset1">The offset at which comparison starts in the first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <param name="offset2">The offset at which comparison starts in the second buffer.</param>
            <param name="length">The number of characters to compare.</param>
            <returns>A positive value if <c>buffer1</c> is "higher" than <c>buffer2</c>, a negative value if <c>buffer1</c> is "lower" than <c>buffer2</c>, or <c>0</c> if <c>buffer1</c> equals <c>buffer2</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.MaskBuffer(System.Byte[],System.Byte[])">
            <summary>
            Applies a mask to a buffer
            </summary>
            <param name="buffer">Buffer to mask</param>
            <param name="mask">Mask to apply</param>
            <returns>A masked buffer</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadInt16(System.IntPtr,System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a signed 16-bits integer from a buffer
            </summary>
            <param name="source">The address of the source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The 16-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadInt16(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a signed 16-bits integer from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The 16-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadUInt16(System.IntPtr,System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads an unsigned 16-bit integer from a buffer
            </summary>
            <param name="source">The address of the source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The unsgiend 16-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadUInt16(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads an unsigned 16-bit integer from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The unsgiend 16-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadInt32(System.IntPtr,System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a signed 32-bit integer from a buffer
            </summary>
            <param name="source">The address of the source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The 32-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadInt32(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a signed 32-bit integer from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The 32-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadUInt32(System.IntPtr,System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads an unsigned 32-bit integer from a buffer
            </summary>
            <param name="source">The address of the source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The unsigned 32-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadUInt32(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads an unsigned 32-bit integer from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The unsigned 32-bit integer read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadSingle(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a single-precision floating-point value from a buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The single-precision floating-point value read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadDouble(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a double-precision floating-point value from a buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The double-precision floating-point value read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadRational(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads a signed rational value from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The signed rational value read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadURational(System.Byte[],System.Int32,Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reads an unsigned rational value from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteOrder">The byte order used for the read operation.</param>
            <returns>The unsigned rational value read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadString(System.Byte[],System.Int32)">
            <summary>
            Reads a string from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <returns>The string read from the buffer using an <see cref="P:System.Text.Encoding.ASCII"/> encoding.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadString(System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="encoding">The encoding used for the read operation.</param>
            <returns>The string read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadString(System.Byte[])">
            <summary>
            Reads a string from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <returns>The string read from the buffer using an <see cref="P:System.Text.Encoding.ASCII"/> encoding.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadString(System.Byte[],System.Text.Encoding)">
            <summary>
            Reads a string from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="encoding">The encoding used for the read operation.</param>
            <returns>The string read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a string from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteCount">The number of bytes to read.</param>
            <returns>The string read from the buffer using an <see cref="P:System.Text.Encoding.ASCII"/> encoding.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string from a buffer
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="byteCount">The number of bytes to read.</param>
            <param name="encoding">The encoding used for the read operation.</param>
            <returns>The string read from the buffer.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReverseByteOrder(System.Byte[],System.Int32)">
            <summary>
            Reverses the order of bytes in the given buffer.
            </summary>
            <param name="source">The buffer whose bytes must be reversed.</param>
            <param name="dataSize">The size of data contained in the buffer, in bytes. Must be equal to 2 or 4.</param>
            <returns>A buffer containing the same data as the source buffer using the other <see cref="T:Siriona.Library.Binary.ByteOrder"/>.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReverseByteOrder(Siriona.Library.Binary.ByteOrder)">
            <summary>
            Reverses the order of bytes of a <see cref="T:Siriona.Library.Binary.ByteOrder"/> value.
            </summary>
            <param name="byteOrder">The value to reverse.</param>
            <returns>The reversed value of the byte order.</returns>
        </member>
        <member name="M:Siriona.Library.Binary.BinaryUtility.ReadByteArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an array of bytes from the source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="offset">The offset of the data to read.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>An array of <c>byte</c> containing the read data.</returns>
        </member>
        <member name="P:Siriona.Library.Binary.BinaryUtility.CurrentByteOrder">
            <summary>
            Gets the byte order on the local computer architecture.
            </summary>
            <value>The current byte order.</value>
        </member>
        <member name="T:Siriona.Library.Binary.ByteOrder">
            <summary>
            Represents the order of bytes in a data buffer.
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.ByteOrder.Unknown">
            <summary>
            Byte order is unknown.
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.ByteOrder.LittleEndian">
            <summary>
            The little endian byte order.
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.ByteOrder.Intel">
            <summary>
            The Intel byte order (same as <see cref="F:Siriona.Library.Binary.ByteOrder.LittleEndian"/>).
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.ByteOrder.BigEndian">
            <summary>
            The big endian byte order.
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.ByteOrder.Motorola">
            <summary>
            The Motorola byte order (same as <see cref="F:Siriona.Library.Binary.ByteOrder.BigEndian"/>).
            </summary>
        </member>
        <member name="T:Siriona.Library.Binary.HashCode">
            <summary>
            Represents a hash code value.
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.HashCode.HashSize">
            <summary>
            Gets the size, in bytes, of a hash value.
            </summary>
        </member>
        <member name="F:Siriona.Library.Binary.HashCode.Empty">
            <summary>
            Gets an empty hashcode
            </summary>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.#ctor(System.Byte[])">
            <summary>
            Creates a HashCode from a byte array
            </summary>
            <param name="value">An array of <see cref="T:System.Byte"/> containing the hashcode data.</param>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.#ctor(System.String)">
            <summary>
            Creates a hashcode from a base64 string
            </summary>
            <param name="base64Value">A base 64 encoded string containing the hashcode data.</param>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.FromFile(System.String)">
            <summary>
            Creates a HashCode from the content of a file
            </summary>
            <param name="fileName">file to load</param>
            <returns>the hashcode for the given file</returns>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.FromStream(System.IO.Stream)">
            <summary>
            Creates a HashCode from the content of a stream
            </summary>
            <param name="stream">stream to load</param>
            <returns>the hashcode for the given stream</returns>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.op_LessThan(Siriona.Library.Binary.HashCode,Siriona.Library.Binary.HashCode)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.op_GreaterThan(Siriona.Library.Binary.HashCode,Siriona.Library.Binary.HashCode)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.op_Equality(Siriona.Library.Binary.HashCode,Siriona.Library.Binary.HashCode)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.op_Inequality(Siriona.Library.Binary.HashCode,Siriona.Library.Binary.HashCode)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.CompareTo(System.Object)">
            <summary>
            Compares two hashcodes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.Equals(System.Object)">
            <summary>
            Compares the current HashCode with another object
            </summary>
            <param name="obj">Object to compare</param>
            <returns>true if both object have the same hashcode</returns>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.GetHashCode">
            <summary>
            Returns the .net hashcode for the current object (not the same as the Value property!)
            </summary>
            <returns>The hashcode for the given object</returns>
        </member>
        <member name="M:Siriona.Library.Binary.HashCode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
        </member>
        <member name="P:Siriona.Library.Binary.HashCode.IsEmpty">
            <summary>
            Indicates if a hashcode is valid
            </summary>
        </member>
        <member name="P:Siriona.Library.Binary.HashCode.Value">
            <summary>
            Gets the value (byte array) of the hashcode
            </summary>
        </member>
        <member name="P:Siriona.Library.Binary.HashCode.Base64Value">
            <summary>
            Gets the value (base 64 string) of the hashcodes
            </summary>
        </member>
        <member name="T:Siriona.Library.Collections.BaseIntervalCollection`4">
            <summary>
            Represents a collection that contains values defined on intervals.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TInterval">The type of the interval.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPair">The type of the pair.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.BaseIntervalCollection`4"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.#ctor(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.BaseIntervalCollection`4"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.Contains(`0)">
            <summary>
            Determines whether the calendar contains a value for the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if the calendar contains a value for the specified date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.Contains(`1)">
            <summary>
            Determines whether the calendar contains a value for the specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the calendar contains a value for the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IsHole(`1)">
            <summary>
            Determines whether the specified interval is empty.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the specified interval is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IsContiguous(`1)">
            <summary>
            Determines whether the specified interval is contiguous. The interval can be defined or empty.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the specified interval is contiguous; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.TryGetValue(`0,`2@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the value could be found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.TryGetValue(`1,`2@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the value could be found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.Set(`3)">
            <summary>
            Sets the specified value for specified interval.
            </summary>
            <param name="pair">The interval value pair.</param>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.Set(`1,`2)">
            <summary>
            Sets the specified value for specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.Reset(`1)">
            <summary>
            Removes the specified interval.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.FillHoles(`1,`2)">
            <summary>
            Fills the holes with specified value.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.CreatePair(`1,`2)">
            <summary>
            Creates a pair.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.CreateInterval(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Creates the interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStartClosed">if set to <c>true</c> [is start closed].</param>
            <param name="isEndClosed">if set to <c>true</c> [is end closed].</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.Item(`0)">
            <summary>
            Gets the value defined for the the specified date.
            </summary>
            <value>The value defined at specified date.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.Item(`1)">
            <summary>
            Gets the value defined for the the specified date.
            </summary>
            <value>The value defined at specified date.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.Values">
            <summary>
            Gets the periods.
            </summary>
            <value>The periods.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.Intervals">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
            <exception cref="T:System.InvalidOperationException">When the collection has no interval defined. Call <see cref="P:Siriona.Library.Collections.BaseIntervalCollection`4.IsEmpty"/> to check.</exception>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
            <exception cref="T:System.InvalidOperationException">When the collection has no interval defined. Call <see cref="P:Siriona.Library.Collections.BaseIntervalCollection`4.IsEmpty"/> to check.</exception>
        </member>
        <member name="T:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator">
            <summary>
            Provides information about how a given interval should be
            merged in the existing collection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.#ctor(`1,Siriona.Library.Collections.BaseIntervalCollection{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.SplitStart">
            <summary>
            Splits the start interval if it is partialy covered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.SplitEnd">
            <summary>
            Splits the end interval if it is partialy covered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.MergeStart">
            <summary>
            Merges the start interval with current interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.MergeEnd">
            <summary>
            Merges the end interval with current interval.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.IsStartOverlapped">
            <summary>
            Gets a value indicating whether this instance is start overlapped.
            </summary>
            <value>
            	<c>true</c> if this instance is start overlapped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.StartPair">
            <summary>
            Gets the start pair.
            </summary>
            <value>The start pair.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.StartIndex">
            <summary>
            Gets the start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.IsEndOverlapped">
            <summary>
            Gets a value indicating whether this instance is end overlapped.
            </summary>
            <value>
            	<c>true</c> if this instance is end overlapped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.EndPair">
            <summary>
            Gets the end pair.
            </summary>
            <value>The end pair.</value>
        </member>
        <member name="P:Siriona.Library.Collections.BaseIntervalCollection`4.IntervalManipulator.Length">
            <summary>
            Gets the length of the collection interval overlapped by the interval.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Differences`1">
            <summary>
            Represents a difference between two sets
            </summary>
            <typeparam name="T">The items data type.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Differences`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Differences`1"/> class.
            </summary>
            <param name="added">The added.</param>
            <param name="removed">The removed.</param>
        </member>
        <member name="P:Siriona.Library.Collections.Differences`1.Added">
            <summary>
            Gets the added items.
            </summary>
            <value>
            The added items.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.Differences`1.Removed">
            <summary>
            Gets the removed items.
            </summary>
            <value>
            The removed items.
            </value>
        </member>
        <member name="T:Siriona.Library.Collections.Linq.DifferencesExtensionMethods">
            <summary>
            Provides extension methods for differences
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.DifferencesExtensionMethods.IsEmpty``1(Siriona.Library.Collections.Differences{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Collections.Differences`1"/> is empty.
            </summary>
            <typeparam name="T">The enumerable data type.</typeparam>
            <param name="differences">The differences.</param>
            <returns>
              <c>true</c> if the specified differences is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Collections.Index">
            <summary>
            Provides helper methods for using indices.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Index.ToIndex``2(System.Collections.Generic.IEnumerable{Siriona.Library.Pair{``0,``1}})">
            <summary>
            Creates an index.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="pairs">The key-value pairs.</param>
            <returns>The index</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Index.ToIndex``2(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.Tuple{``0,``1}})">
            <summary>
            Creates an index.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="pairs">The key-value pairs.</param>
            <returns>The index</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Index.ToIndex``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Creates an index.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns>The index</returns>
        </member>
        <member name="T:Siriona.Library.Collections.Index`2">
            <summary>
            Represents a read-only dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.Tuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Index`2"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Pair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Index`2"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Index`2"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Index`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Index`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="P:Siriona.Library.Collections.Index`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Index`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Index`2.Item(`0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.Index`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Index`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Collections.Linq.DictionaryExtensions">
            <summary>
            Provides extension methods for IDictionary.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.DictionaryExtensions.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Indicates whether dictionnary contains the same key value pairs.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries the get value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>Found value or default.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries the get value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Found value or provided default.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.DictionaryExtensions.TryGetValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,Siriona.Library.Func{``1,``2})">
            <summary>
            Tries the get value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="projection">The projection.</param>
            <returns>A projection of found value or default.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.DictionaryExtensions.TryGetValue``3(System.Collections.Generic.IDictionary{``0,``1},``0,Siriona.Library.Func{``1,``2},``2)">
            <summary>
            Tries the get value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="projection">The projection.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A projection of found value or default.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.Linq.EnumerableExtensions">
            <summary>
            Provides extension methods to IEnumerable.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             InvokeOn action for each item
            </summary>
            <param name="enumerable">The enumerable</param>
            <param name="action">The action</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.ToEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a IEnumerable to a Siriona.Library.Collections.Enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Enumerate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a IEnumerable to a Siriona.Library.Collections.Enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the mutual exclusive difference of sequences.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Differences``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the differences between the two specified sequences.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="current">The current.</param>
            <param name="reference">The reference.</param>
            <returns>The differences.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified source is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns>
            	<c>true</c> if the specified source is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the value to specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends the the values to specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the value to specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends the the values to specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Enumerates distincts values from the specified enumerable.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns the minimum value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The minimum value of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.EnumerableExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns the maximum value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The maximum value of the source, according to the specified projection.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.Linq.GroupingExtensions">
            <summary>
            Provides extension methods for Groupings.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.GroupingExtensions.Values``2(Siriona.Library.Collections.Grouping{``0,``1})">
            <summary>
            Gets the values in the grouping.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.GroupingExtensions.Values``2(Siriona.Library.Collections.IGrouping{``0,``1})">
            <summary>
            Gets the values in the grouping.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.GroupingExtensions.Values``2(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.IGrouping{``0,``1}})">
            <summary>
            Gets groupings key values pairs.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="groupings"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Linq.GroupingExtensions.Values``2(Siriona.Library.Collections.Lookup{``0,``1})">
            <summary>
            Gets groupings key values pairs.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="groupings"></param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Configuration.Xml.ConfigSectionInitializer`1">
            <summary>
            Represents a function to initialize a config section.
            </summary>
            <param name="section"></param>
            <param name="sectionName"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Configuration.Xml.ConfigSectionLoader`1">
            <summary>
            Loads a section from configuration or new() it!
            A callback mechanism allows programmatic configuration.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Configuration.Xml.ConfigSectionLoader`1.Load">
             <summary>
            Loads section. 
             </summary>
             <returns></returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Xml.ConfigSectionLoader`1.Load(System.String)">
            <summary>
            Loads a section of new() it
            </summary>
            <param name="sectionName">name of the section to load</param>
            <returns>the section</returns>
        </member>
        <member name="E:Siriona.Library.Configuration.Xml.ConfigSectionLoader`1.Initializing">
            <summary>
            Gives a chance to provide programatic configuration settings for a given section
            </summary>
        </member>
        <member name="T:Siriona.Library.Configuration.Xml.XmlConfigSectionBase">
            <summary>
            Make inheritors suitable for insertion in a .config file
            XmlSerialization is used.
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.Xml.XmlConfigSectionBase.LoadedFromXml">
            <summary>
            Tells if successfully loaded from the configuration section
            </summary>
        </member>
        <member name="T:Siriona.Library.Context.AppDomainContextStorage`1">
            <summary>
            This storage makes it static, therefore it is *quite* dumb to rely on this class directly.
            But used wisely for some strategy it might be quite clever.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Context.ContextStorageBase`1">
            <summary>
            Base class for Context Storage.
            Automates the Dictionary slot thing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Context.IContextStorage`1">
            <summary>
            Interface for type dependant storage spaces
            Implementations rely on various contexts.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.IContextStorage`1.NewStorage``1">
            <summary>
            Instantiate a "sister" storage who caters for the needs of a diferent type
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.IContextStorage`1.Value">
            <summary>
            One storage slot
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.IContextStorage`1.Item(System.Object)">
            <summary>
            A dictionarry of storage slots
            </summary>
            <param name="key">please use one with a proper GetHashCode() implementation</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.IContextStorage`1.SyncRoot">
            <summary>
            Rely on this to make some operations on the storage atomic
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.IContextStorage`1.Scope">
            <summary>
            Get context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.IContextStorage`1.Builder">
            <summary>
            Gets/Sets builder.
            </summary>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageBase`1.NewStorage``1">
            <summary>
            It is best to override since this way is "a bit" heavy
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageBase`1.Dispose">
            <summary>
            Disposes unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageBase`1.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageBase`1.HandleMiss(System.Object@)">
            <summary>
            Handle a cache miss.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageBase`1.HandleMiss(`0@)">
            <summary>
            Handle cache mix.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Siriona.Library.Context.ContextStorageBase`1.Item(System.Object)">
            <summary>
            Provides a dictionary of slots
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.ContextStorageBase`1.Value">
            <summary>
            One storage slot
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Context.ContextStorageBase`1.SyncRoot">
            <summary>
            Implementation should be OK since there should only be one active context storage strategy for a given type.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.ContextStorageBase`1.Scope">
            <summary>
            Get context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.ContextStorageBase`1.Builder">
            <summary>
            Gets/Sets builder.
            </summary>
        </member>
        <member name="T:Siriona.Library.Context.ContextStorageBase`1.Dict`1">
            <summary>
            Encapsulate a dictionary of potentialy disposable objects.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.AppDomainContextStorage`1.NewStorage``1">
            <summary>
            
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.AppDomainContextStorage`1.Scope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.AppDomainContextStorage`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Context.AppDomainContextStorage`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="T:Siriona.Library.Context.CompositeKey">
            <summary>
            This class is used to create keys valid for hashtable 
            based on various types which correctly implement Equals and GetHashCode
            </summary>
        </member>
        <member name="M:Siriona.Library.Context.CompositeKey.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Context.CompositeKey"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Siriona.Library.Context.CompositeKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Context.CompositeKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Context.CompositeKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Context.CompositeKey.KeyElements">
            <summary>
            Gets the key elements.
            </summary>
            <value>The key elements.</value>
        </member>
        <member name="T:Siriona.Library.Context.ContextScope">
            <summary>
            Scope of the context storage
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.AppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.Request">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.WebRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.WebSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.RequestAndDependents">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.LogicalThread">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.PhysicalThread">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Context.ContextScope.CallContext">
            <summary>
            Call Context
            </summary>
        </member>
        <member name="T:Siriona.Library.Context.ContextStorageProvider">
            <summary>
            Factors a IContextStorage provider for a given type.
            </summary>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageProvider.GetContextStorage``1(Siriona.Library.Context.ContextScope)">
            <summary>
            Gets a new context storage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageProvider.GetContextStorage``1(Siriona.Library.Context.ContextScope,System.Boolean)">
            <summary>
            Get context storage.
            </summary>
            <param name="scope"></param>
            <param name="autoCreateInstance"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Context.ContextStorageProvider.GetContextStorage``1(Siriona.Library.Context.ContextScope,Siriona.Library.Func{``0})">
            <summary>
            Get context storage.
            </summary>
            <param name="scope"></param>
            <param name="instantiator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Context.CallContextStorage`1">
            <summary>
            Provides a context storage specific for the logical thread.
            the .net framework can swap logical threads around when it feels like it,
            and it usually feels like it under load. sometimes.
            
            In these cases this storage is safer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.CallContextStorage`1.NewStorage``1">
            <summary>
            It is best to override since this way is "a bit" heavy
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.CallContextStorage`1.Scope">
            <summary>
            Get context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.CallContextStorage`1.Value">
            <summary>
            One storage slot
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Context.HybridNoPropagationStorage`1">
            <summary>
            This Hybrid storage works in most conditions.
            Prefered store: HttpContext, Fallback: Logical thread
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.HybridNoPropagationStorage`1.NewStorage``1">
            <summary>
            A new sister storage
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.HybridNoPropagationStorage`1.Scope">
            <summary>
            Get the context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.HybridNoPropagationStorage`1.Value">
            <summary>
            One slot
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.HybridNoPropagationStorage`1.Builder">
            <summary>
            Gets/Sets builder.
            </summary>
        </member>
        <member name="T:Siriona.Library.Context.HttpContextStorage`1">
            <summary>
            Stores wanted type in the HttpContext.Items
            Automatically disposes of disposable stuff on session end.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.HttpContextStorage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Context.HttpContextStorage`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Context.HttpContextStorage`1.NewStorage``1">
            <summary>
            News the storage.
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.HttpContextStorage`1.Scope">
            <summary>
            Get context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.HttpContextStorage`1.Value">
            <summary>
            One storage slot
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Context.HttpSessionStorage`1">
            <summary>
            Stores an object, or many of type T in the session
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.HttpSessionStorage`1.NewStorage``1">
            <summary>
            A new sister storage
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.HttpSessionStorage`1.Scope">
            <summary>
            Represent a context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.HttpSessionStorage`1.Value">
            <summary>
            Get the value.
            </summary>
        </member>
        <member name="T:Siriona.Library.Context.HybridSessionStorage`1">
            <summary>
            This Hybrid storage works in most conditions.
            Prefered store: HttpContext, Fallback: Logical thread
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.HybridSessionStorage`1.NewStorage``1">
            <summary>
            A new sister storage
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.HybridSessionStorage`1.Scope">
            <summary>
            Get the context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.HybridSessionStorage`1.Value">
            <summary>
            One slot
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.HybridSessionStorage`1.Builder">
            <summary>
            Gets/Sets builder.
            </summary>
        </member>
        <member name="T:Siriona.Library.Context.LogicalThreadContextStorage`1">
            <summary>
            Provides a context storage specific for the logical thread.
            the .net framework can swap logical threads around when it feels like it,
            and it usually feels like it under load. sometimes.
            
            In these cases this storage is safer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.LogicalThreadContextStorage`1.NewStorage``1">
            <summary>
            It is best to override since this way is "a bit" heavy
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.LogicalThreadContextStorage`1.Scope">
            <summary>
            Get context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.LogicalThreadContextStorage`1.Value">
            <summary>
            One storage slot
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Context.PhysicalThreadContextStorage`1">
            <summary>
            Provides a thread specific storage.
            
            Discussion on implmentation halts on this quote from MSDN:
            "Thread.AllocateDataSlot Method: Allocates an unnamed data slot on all the threads. 
            For better performance, use fields that are marked with the ThreadStaticAttribute attribute instead."
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Context.PhysicalThreadContextStorage`1.NewStorage``1">
            <summary>
            It is best to override since this way is "a bit" heavy
            </summary>
            <typeparam name="U"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Context.PhysicalThreadContextStorage`1.Scope">
            <summary>
            Get the context scope.
            </summary>
        </member>
        <member name="P:Siriona.Library.Context.PhysicalThreadContextStorage`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Cryptography.Crc32">
            <summary>
            Implements the crc32 hash algorithm.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check
            </summary>
        </member>
        <member name="F:Siriona.Library.Cryptography.Crc32.DefaultPolynomial">
            <summary>
            Represents the default polynomial for Crc32
            </summary>
        </member>
        <member name="F:Siriona.Library.Cryptography.Crc32.DefaultSeed">
            <summary>
            Represents the default seed.
            </summary>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Cryptography.Crc32"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Cryptography.Crc32"/> class.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>
            The computed hash code.
            </returns>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.Compute(System.Byte[])">
            <summary>
            Computes the hash for specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.Compute(System.UInt32,System.Byte[])">
            <summary>
            Computes the hash for specified seed.
            </summary>
            <param name="seed">The seed.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Cryptography.Crc32.Compute(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Computes the hash for specified polynomial.
            </summary>
            <param name="polynomial">The polynomial.</param>
            <param name="seed">The seed.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Cryptography.Crc32.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <returns>
            The size, in bits, of the computed hash code.
            </returns>
        </member>
        <member name="T:Siriona.Library.Cryptography.PasswordEncryptor">
            <summary>
            Encrypt user password with salt
            </summary>
        </member>
        <member name="M:Siriona.Library.Cryptography.PasswordEncryptor.Encrypt(System.String,System.Byte[])">
            <summary>
            Encrypt password with existing salt
            </summary>
            <param name="password">the password</param>
            <param name="salt">the salt</param>
            <returns>passswordHash</returns>
        </member>
        <member name="M:Siriona.Library.Cryptography.PasswordEncryptor.GenerateSalt">
            <summary>
            Generates salt for password hash
            </summary>
            <returns>salt</returns>
        </member>
        <member name="T:Siriona.Library.Cryptography.PasswordGenerator">
            <summary>
            Generates a random password
            </summary>
        </member>
        <member name="M:Siriona.Library.Cryptography.PasswordGenerator.Generate">
            <summary>
            Generates a random password with the default length.
            </summary>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Siriona.Library.Cryptography.PasswordGenerator.Generate(System.Int32)">
            <summary>
            Generates a random password with given length.
            </summary>
            <returns>Randomly generated password.</returns>
        </member>
        <member name="M:Siriona.Library.Cryptography.PasswordGenerator.GetRandom">
            <summary>
            Gets a random object with a random seed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.DataCache`2">
            <summary>
            Provides a cache for key-value pairs
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.DataCache`2.#ctor(System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.DataCache`2"/> class.
            </summary>
            <param name="lifeTime">The life time of cached objects.</param>
            <param name="maximumItemCount">The maximum number of items in the cache.</param>
            <param name="cleanupPercent">The cleanup percent.</param>
        </member>
        <member name="M:Siriona.Library.DataCache`2.Contains(`0)">
            <summary>
            Determines whether the cache contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the cache contains the key and the key is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.DataCache`2.Get(`0,Siriona.Library.Func{`0,`1})">
            <summary>
            Gets the value associated with specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="evaluator">The evaluator of values to feed the cache if key is missing.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Siriona.Library.DataCache`2.Get(System.Collections.Generic.IEnumerable{`0},Siriona.Library.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            Gets the specified keys.
            </summary>
            <param name="keys">The keys.</param>
            <param name="evaluator">The evaluator of values to feed the cache with missing keys.</param>
            <returns>A list of key-value pairs.</returns>
        </member>
        <member name="M:Siriona.Library.DataCache`2.Claim(System.Int32)">
            <summary>
            Claims space for the specified item count.
            </summary>
            <param name="itemCount">The number of items claimed.</param>
        </member>
        <member name="P:Siriona.Library.DataCache`2.Count">
            <summary>
            Gets the number of cached and valid items.
            </summary>
            <value>
            The number of cached items.
            </value>
        </member>
        <member name="T:Siriona.Library.Data.DataValueAttribute">
            <summary>
            Indicates that a type can be converted to and from an underlying type for data storage.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataValueAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataValueAttribute"/> class.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataValueAttribute.GetConverter(System.Type)">
            <summary>
            Gets the converter.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValueAttribute.GetConverter``2">
            <summary>
            Gets the converter.
            </summary>
            <typeparam name="TData">The inner data type.</typeparam>
            <typeparam name="TValue">The outer value type.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataValueAttribute.Converter">
            <summary>
            Gets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="T:Siriona.Library.Data.IDataValueConverter">
            <summary>
            Implemented by data value converters.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.IDataValueConverter.ConvertFrom(System.Object)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.IDataValueConverter.ConvertTo(System.Object)">
            <summary>
            Converts actual value type to underlying data type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.IDataValueConverter.DataType">
            <summary>
            Gets the inner data type.
            </summary>
            <value>The inner data type.</value>
        </member>
        <member name="P:Siriona.Library.Data.IDataValueConverter.ValueType">
            <summary>
            Gets the outer value type.
            </summary>
            <value>The outer value type.</value>
        </member>
        <member name="T:Siriona.Library.Data.IDataValueConverter`2">
            <summary>
            Implemented by data value converters.
            </summary>
            <typeparam name="TData">The inner data type.</typeparam>
            <typeparam name="TValue">The outer value type.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.IDataValueConverter`2.ConvertFrom(`0)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.IDataValueConverter`2.ConvertTo(`1)">
            <summary>
            Converts actual value type to underlying data type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.DataValueConverter`2">
            <summary>
            Provides a base implementation for data value converters.
            </summary>
            <typeparam name="TData">The type of the inner data.</typeparam>
            <typeparam name="TValue">The type of the outer value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.DataValueConverter`2.Siriona#Library#Data#IDataValueConverter#ConvertFrom(System.Object)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValueConverter`2.Siriona#Library#Data#IDataValueConverter#ConvertTo(System.Object)">
            <summary>
            Converts actual value type to underlying data type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValueConverter`2.ConvertFrom(`0)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValueConverter`2.ConvertTo(`1)">
            <summary>
            Converts actual value type to underlying data type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataValueConverter`2.DataType">
            <summary>
            Gets the inner data type.
            </summary>
            <value>The inner data type.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataValueConverter`2.ValueType">
            <summary>
            Gets the outer value type.
            </summary>
            <value>The outer value type.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2">
            <summary>
            Represents a dictionary for concurrent access.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="concurrencyLevel">The concurrency level.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="concurrencyLevel">The concurrency level.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2"/> class.
            </summary>
            <param name="concurrencyLevel">The concurrency level.</param>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
            <summary>
            Copy the dictionay tp a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Tries the add.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Tries the remove.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Tries the update.
            </summary>
            <param name="key">The key.</param>
            <param name="newValue">The new value.</param>
            <param name="comparisonValue">The comparison value.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Concurrent.ConcurrentDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Data.Excel.ExcelTableCollection">
            <summary>
            Represents a collection of <see cref="T:Siriona.Library.Data.Excel.ExcelTable"/> objects.
            </summary>
        </member>
        <member name="T:Siriona.Library.Collections.ReadOnlyNameValueCollection`1">
            <summary>
            Represents a generic name-value association collection.
            </summary>
            <typeparam name="T">The type of items stored in the collection.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.#ctor(Siriona.Library.Collections.NameValueCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.GetKey(System.Int32)">
            <summary>
            Gets the key.
            </summary>
            <param name="index">The index.</param>
            <returns>The key name.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.HasKeys">
            <summary>
            Determines whether this instance has keys.
            </summary>
            <returns>
            	<c>true</c> if this instance has keys; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.AllKeys">
            <summary>
            Gets all keys.
            </summary>
            <value>All the keys the collection contains.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.Item(System.String)">
            <summary>
            Gets or sets the item with the specified name.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ReadOnlyNameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.AlternativeBuilder">
            <summary>
            Represents an alternative builder.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.AlternativeBuilder.#ctor(Siriona.Library.Text.Parsing.Parser,Siriona.Library.Text.Parsing.ProductionPattern,Siriona.Library.Text.Parsing.ProductionPatternAlternative)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.AlternativeBuilder"/> class.
            </summary>
            <param name="parser">The parser.</param>
            <param name="pattern">The pattern.</param>
            <param name="alternative">The alternative.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.AlternativeBuilder.Token(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Adds a token with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.AlternativeBuilder.Production(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Add a production with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.AlternativeBuilder.EndAlternative">
            <summary>
            Ends the alternative.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.AlternativeBuilder.OptionalProduction(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Adds an Optional production.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.AlternativeBuilder.Production(Siriona.Library.Data.MGraph.TokenId,System.Int32,System.Int32)">
            <summary>
            Adds a production with the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="minimumCount">The minimum count.</param>
            <param name="maximumCount">The maximum count.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MAnalyzer">
            <summary>
             Represents an anylizer for the MGraph grammar.
            </summary>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Analyzer">
            <summary>
             A parse tree analyzer. This class provides callback methods that
             may be used either during parsing, or for a parse tree traversal.
             This class should be subclassed to provide adequate handling of the
             parse tree nodes.
            
             The general contract for the analyzer class does not guarantee a
             strict call order for the callback methods. Depending on the type
             of parser, the enter() and exit() methods for production nodes can
             be called either in a top-down or a bottom-up fashion. The only
             guarantee provided by this API, is that the calls for any given
             node will always be in the order enter(), child(), and exit(). If
             various child() calls are made, they will be made from left to
             right as child nodes are added (to the right).
            </summary>
             <remarks>
             author   Per Cederberg, per at percederberg dot net
             version  1.5
            </remarks>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Analyzer.Analyze(Siriona.Library.Text.Parsing.Node)">
            <summary>
            Analyzes a parse tree node by traversing all it's child nodes.
            The tree traversal is depth-first, and the appropriate
            callback methods will be called. If the node is a production
            node, a new production node will be created and children will
            be added by recursively processing the children of the
            specified production node. This method is used to process a
            parse tree after creation.
            </summary>
            <param name="node">the parse tree node to process.</param>
            <returns>the resulting parse tree node</returns>
            <exception cref="T:Siriona.Library.Text.Parsing.ParserLogException">if the node analysis discovered errors</exception>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Analyzer.Analyze(Siriona.Library.Text.Parsing.Node,Siriona.Library.Text.Parsing.ParserLogException)">
            <summary>
            Analyzes a parse tree node by traversing all it's child nodes.
            The tree traversal is depth-first, and the appropriate
            callback methods will be called. If the node is a production
            node, a new production node will be created and children will
            be added by recursively processing the children of the
            specified production node. This method is used to process a
            parse tree after creation.
            </summary>
            <param name="node">the parse tree node to process.</param>
            <param name="log">the parser error log.</param>
            <returns>the resulting parse tree node.</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Analyzer.NewProduction(Siriona.Library.Text.Parsing.ProductionPattern)">
            <summary>
            Factory method to create a new production node. This method
            can be overridden to provide other production implementations
            than the default one.
            </summary>
            <param name="pattern">the production pattern.</param>
            <returns>the new production node</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Analyzer.Exit(Siriona.Library.Text.Parsing.Node)">
            <summary>
            Called when exiting a parse tree node. By default this method
            returns the node. A subclass can override this method to handle
            each node separately. If no parse tree should be created, this
            method should return null.
            </summary>
            <param name="node">the node being exited.</param>
            <returns>the node to add to the parse tree, or null if no parse tree should be created</returns>
            <exception cref="T:Siriona.Library.Text.Parsing.ParseException">if the node analysis discovered errors.</exception>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MAnalyzer.Exit(Siriona.Library.Text.Parsing.Node)">
            <summary>
            Called when exiting a parse tree node. By default this method
            returns the node. A subclass can override this method to handle
            each node separately. If no parse tree should be created, this
            method should return null.
            </summary>
            <param name="node">the node being exited.</param>
            <returns>
            the node to add to the parse tree, or null if no parse tree should be created
            </returns>
            <exception cref="T:Siriona.Library.Text.Parsing.ParseException">if the node analysis discovered errors.</exception>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MAnalyzer.ExitValue(Siriona.Library.Text.Parsing.Node)">
            <summary>
            Exits the value.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MAnalyzer.ExitLabel(Siriona.Library.Text.Parsing.Node)">
            <summary>
            Exits the label.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MNodeConverter">
            <summary>
            Provides conversion of <see cref="T:Siriona.Library.Data.MGraph.MNode"/> from/to string.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNodeConverter.ConvertFrom(System.String)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNodeConverter.ConvertTo(Siriona.Library.Data.MGraph.MNode)">
            <summary>
            Converts actual value type to underlying data type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MParser">
            <summary>
             Represetns a parser for the MGraph grammar.
            </summary>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RecursiveDescentParser">
             A recursive descent parser. This parser handles LL(n) grammars,
             selecting the appropriate pattern to parse based on the next few
             tokens. The parser is more efficient the fewer look-ahead tokens
             that is has to consider.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Parser">
             A base parser class. This class provides the standard parser
             interface, as well as token handling.
            
             ->author   Per Cederberg, per at percederberg dot net
             ->version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Parser.tokenizer">
            The tokenizer to use.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Parser.analyzer">
            The analyzer to use for callbacks.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Parser.addedPatterns">
            The list of production patterns.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Parser.addedPatternIds">
            The map with production patterns and their id:s. This map
            contains the production patterns indexed by their id:s.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.#ctor(Siriona.Library.Text.Parsing.Tokenizer,Siriona.Library.Text.Parsing.Analyzer)">
             Creates a new parser.
            
             ->param tokenizer       the tokenizer to use
             ->param analyzer        the analyzer callback to use
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.AddPattern(Siriona.Library.Text.Parsing.ProductionPattern)">
             Adds a new production pattern to the parser. The first pattern
             added is assumed to be the starting point in the grammar. The
             patterns added may be validated to some extent.
            
             ->param pattern        the pattern to add
            
             ->throws ParserCreationException if the pattern couldn't be
                         added correctly to the parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.Check">
             Initializes the parser. All the added production patterns will
             be analyzed for ambiguities and errors. This method also
             initializes internal data structures used during the parsing.
            
             ->throws ParserCreationException if the parser couldn't be
                         initialized correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.PreparePatterns">
             Initializes the parser. All the added production patterns will
             be analyzed for ambiguities and errors. This method also
             initializes internal data structures used during the parsing.
            
             ->throws ParserCreationException if the parser couldn't be
                         initialized correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.CheckPattern(Siriona.Library.Text.Parsing.ProductionPattern)">
             Checks a production pattern for completeness. If some rule
             in the pattern referenced an production pattern not added
             to this parser, a parser creation exception will be thrown.
            
             ->param pattern        the production pattern to check
            
             ->throws ParserCreationException if the pattern referenced a
                         pattern not added to this parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.Prepare">
            <summary>
            Prepares this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.CheckAlternative(System.String,Siriona.Library.Text.Parsing.ProductionPatternAlternative)">
             Checks a production pattern alternative for completeness.
             If some element in the alternative referenced a production
             pattern not added to this parser, a parser creation
             exception will be thrown.
            
             ->param name           the name of the pattern being checked
             ->param alt            the production pattern alternative
            
             ->throws ParserCreationException if the alternative
                         referenced a pattern not added to this parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.CheckElement(System.String,Siriona.Library.Text.Parsing.ProductionPatternElement)">
             Checks a production pattern element for completeness. If
             the element references a production pattern not added to
             this parser, a parser creation exception will be thrown.
            
             ->param name           the name of the pattern being checked
             ->param elem           the production pattern element to check
            
             ->throws ParserCreationException if the element referenced a
                         pattern not added to this parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.Parse(System.IO.TextReader)">
             Parses the token stream and returns a parse tree. This
             method will call Prepare() if not previously called. It
             will also call the Reset() method, to make sure that only
             the Tokenizer.Reset() method must be explicitly called in
             order to reuse a parser for multiple input streams. In case
             of a parse error, the parser will attempt to recover and
             throw all the errors found in a parser log exception in the
             end.
            
             ->return the parse tree
            
             ->throws ParserCreationException if the parser couldn't be
                         initialized correctly
             ->throws ParserLogException if the input couldn't be parsed
                         correctly
            
             ->see #Prepare
             ->see #Reset
             ->see Tokenizer#Reset
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.GetAddedPattern(System.Int32)">
             Returns the production pattern with the specified id.
            
             ->param id             the production pattern id
            
             ->return the production pattern found, or
                     null if non-existent
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.GetPatterns">
             Returns the ordered set of production patterns.
            
             ->return the ordered set of production patterns
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.ToString">
             Returns a string representation of this parser. The string will
             contain all the production definitions and various additional
             information.
            
             ->return a detailed string representation of this parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.ToString(Siriona.Library.Text.Parsing.ProductionPattern)">
             Returns a string representation of a production pattern.
            
             ->param prod           the production pattern
            
             ->return a detailed string representation of the pattern
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.ToString(Siriona.Library.Text.Parsing.ProductionPatternAlternative)">
             Returns a string representation of a production pattern
             alternative.
            
             ->param alt            the production pattern alternative
            
             ->return a detailed string representation of the alternative
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.ToString(Siriona.Library.Text.Parsing.ProductionPatternElement)">
             Returns a string representation of a production pattern
             element.
            
             ->param elem           the production pattern element
            
             ->return a detailed string representation of the element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Parser.GetTokenDescription(System.Int32)">
             Returns a token description for a specified token.
            
             ->param token          the token to describe
            
             ->return the token description
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Parser.Tokenizer">
             The tokenizer property (read-only). This property contains
             the tokenizer in use by this parser.
            
             ->since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Parser.Analyzer">
             The analyzer property (read-only). This property contains
             the analyzer in use by this parser.
            
             ->since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.#ctor(Siriona.Library.Text.Parsing.Tokenizer,Siriona.Library.Text.Parsing.Analyzer)">
             Creates a new parser.
            
             @param tokenizer      the tokenizer to use
             @param analyzer       the analyzer callback to use
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.AddPattern(Siriona.Library.Text.Parsing.ProductionPattern)">
             Adds a new production pattern to the parser. The pattern
             will be added last in the list. The first pattern added is
             assumed to be the starting point in the grammar. The
             pattern will be validated against the grammar type to some
             extent.
            
             @param pattern        the pattern to add
            
             @throws ParserCreationException if the pattern couldn't be
                         added correctly to the parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.Prepare">
             Initializes the parser. All the added production patterns
             will be analyzed for ambiguities and errors. This method
             also initializes the internal data structures used during
             the parsing.
            
             @throws ParserCreationException if the parser couldn't be
                         initialized correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CalculateLookAhead(Siriona.Library.Text.Parsing.ProductionPattern)">
             Calculates the look-ahead needed for the specified production
             pattern. This method attempts to resolve any conflicts and
             stores the results in the pattern look-ahead object.
            
             @param pattern        the production pattern
            
             @throws ParserCreationException if the look-ahead set couldn't
                         be determined due to inherent ambiguities
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CalculateLookAhead(Siriona.Library.Text.Parsing.ProductionPatternAlternative,System.Int32)">
             Calculates the look-aheads needed for the specified pattern
             alternative. This method attempts to resolve any conflicts in
             optional elements by recalculating look-aheads for referenced
             productions.
            
             @param alt            the production pattern alternative
             @param pos            the pattern element position
            
             @throws ParserCreationException if the look-ahead set couldn't
                         be determined due to inherent ambiguities
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.FindLookAhead(Siriona.Library.Text.Parsing.ProductionPattern,System.Int32,Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack,Siriona.Library.Text.Parsing.LookAheadSet)">
             Finds the look-ahead set for a production pattern. The maximum
             look-ahead length must be specified. It is also possible to
             specify a look-ahead set filter, which will make sure that
             unnecessary token sequences will be avoided.
            
             @param pattern        the production pattern
             @param length         the maximum look-ahead length
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the production pattern
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.FindLookAhead(Siriona.Library.Text.Parsing.ProductionPatternAlternative,System.Int32,System.Int32,Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack,Siriona.Library.Text.Parsing.LookAheadSet)">
             Finds the look-ahead set for a production pattern alternative.
             The pattern position and maximum look-ahead length must be
             specified. It is also possible to specify a look-ahead set
             filter, which will make sure that unnecessary token sequences
             will be avoided.
            
             @param alt            the production pattern alternative
             @param length         the maximum look-ahead length
             @param pos            the pattern element position
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the pattern alternative
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.FindLookAhead(Siriona.Library.Text.Parsing.ProductionPatternElement,System.Int32,Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack,Siriona.Library.Text.Parsing.LookAheadSet)">
             Finds the look-ahead set for a production pattern element. The
             maximum look-ahead length must be specified. This method takes
             the element repeats into consideration when creating the
             look-ahead set, but does NOT include an empty sequence even if
             the minimum count is zero (0). It is also possible to specify a
             look-ahead set filter, which will make sure that unnecessary
             token sequences will be avoided.
            
             @param elem           the production pattern element
             @param length         the maximum look-ahead length
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the pattern element
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.FindLookAhead(Siriona.Library.Text.Parsing.ProductionPatternElement,System.Int32,System.Int32,Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack,Siriona.Library.Text.Parsing.LookAheadSet)">
             Finds the look-ahead set for a production pattern element. The
             maximum look-ahead length must be specified. This method does
             NOT take the element repeat into consideration when creating
             the look-ahead set. It is also possible to specify a look-ahead
             set filter, which will make sure that unnecessary token
             sequences will be avoided.
            
             @param elem           the production pattern element
             @param length         the maximum look-ahead length
             @param dummy          a parameter to distinguish the method
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the pattern element
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.FindConflicts(Siriona.Library.Text.Parsing.ProductionPattern,System.Int32)">
             Returns a look-ahead set with all conflics between
             alternatives in a production pattern.
            
             @param pattern        the production pattern
             @param maxLength      the maximum token sequence length
            
             @return a look-ahead set with the conflicts found
            
             @throws ParserCreationException if an inherent ambiguity was
                         found among the look-ahead sets
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.FindConflicts(System.String,System.String,Siriona.Library.Text.Parsing.LookAheadSet,Siriona.Library.Text.Parsing.LookAheadSet)">
             Returns a look-ahead set with all conflicts between two
             look-ahead sets.
            
             @param pattern        the pattern name being analyzed
             @param location       the pattern location
             @param set1           the first look-ahead set
             @param set2           the second look-ahead set
            
             @return a look-ahead set with the conflicts found
            
             @throws ParserCreationException if an inherent ambiguity was
                         found among the look-ahead sets
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.ThrowAmbiguityException(System.String,System.String,Siriona.Library.Text.Parsing.LookAheadSet)">
             Throws a parser creation exception for an ambiguity. The
             specified look-ahead set contains the token conflicts to be
             reported.
            
             @param pattern        the production pattern name
             @param location       the production pattern location, or null
             @param set            the look-ahead set with conflicts
            
             @throws ParserCreationException always thrown by this method
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack">
            A name value stack. This stack is used to detect loops and
            repetitions of the same production during look-ahead analysis.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.nameStack">
            A stack with names.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.valueStack">
            A stack with values.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.Contains(System.String)">
             Checks if the specified name is on the stack.
            
             @param name           the name to search for
            
             @return true if the name is on the stack, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.Contains(System.String,System.Int32)">
             Checks if the specified name and value combination is on
             the stack.
            
             @param name           the name to search for
             @param value          the value to search for
            
             @return true if the combination is on the stack, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.Clear">
            Clears the stack. This method removes all elements on
            the stack.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.Push(System.String,System.Int32)">
             Adds a new element to the top of the stack.
            
             @param name           the stack name
             @param value          the stack value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser.CallStack.Pop">
            Removes the top element of the stack.
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MParser.StartPattern(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Starts the pattern.
            </summary>
            <param name="tokenId">The token id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MParser.StartSynteticPattern(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Starts the syntetic pattern.
            </summary>
            <param name="tokenId">The token id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MParser.#ctor(Siriona.Library.Text.Parsing.Tokenizer,Siriona.Library.Text.Parsing.Analyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MParser"/> class.
            </summary>
            <param name="tokenizer"></param>
            <param name="analyzer"></param>
            Creates a new parser.
            @param tokenizer      the tokenizer to use
            @param analyzer       the analyzer callback to use
        </member>
        <member name="T:Siriona.Library.Data.MGraph.ProductionBuilder">
            <summary>
            Represents a produiction builder.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.ProductionBuilder.#ctor(Siriona.Library.Text.Parsing.Parser,Siriona.Library.Text.Parsing.ProductionPattern)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.ProductionBuilder"/> class.
            </summary>
            <param name="parser">The parser.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.ProductionBuilder.EndPattern">
            <summary>
            Ends the pattern.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.ProductionBuilder.StartAlternative">
            <summary>
            Starts the alternative.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.ProductionBuilder.AlternativeProduction(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Adds an alternative production.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.ProductionBuilder.AlternativeToken(Siriona.Library.Data.MGraph.TokenId)">
            <summary>
            Adds an alternative token.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.TokenId">
            <summary>
            Represetns the tokens for the MGraph grammar.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.CurlyOpen">
            <summary>
            A open curly.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.CurlyClose">
            <summary>
            A close curly.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.SquareOpen">
            <summary>
            A square bracket open.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.SquareClose">
            <summary>
            A square bracket close.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Comma">
            <summary>
            A comma.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Equals">
            <summary>
            A equals sign.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.BracketOpen">
            <summary>
            A bracket open.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.BracketClose">
            <summary>
            A bracket close.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Null">
            <summary>
            A null litteral.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.True">
            <summary>
            True litteral.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.False">
            <summary>
            False litteral.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.String">
            <summary>
            A string litteral.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Char">
            <summary>
            A char litteral.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Id">
            <summary>
            An identifier.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.VerbatimId">
            <summary>
            An verbatim identifier.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Int">
            <summary>
            An int.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Decimal">
            <summary>
            A decimal.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.DateTime">
            <summary>
            A datetime.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Time">
            <summary>
            A time.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Guid">
            <summary>
            A guid.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Binary">
            <summary>
            A binary.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Space">
            <summary>
            A space.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Element">
            <summary>
            An element.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Node">
            <summary>
            A node.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Property">
            <summary>
            A node property.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Value">
            <summary>
            A property value.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Collection">
            <summary>
            A collection of nodes.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.List">
            <summary>
            A list of nodes.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Array">
            <summary>
            An array of nodes.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.ListItems">
            <summary>
            Items in a list.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.ListItem">
            <summary>
            An item in a list.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.ArrayItems">
            <summary>
            Items in a array.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.ArrayItem">
            <summary>
            An item in a array;
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.TokenId.Label">
            <summary>
            A label.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.ReflectionDataMethodInfo">
            <summary>
            Represents a data method information obtained through reflection.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.DataMethodInfo">
            <summary>
            Represents a Data method reflection information.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodInfo.GetCallingMethod">
            <summary>
            Gets <see cref="T:Siriona.Library.Data.DataMethodInfo"/> that represents the calling method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodInfo.GetCallingMethodInfo">
            <summary>
            Gets <see cref="T:Siriona.Library.Data.DataMethodInfo"/> that represents the calling method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.MethodHandle">
            <summary>
            Gets the method handle.
            </summary>
            <value>The method handle.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.DeclaringType">
            <summary>
            Gets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.ReturnType">
            <summary>
            Gets the type of the return value.
            </summary>
            <value>The type of the return.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.ReturnTypeCustomAttribute">
            <summary>
            Gets the return type custom attribute.
            </summary>
            <value>The return type custom attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.CommandTimeout">
            <summary>
            Gets the command timeout.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodInfo.SkipTransaction">
            <summary>
            Gets a value indicating whether this data method should skip transaction.
            </summary>
            <value><c>true</c> if this data method should skip transaction; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Siriona.Library.Data.ReflectionDataMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.ReflectionDataMethodInfo"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.MethodHandle">
            <summary>
            Gets the method handle.
            </summary>
            <value>The method handle.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.DeclaringType">
            <summary>
            Gets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.ReturnType">
            <summary>
            Gets the type of the return value.
            </summary>
            <value>The type of the return.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.ReturnTypeCustomAttribute">
            <summary>
            Gets the return type custom attribute.
            </summary>
            <value>The return type custom attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataMethodInfo.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataParameterInfo">
            <summary>
            Represents a<see cref="T:Siriona.Library.Data.DataMethodInfo"/> parameter.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterInfo.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterInfo.IsSensitive">
            <summary>
            Gets a value indicating whether this parameter may contain sensitive data.
            </summary>
            <value>
            	<c>true</c> if this parameters is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterInfo.IsIn">
            <summary>
            Gets a value indicating whether this instance is in.
            </summary>
            <value><c>true</c> if this instance is in; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterInfo.IsOut">
            <summary>
            Gets a value indicating whether this instance is out.
            </summary>
            <value><c>true</c> if this instance is out; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ExceptionReportEventArgs">
            <summary>
            Represents arguments for exception reporting events.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionReportEventArgs.#ctor(System.Guid,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ExceptionReportEventArgs"/> class.
            </summary>
            <param name="reportId">The report id.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ExceptionReportEventArgs.ReportId">
            <summary>
            Gets the report id.
            </summary>
            <value>The report id.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ExceptionReportEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.ExceptionCriticityRuleOutput">
            <summary>
            Represents an exception criticy rule output.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.IExceptionConverterRuleOutput">
            <summary>
            Represents a rule for creating an output from an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.IExceptionConverterRuleOutput.ApplyTo(System.Exception)">
            <summary>
            Applies the current rule to the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An exception converter output</returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.IExceptionConverterRuleOutput.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.ExceptionCriticityRuleOutput.#ctor(System.Nullable{Siriona.Library.Diagnostics.ErrorEventCriticity})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.Rules.ExceptionCriticityRuleOutput"/> class.
            </summary>
            <param name="criticity">The criticity.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.ExceptionCriticityRuleOutput.ApplyTo(System.Exception)">
            <summary>
            Applies the current rule to the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            An exception converter output
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionCriticityRuleOutput.Criticity">
            <summary>
            Gets the criticity.
            </summary>
            <value>
            The criticity.
            </value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionCriticityRuleOutput.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.HttpContextMatchEvaluator">
            <summary>
            Represents an evaluator that match a specified item in the current <see cref="T:System.Web.HttpRequest"/>.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.IRuleMatchEvaluator">
            <summary>
            Represents a match evaluator.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.IRuleMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.HttpContextMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.HttpContextMatchEvaluator.Path">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.HttpContextMatchEvaluator.FormatString">
            <summary>
            Gets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.HttpContextMatchEvaluator.Value">
            <summary>
            Gets the regular expression that matches the value.
            </summary>
            <value>The regular expression.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.NullExceptionConverterRuleOutput">
            <summary>
            Represents a null exception converter rule output.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.NullExceptionConverterRuleOutput.ApplyTo(System.Exception)">
            <summary>
            Applies the current rule to the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An exception converter output</returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.NullExceptionConverterRuleOutput.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Statsd.Metric">
            <summary>
            Represent a metric in statsd.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.Metric.Counter(System.String,System.Int64)">
            <summary>
            Creates a Counter metric.
            Use conter metric to report incremental values.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.Metric.Timer(System.String,System.Int64)">
            <summary>
            Create a Timer metric in milliseconds.
            </summary>
            <param name="name"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.Metric.Gauge(System.String,System.Int64)">
            <summary>
            Create a Gauge metric. Use gauge metric to report a value directly to Statsd.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.Metric.op_Addition(Siriona.Library.Diagnostics.Statsd.Metric,Siriona.Library.Diagnostics.Statsd.Metric)">
            <summary>
            Concatenates metrics to send them together.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.Metric.ToArray">
            <summary>
            Creates an array of bytes representing the metric.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.Metric.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Statsd.IStatsdClient">
            <summary>
            Represents a client to send stats on Statsd.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.IStatsdClient.Send(Siriona.Library.Diagnostics.Statsd.Metric)">
            <summary>
            Sends the specified metric to Statsd.
            </summary>
            <param name="metric"></param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Statsd.NullStatsdClient">
            <summary>
            Implements <see cref="T:Siriona.Library.Diagnostics.Statsd.IStatsdClient"/> by doing nothing.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.NullStatsdClient.Send(Siriona.Library.Diagnostics.Statsd.Metric)">
            <summary>
            Sends the specified metric to Statsd.
            </summary>
            <param name="metric"></param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Statsd.StatsdClient">
            <summary>
            Provide an udp implementation for <see cref="T:Siriona.Library.Diagnostics.Statsd.IStatsdClient"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdClient.#ctor(System.String,System.Int32)">
            <summary>
            Creates a instance of the <see cref="T:Siriona.Library.Diagnostics.Statsd.StatsdClient"/> class.
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdClient.Send(Siriona.Library.Diagnostics.Statsd.Metric)">
            <summary>
            Sends the specified metric to statsd.
            </summary>
            <param name="metric"></param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdClient.Parse(System.String)">
            <summary>
            Parses a endpoint string to return a client or a fake NullClient that does nothing.
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="F:Siriona.Library.Diagnostics.Statsd.StatsdClient.Default">
            <summary>
            Use default statsd client instance. 
            It returns a fake NullClient that does nothing if no endpoint is provided in app settings "Statsd". 
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Statsd.StatsdExtensions">
            <summary>
            Provides extension methods for statsd.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdExtensions.Counter(Siriona.Library.Diagnostics.Statsd.IStatsdClient,System.String,System.Int64)">
            <summary>
            Send a counter valud to statsd.
            </summary>
            <param name="client"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdExtensions.Timer(Siriona.Library.Diagnostics.Statsd.IStatsdClient,System.String,System.Int64)">
            <summary>
            Sends timer value to statsd.
            </summary>
            <param name="client"></param>
            <param name="name"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdExtensions.Timer(Siriona.Library.Diagnostics.Statsd.IStatsdClient,System.String)">
            <summary>
            Starts a timer to report to statsd.
            </summary>
            <param name="client"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdExtensions.Gaugue(Siriona.Library.Diagnostics.Statsd.IStatsdClient,System.String,System.Int64)">
            <summary>
            Sends a gauge value to statsd.
            </summary>
            <param name="client"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Statsd.StatsdTimer">
            <summary>
            Represents a timer to use in a using construct.
            Use the Timer extension method on IStatsdClient to get an instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdTimer.#ctor(Siriona.Library.Diagnostics.Statsd.IStatsdClient,System.String)">
            <summary>
            Create a instances of the <see cref="T:Siriona.Library.Diagnostics.Statsd.StatsdTimer"/> class.
            </summary>
            <param name="client"></param>
            <param name="name"></param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Statsd.StatsdTimer.Dispose">
            <summary>
            Report timer to statsd.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.Cache`2">
            <summary>
            Represents a cache of values indexed by keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.Cache`2.Find(`0)">
            <summary>
            Finds the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Cache`2.Insert(`0,`1)">
            <summary>
            Inserts the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Cache`2.Remove(`0)">
            <summary>
            Removes the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.KeyedCache`2">
            <summary>
            Represents a cache of values indexed by keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.KeyedCache`2.#ctor(Siriona.Library.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.KeyedCache`2"/> class.
            </summary>
            <param name="keySelector">The key selector.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.KeyedCache`2.Find(`0)">
            <summary>
            Finds the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.KeyedCache`2.Insert(`1)">
            <summary>
            Inserts the value with specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.KeyedCache`2.Remove(`1)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.KeyedCache`2.Remove(`0)">
            <summary>
            Removes the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.CollectionUtility">
            <summary>
            Provides helpers for handling collections.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.CollectionUtility.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            	<c>true</c> if the specified enumerable is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.CollectionUtility.Equals(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerables are equal.
            </summary>
            <param name="a">The first enumerable.</param>
            <param name="b">The second enumerable.</param>
            <returns><c>true</c> if both enumerable contains the same items; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.Enumerable">
            <summary>
            Provides helper methods to work with <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``0,``0})">
            <summary>
            Aggregates the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="func">The aggregation functio.</param>
            <returns>The aggregated result.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,Siriona.Library.Func{``1,``0,``1})">
            <summary>
            Aggregates the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulated value.</typeparam>
            <param name="source">The source.</param>
            <param name="seed">The seed value.</param>
            <param name="func">The aggregation function.</param>
            <returns>The aggregated value.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,Siriona.Library.Func{``1,``0,``1},Siriona.Library.Func{``1,``2})">
            <summary>
            Aggregates the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulated value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="seed">The seed value.</param>
            <param name="func">The aggregation function.</param>
            <param name="resultSelector">The result selector.</param>
            <returns>The aggregated value.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the item count in the specified enumerable.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>The item count</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Counts the number of element in the specified enumerable that verify the predicate.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>The item count.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns the minimum value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The minimum value of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns the maximum value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The maximum value of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns the minimum value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The minimum value of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns the maximum value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The maximum value of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Int32})">
            <summary>
            Returns the aggregated value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The sum of values of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Int64})">
            <summary>
            Returns the aggregated value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The sum of values of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Double})">
            <summary>
            Returns the aggregated value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The sum of values of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Single})">
            <summary>
            Returns the aggregated value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The sum of values of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Decimal})">
            <summary>
            Returns the aggregated value of the specified source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns>The sum of values of the source, according to the specified projection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps the specified enumerable in a <see cref="T:Siriona.Library.Collections.Enumerable`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>The <see cref="T:Siriona.Library.Collections.Enumerable`1"/>.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.From``1(System.Collections.IEnumerable)">
            <summary>
            Casts the specified enumerable as an <see cref="T:Siriona.Library.Collections.Enumerable`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>The <see cref="T:Siriona.Library.Collections.Enumerable`1"/>.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts the specified enumerable as an <see cref="T:Siriona.Library.Collections.Enumerable`1"/>.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>The <see cref="T:Siriona.Library.Collections.Enumerable`1"/>.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SafeFrom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps the specified enumerable in a <see cref="T:Siriona.Library.Collections.Enumerable`1"/>, even if null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.CastIterator``1(System.Collections.IEnumerable)">
            <summary>
            Casts the specified enumerable.
            </summary>
            <typeparam name="T">The type of items</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>A generic <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SafeCast``1(System.Collections.IEnumerable)">
            <summary>
            Safely casts the specified enumerable, avoiding badly cast items.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>A generic <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Safely casts the specified enumerable, avoiding badly cast items.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>A generic <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.MakeEnumerable``1(``0)">
            <summary>
            Makes the enumerable.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.MakeEnumerable``1(``0[])">
            <summary>
            Makes the enumerable.
            </summary>
            <param name="values">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the specified enumerable to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the specified enumerable to a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Empty``1">
            <summary>
            Get an empty enumerator of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a enumerable containing the default value if the enumerator is empty.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a enumerable containing the default value if the enumerator is empty.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified source is empty.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>
            	<c>true</c> if the specified source is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Tests if all items in source verify the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests if there is at least one item in source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Tests if any item in source verifies the predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether the source contains the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the source contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the source contains the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            	<c>true</c> if the source contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Repeats the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.RepeatIterator``1(``0,System.Int32)">
            <summary>
            Repeats the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Range(System.Int32,System.Int32)">
            <summary>
            Gets an int enumerable representing sepcified range.
            </summary>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Descending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a descending view of an enumerable.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The data source.</param>
            <returns>The descending enumeration.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a descending view of an enumerable.
            </summary>
            <typeparam name="T">The type of enumerated items.</typeparam>
            <param name="source">The data source.</param>
            <returns>The descending enumeration.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="keySelector">The evaluator.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="keySelector">The evaluator.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Groups equal values.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable.</param>
            <returns>
            A collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups equal values.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            A collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The evaluator.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The evaluator.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="keySelector">The evaluator.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="keySelector">The evaluator.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToLookup``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Groups equal values.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable.</param>
            <returns>
            A collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToLookup``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups equal values.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            A collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The evaluator.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The item type.</typeparam>
            <typeparam name="TKey">The value type.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The evaluator.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2},Siriona.Library.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},Siriona.Library.Func{``0,``2},Siriona.Library.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Groups value by specified count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a single item from enumerable.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Gets a single item from enumerable
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a single value or default.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Gets a single value or default.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the first element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Gets the first element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the first element of default.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Gets the first element of default.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the last element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Gets the last element.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Singles the or default.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Singles the or default.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Skips the specified item count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Takes the specified item count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Filters the specified collection.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="enumerable">The values.</param>
            <param name="predicate">The predicate callback.</param>
            <returns>A collection of filtered values.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Splits the specified enumerable.
            </summary>
            <typeparam name="T">The type of values the enumerable does contain.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The filtering delegate.</param>
            <returns>A partition of the source enumerable into two sets.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Selects a projection of source items.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection function.</param>
            <returns>A enumeration of projected elements.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Selects many elements from each source item and concatenates it in the result enumerable.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Siriona.Library.Func{``0,``2},Siriona.Library.Func{``1,``2},Siriona.Library.Func{``0,``1,``3})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TOuter">The type of the outer.</typeparam>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="outer">The outer.</param>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Siriona.Library.Func{``0,``2},Siriona.Library.Func{``1,``2},Siriona.Library.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TOuter">The type of the outer.</typeparam>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="outer">The outer.</param>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Siriona.Library.Func{``0,``2},Siriona.Library.Func{``1,``2},Siriona.Library.Func{``0,Siriona.Library.Collections.Enumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TOuter">The type of the outer.</typeparam>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="outer">The outer.</param>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Siriona.Library.Func{``0,``2},Siriona.Library.Func{``1,``2},Siriona.Library.Func{``0,Siriona.Library.Collections.Enumerable{``1},``3})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TOuter">The type of the outer.</typeparam>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="outer">The outer.</param>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates distincts values from the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Distinct``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Enumerates distincts values from the specified enumerable.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Enumerates distincts values from the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the difference between the specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable1">The first enumerable.</param>
            <param name="enumerable2">The second enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Difference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets the difference between the specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable1">The first enumerable.</param>
            <param name="enumerable2">The second enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excludes the items from the filter from the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="filter">The filter enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Excludes the items from the filter from the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="filter">The filter enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Excludes the items from the filter from the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="filter">The filter enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Excludes the items from the filter from the specified enumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="filter">The filter enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Intersects the specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Intersects the specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="filter">The filter.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concats the specified enumerations.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Makes a union of specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Makes a union of specified enumerables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ThenBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ThenBy``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ThenByDescending``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable.ThenByDescending``2(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.Enumerable`1">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a smart pointer to add linq extension method-like features. 
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Enumerable`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Enumerable`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.#ctor(Siriona.Library.Collections.Enumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Enumerable`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Count">
            <summary>
            Gets the element count.
            </summary>
            <returns>The element count.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Count(System.Predicate{`0})">
            <summary>
            Gets the element count of elements that verify the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The element count.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.DefaultIfEmpty">
            <summary>
            Returns a enumerable containing the default value if the enumerator is empty.
            </summary>
            <returns>An enumerable containing the default value if the enumerator is empty.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.DefaultIfEmpty(`0)">
            <summary>
            Returns a enumerable containing the default value if the enumerator is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>An enumerable containing the default value if the enumerator is empty.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Where(System.Predicate{`0})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing elements that verify the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The filtered enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Select``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing projections of the elements.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="projection">The projection.</param>
            <returns>The projected enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SelectMany``1(Siriona.Library.Func{`0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing projections of the elements.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="projection">The projection.</param>
            <returns>The projected enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Join``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{`0,``1},Siriona.Library.Func{``0,``1},Siriona.Library.Func{`0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <param name="comparer">The comparer.</param>
            <returns>The joined enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Join``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{`0,``1},Siriona.Library.Func{``0,``1},Siriona.Library.Func{`0,``0,``2})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <returns>The joined enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{`0,``1},Siriona.Library.Func{``0,``1},Siriona.Library.Func{`0,Siriona.Library.Collections.Enumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <param name="comparer">The comparer.</param>
            <returns>The joined enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{`0,``1},Siriona.Library.Func{``0,``1},Siriona.Library.Func{`0,Siriona.Library.Collections.Enumerable{``0},``2})">
            <summary>
            Joins the enumerables using a common key.
            </summary>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="inner">The inner.</param>
            <param name="outerKeySelector">The outer key selector.</param>
            <param name="innerKeySelector">The inner key selector.</param>
            <param name="projection">The projection.</param>
            <returns>The joined enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``1(Siriona.Library.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TKey">The value type.</typeparam>
            <param name="keySelector">The evaluator.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Groups items according to values computed by a specified keySelector.
            </summary>
            <typeparam name="TKey">The value type.</typeparam>
            <param name="keySelector">The evaluator.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy">
            <summary>
            Groups equal values.
            </summary>
            <returns>
            A collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Groups equal values.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns>
            A collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``2(Siriona.Library.Func{`0,``0},Siriona.Library.Func{`0,``1})">
            <summary>
            Groups items according to values computed by a specified key selector.
            </summary>
            <typeparam name="TKey">The value type.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="keySelector">The evaluator.</param>
            <param name="elementSelector">The element selector.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``2(Siriona.Library.Func{`0,``0},Siriona.Library.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups items according to values computed by a specified key selector.
            </summary>
            <typeparam name="TKey">The value type.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="keySelector">The evaluator.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of items groups.</returns>
            <remarks>Items are sorted in order of appearance.</remarks>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``2(Siriona.Library.Func{`0,``0},Siriona.Library.Func{``0,System.Collections.Generic.IEnumerable{`0},``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups items according to values computed by a specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of group items.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``2(Siriona.Library.Func{`0,``0},Siriona.Library.Func{``0,System.Collections.Generic.IEnumerable{`0},``1})">
            <summary>
            Groups items according to values computed by a specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="resultSelector">The result selector.</param>
            <returns>A list of group items.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``3(Siriona.Library.Func{`0,``0},Siriona.Library.Func{`0,``1},Siriona.Library.Func{``0,System.Collections.Generic.IEnumerable{``1},``2})">
            <summary>
            Groups items according to values computed by a specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="resultSelector">The result selector.</param>
            <returns>A list of group items.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy``3(Siriona.Library.Func{`0,``0},Siriona.Library.Func{`0,``1},Siriona.Library.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Groups items according to values computed by a specified key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="elementSelector">The element selector.</param>
            <param name="resultSelector">The result selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list of group items.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GroupBy(System.Int32)">
            <summary>
            Groups value by specified count.
            </summary>
            <param name="count">The count.</param>
            <returns>A list of grouped items.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Split(System.Predicate{`0})">
            <summary>
            Splits the specified enumerable.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>A partition containing included and excluding elements.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Distinct">
            <summary>
            Enumerates distincts values from the specified enumerable. 
            </summary>
            <returns>A list containing distinct values.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Distinct``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Enumerates distincts values from the specified enumerable.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="projection">The projection.</param>
            <returns>A list containing distinct values.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Enumerates distincts values from the specified enumerable.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns>A list containing distinct values.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Exclude(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Excludes the items from the filter from the specified enumerable. 
            </summary>
            <param name="filter">The filter.</param>
            <returns>A list containing items not in the filter list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Exclude(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Excludes the items from the filter from the specified enumerable.
            </summary>
            <param name="filter">The filter.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            A list containing items not in the filter list.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Intersects the specified enumerables. 
            </summary>
            <param name="filter">The filter.</param>
            <returns>A list containing items in both lists.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Intersect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Intersects the specified enumerables.
            </summary>
            <param name="filter">The filter.</param>
            <param name="comparer">The comparer.</param>
            <returns>A list containing items in both lists.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Difference(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the difference between the specified enumerables. 
            </summary>
            <param name="filter">The filter.</param>
            <returns>A list containing items not in the other list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Difference(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Gets the difference between the specified enumerables.
            </summary>
            <param name="filter">The filter.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            A list containing items not in the other list.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Concat(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Concats the current enumerable with the specified one.
            </summary>
            <param name="enumerable">The enumerable to concat with.</param>
            <returns>The concatenated list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Makes a union of specified enumerables.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>The union list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Union(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Makes a union of specified enumerables.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns>The union list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Enumerate">
            <summary>
            Enumerates this instance to make a local copy.
            </summary>
            <returns>The enumerated list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ToList">
            <summary>
            Converts the specified enumerable to a <see cref="T:System.Collections.Generic.List`1"/> 
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ToArray">
            <summary>
            Converts the specified enumerable to a <see cref="T:System.Collections.Generic.List`1"/> 
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ToDictionary``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ToDictionary``1(Siriona.Library.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ToDictionary``2(Siriona.Library.Func{`0,``0},Siriona.Library.Func{`0,``1})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ToDictionary``2(Siriona.Library.Func{`0,``0},Siriona.Library.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the enumerable to dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keySelector">The key selector.</param>
            <param name="valueSelector">The value selector.</param>
            <param name="comparer">The comparer.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.OrderBy``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key. 
            </summary>
            <param name="propertyGetter">The property getter.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.OrderBy``1(Siriona.Library.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="propertyGetter">The property getter.</param>
            <param name="comparer">The comparer.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.OrderByDescending``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key. 
            </summary>
            <param name="propertyGetter">The property getter.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.OrderByDescending``1(Siriona.Library.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="propertyGetter">The property getter.</param>
            <param name="comparer">The comparer.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ThenBy``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order. 
            </summary>
            <param name="propertyGetter">The property getter.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ThenBy``1(Siriona.Library.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="propertyGetter">The property getter.</param>
            <param name="comparer">The comparer.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ThenByDescending``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order. 
            </summary>
            <param name="propertyGetter">The property getter.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ThenByDescending``1(Siriona.Library.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an ordered enumeration of the specified enumerable using the key as a secondary order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="propertyGetter">The property getter.</param>
            <param name="comparer">The comparer.</param>
            <returns>The ordered list.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Single">
            <summary>
            Gets a single value.
            </summary>
            <returns>The single value.</returns>
            <exception cref="T:System.InvalidOperationException">When the enumerable doesn't contain exactly one element.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Single(System.Predicate{`0})">
            <summary>
            Gets a single value.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The single value.</returns>
            <exception cref="T:System.InvalidOperationException">When the enumerable doesn't contain exactly one element.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SingleOrDefault">
            <summary>
            Gets the single value or default.
            </summary>
            <returns>The single value or the default value when the enumerable is empty.</returns>
            <exception cref="T:System.InvalidOperationException">When the enumerable contains more than one element.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SingleOrDefault(System.Predicate{`0})">
            <summary>
            Gets the single value or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>
            The single value or the default value when the enumerable is empty.
            </returns>
            <exception cref="T:System.InvalidOperationException">When the enumerable contains more than one element.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.First">
            <summary>
            Gets the first value or default.
            </summary>
            <returns>The first value.</returns>
            <exception cref="T:System.InvalidOperationException">When the enumerable is empty.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.First(System.Predicate{`0})">
            <summary>
            Gets the first value or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The first value.</returns>
            <exception cref="T:System.InvalidOperationException">When the enumerable is empty.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.FirstOrDefault">
            <summary>
            Gets the first value or default.
            </summary>
            <returns>The first value or the default value.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.FirstOrDefault(System.Predicate{`0})">
            <summary>
            Gets the first value or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The first value or the default value.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Last">
            <summary>
            Get the last element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Last(System.Predicate{`0})">
            <summary>
            Get the last element.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.LastOrDefault">
            <summary>
            Get the last element or default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.LastOrDefault(System.Predicate{`0})">
            <summary>
            Get the last element or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ElementAt(System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Skip(System.Int32)">
            <summary>
            Skips the specified item count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SkipWhile(System.Predicate{`0})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SkipWhile(Siriona.Library.Func{`0,System.Int32,System.Boolean})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Take(System.Int32)">
            <summary>
            Takes the specified item count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.TakeWhile(System.Predicate{`0})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.TakeWhile(Siriona.Library.Func{`0,System.Int32,System.Boolean})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.ElementAtOrDefault(System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.All(System.Predicate{`0})">
            <summary>
            Tests if all items in source verify the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Any">
            <summary>
            Tests if there is at least one item in source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Contains(`0)">
            <summary>
            Determines whether the source contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the source contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the source contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            	<c>true</c> if the source contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Any(System.Predicate{`0})">
            <summary>
            Tests if any item in source verifies the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SequenceEqual(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compares with specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.SequenceEqual(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Compares with specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Min``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns the minimum of projected values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Max``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns the minimum of projected values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.MinOrDefault``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns the minimum of projected values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.MaxOrDefault``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Returns the minimum of projected values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Sum(Siriona.Library.Func{`0,System.Int32})">
            <summary>
            Sums the specified projection values.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Sum(Siriona.Library.Func{`0,System.Int64})">
            <summary>
            Sums the specified projection values.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Sum(Siriona.Library.Func{`0,System.Double})">
            <summary>
            Sums the specified projection values.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Sum(Siriona.Library.Func{`0,System.Single})">
            <summary>
            Sums the specified projection values.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Sum(Siriona.Library.Func{`0,System.Decimal})">
            <summary>
            Sums the specified projection values.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Aggregate(Siriona.Library.Func{`0,`0,`0})">
            <summary>
            Aggregates the specified func.
            </summary>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Aggregate``1(``0,Siriona.Library.Func{``0,`0,``0})">
            <summary>
            Aggregates the specified func.
            </summary>
            <typeparam name="TAcumulate">The type of the acumulate.</typeparam>
            <param name="seed">The seed.</param>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Aggregate``2(``0,Siriona.Library.Func{``0,`0,``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Aggregates the specified func.
            </summary>
            <typeparam name="TAcumulate">The type of the acumulate.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="seed">The seed.</param>
            <param name="func">The func.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.As``1">
            <summary>
            Cast the instance to an enumerable of the specified type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>An enumerable of the specified type.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Cast``1">
            <summary>
            Cast the instance to an enumerable of the specified type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>An enumerable of the specified type.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.OfType``1">
            <summary>
            Returns items of specified type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>An enumerable containing items of specified type.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
            	<c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.op_Explicit(Siriona.Library.Collections.Enumerable{`0})~System.Collections.Generic.HashSet{`0}">
            <summary>
            Performs an explicit conversion from <see cref="T:Siriona.Library.Collections.Enumerable`1"/> to <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Descending">
            <summary>
            Returns a descending view of the enumerable.
            </summary>
            <returns>The descending enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Enumerable`1.Reverse">
            <summary>
            Reverses the enumeration items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.Enumerable`1.Source">
            <summary>
            Gets the source enumerable.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Grouping`2">
            <summary>
            Represents a grouping of items associated with a given key.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Grouping`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Grouping`2.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Siriona.Library.Collections.Grouping`2.Values">
            <summary>
            Gets the values in the grouping.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.GroupingExtensions.Values``2(Siriona.Library.Collections.Grouping{``0,``1})">
            <summary>
            Gets the values in the grouping.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.GroupingExtensions.Values``2(Siriona.Library.Collections.IGrouping{``0,``1})">
            <summary>
            Gets the values in the grouping.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.GroupingExtensions.Values``2(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.IGrouping{``0,``1}})">
            <summary>
            Gets groupings key values pairs.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="groupings"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.GroupingExtensions.Values``2(Siriona.Library.Collections.Lookup{``0,``1})">
            <summary>
            Gets groupings key values pairs.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="groupings"></param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.IdentityFunction`1">
            <summary>
            Provides an identity function.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.IdentityFunction`1.Instance(`0)">
            <summary>
            Represents the identity function.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.IntervalCollection`2">
            <summary>
            Represents a collection of values defined on intervals.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.IntervalCollection`2.CreateInterval(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Creates the interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStartClosed">if set to <c>true</c> [is start closed].</param>
            <param name="isEndClosed">if set to <c>true</c> [is end closed].</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.IntervalCollection`2.CreatePair(Siriona.Library.Interval{`0},`1)">
            <summary>
            Creates a pair.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.LateDictionary`2">
            <summary>
            Represents a delay-loaded dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.LateDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="availableKeys">The available keys.</param>
            <remarks>
            Only the specified keys are available. Instance of <c>LateDictionary</c> is readonly;
            </remarks>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.LateDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="availableKeys">The available keys.</param>
            <param name="comparer">The comparer.</param>
            <remarks>
            Only the specified keys are available. Instance of <c>LateDictionary</c> is readonly;
            </remarks>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.LateDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="initialValues">The initial values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.LateDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="initialValues">The initial values.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.LateDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.LateDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> is the key has been found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.LateDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <c>TValue</c> with the specified key.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.ReferencedKeys">
            <summary>
            Gets the referenced keys.
            </summary>
            <value>The referenced keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.LoadedKeys">
            <summary>
            Gets the loaded keys.
            </summary>
            <value>The loaded keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.AvailableKeys">
            <summary>
            Gets the available keys.
            </summary>
            <value>The available keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.AvailableValues">
            <summary>
            Gets the available values.
            </summary>
            <value>The available values.</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.ReferencedValueCount">
            <summary>
            Gets the referenced value count.
            </summary>
            <value>The referenced value count.</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.AvailableValueCount">
            <summary>
            Gets the available value count.
            </summary>
            <value>The available value count.</value>
        </member>
        <member name="P:Siriona.Library.Collections.LateDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.ListDeletingEnumerator`1">
            <summary>
            Provides an simple way to enumerate and delete elements from a list.
            </summary>
            <typeparam name="T">The list item type.</typeparam>
            <example>
            List&lt;Item&gt; items = GetItems();
            ListDeletingEnumerator&lt;Item&gt; enumerator = new ListDeletingEnumerator&lt;Item&gt;(items);
            while (enumerator.MoveNext())
            {
            	Item = enumerator.current;
            	if (DeletePredicate(item))
            		enumerator.DeleteCurrent();
            }
            </example>
        </member>
        <member name="M:Siriona.Library.Collections.ListDeletingEnumerator`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ListDeletingEnumerator`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ListDeletingEnumerator`1.DeleteCurrent">
            <summary>
            Deletes the current item.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ListDeletingEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Siriona.Library.Collections.ListDeletingEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Siriona.Library.Collections.ListDeletingEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Siriona.Library.Collections.ListDeletingEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.Lookup`2">
            <summary>
            Represents a lookup between keys and groupings for these keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the values in the grouping.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Lookup`2.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.IGrouping{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Lookup`2"/> class.
            </summary>
            <param name="groupings">The groupings.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Lookup`2.TryGetValues(`0,Siriona.Library.Collections.Enumerable{`1}@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Lookup`2.TryGetValues(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Lookup`2.Contains(`0)">
            <summary>
            Determines whether the lookup table contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the lookup table contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Lookup`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Lookup`2.Count">
            <summary>
            Gets the number of keys.
            </summary>
            <value>The number of keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.Lookup`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.Lookup`2.Item(`0)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified key.
            </summary>
            <value>The values associated with the grouping.</value>
        </member>
        <member name="P:Siriona.Library.Collections.Lookup`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Map">
            <summary>
            Provides a short way to create dictionaries.
            </summary>
            <example>
            Dictionary&lt;string,int&gt; numbers = Map.Create(
            	Map.Pair("one", 1),
            	Map.Pair("two", 2),
            	Map.Pair("three", 3)
             );
            </example>
        </member>
        <member name="M:Siriona.Library.Collections.Map.Create``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Creates a dictionary from an array of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="pairs">The key/value pairs.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Map.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a dictionary from an IEnumerable of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="pairs">The key/value pairs.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Map.Pair``2(``0,``1)">
            <summary>
            Creates key/value pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The pair.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.MappingDictionary`2">
            <summary>
            Represents a bijective mapping between a collection of keys and a collection of values.
            </summary>
            <typeparam name="Key">Type of the keys.</typeparam>
            <typeparam name="Value">Type of the values.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.MappingDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.MappingDictionary`2"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve the value associated with a key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value has been found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Tries to retrieve the key associated with a value.
            </summary>
            <param name="value">The value.</param>
            <param name="key">The key.</param>
            <returns><c>true</c> if the key has been found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Key@Value}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.MappingDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Siriona.Library.Collections.MappingDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.MappingDictionary`2.Item(`1)">
            <summary>
            Gets the key with the specified value.
            </summary>
            <value>The key</value>
        </member>
        <member name="P:Siriona.Library.Collections.MappingDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.MappingDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.MappingDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.MappingDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.NameValueCollection`1">
            <summary>
            Represents a generic name-value association collection.
            </summary>
            <typeparam name="T">The type of items stored in the collection</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor(Siriona.Library.Collections.NameValueCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor(System.Int32,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="equalityComparer">The equality comparer.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor(System.Int32,Siriona.Library.Collections.NameValueCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="collection">The Collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.NameValueCollection`1"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Add(Siriona.Library.Collections.NameValueCollection{`0})">
            <summary>
            Adds the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Add(System.String,`0)">
            <summary>
            Adds the specified name-value pair.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Set(Siriona.Library.Collections.NameValueCollection{`0})">
            <summary>
            Sets the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Set(System.String,`0)">
            <summary>
            Sets the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.GetKey(System.Int32)">
            <summary>
            Gets the key.
            </summary>
            <param name="index">The index.</param>
            <returns>The key name.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.HasKeys">
            <summary>
            Determines whether this instance has keys.
            </summary>
            <returns>
            	<c>true</c> if this instance has keys; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Remove(System.String)">
            <summary>
            Removes the value having the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.AsReadOnly">
            <summary>
            Returns a read only version of the collection.
            </summary>
            <returns>A read-only <see cref="T:Siriona.Library.Collections.ReadOnlyNameValueCollection`1"/> containing the same items as the current collection.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.Contains(System.String)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="name">Name of the key.</param>
            <returns>
            	<c>true</c> if item is found in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.NameValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> for the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.NameValueCollection`1.AllKeys">
            <summary>
            Gets all keys.
            </summary>
            <value>All the keys the collection contains.</value>
        </member>
        <member name="P:Siriona.Library.Collections.NameValueCollection`1.Item(System.String)">
            <summary>
            Gets or sets the item with the specified name.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.NameValueCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.NameValueCollection`1.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@T}}#IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Specialized.NameObjectCollectionBase"></see> instance is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.PeriodValue`1">
            <summary>
            Represents a value defined on a period.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Siriona.Library.IIntervalValuePair`2">
            <summary>
            Represents an interval value pair.
            </summary>
            <typeparam name="TInterval">The type of the interval.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Siriona.Library.IIntervalValuePair`2.Interval">
            <summary>
            Gets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Siriona.Library.IIntervalValuePair`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.#ctor(Siriona.Library.Period,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.PeriodValue`1"/> class.
            </summary>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.#ctor(System.DateTime,System.DateTime,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.PeriodValue`1"/> class.
            </summary>
            <param name="start">The period start.</param>
            <param name="end">The period end.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.op_Inequality(Siriona.Library.Collections.ObjectModel.PeriodValue{`0},Siriona.Library.Collections.ObjectModel.PeriodValue{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="periodValue1">The period value1.</param>
            <param name="periodValue2">The period value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.op_Equality(Siriona.Library.Collections.ObjectModel.PeriodValue{`0},Siriona.Library.Collections.ObjectModel.PeriodValue{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="periodValue1">The period value1.</param>
            <param name="periodValue2">The period value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.Equals(Siriona.Library.Collections.ObjectModel.PeriodValue{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="periodValue">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.PeriodValue`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.PeriodValue`1.Period">
            <summary>
            Gets the period.
            </summary>
            <value>The period.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.PeriodValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.PeriodValue`1.Siriona#Library#IIntervalValuePair{Siriona#Library#Period@TValue}#Interval">
            <summary>
            Gets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.Temporal">
            <summary>
            Represents a collection of date intervals.
            </summary>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporal">
            <summary>
            Indicates that an object has values defined on time intervals.
            </summary>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporal.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporal.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporal.Start">
            <summary>
            Gets the of all intervals.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporal.End">
            <summary>
            Gets the end of all intervals.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporal.Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.#ctor(Siriona.Library.Collections.Enumerable{Siriona.Library.Period})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.#ctor(Siriona.Library.Period)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/> struct.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.From(System.Collections.Generic.IEnumerable{Siriona.Library.Period})">
            <summary>
            Create a new <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/> from specified source.
            </summary>
            <param name="source">The newly created <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.From(Siriona.Library.Collections.ObjectModel.ITemporal)">
            <summary>
            Create a new <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/> from specified source.
            </summary>
            <param name="source">The newly created <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.FromPeriod(Siriona.Library.Period)">
            <summary>
            Creates a new date range from the period.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="F:Siriona.Library.Collections.ObjectModel.Temporal.Empty">
            <summary>
            Gets an empty date range.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Contains(System.DateTime)">
            <summary>
            Determines whether [contains] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the temporal contains the specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if  temporal contains the specified period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Clamp(Siriona.Library.Period)">
            <summary>
            Clamps the date range specified clamp period.
            </summary>
            <param name="clampPeriod">The clamp period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Split(Siriona.Library.Collections.ObjectModel.ITemporal)">
            <summary>
            Splits the specified temporal.
            </summary>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.ToArray">
            <summary>
            Converths the date ranges to an <see cref="T:System.DateTime"/> <see cref="T:Siriona.Library.Interval`1"/> array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Where(System.Predicate{Siriona.Library.Period})">
            <summary>
            Get temporal containing periods passing the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.DefaultIfEmpty(Siriona.Library.Period)">
            <summary>
            Gets a temporal containing the specified period if empty.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Concat(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Concats the specified temporal.
            </summary>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Count">
            <summary>
            Gets the period count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.First">
            <summary>
            Gets the first period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.First(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the first period.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.FirstOrDefault">
            <summary>
            Gets the first period or default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.FirstOrDefault(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the first period or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Last">
            <summary>
            Gets the last period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Last(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the last period.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.LastOrDefault">
            <summary>
            Gets the last period or default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.LastOrDefault(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the last period or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.ElementAt(System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.ElementAtOrDefault(System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Intersect(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Intersects the specified temporal.
            </summary>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.SplitIntersect(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Splits the intersect.
            </summary>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Merge">
            <summary>
            Merges this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Merge(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Merges the specified temporal.
            </summary>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.ToTemporalCollection``1(Siriona.Library.Func{Siriona.Library.Period,``0})">
            <summary>
            Creates a temporal collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="valueSelector">The value selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.ToList">
            <summary>
            Creates a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Enumerate">
            <summary>
            Enumerates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Skip(System.Int32)">
            <summary>
            Skips the specified item count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.SkipWhile(System.Predicate{Siriona.Library.Period})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.SkipWhile(Siriona.Library.Func{Siriona.Library.Period,System.Int32,System.Boolean})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Take(System.Int32)">
            <summary>
            Takes the specified item count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.TakeWhile(System.Predicate{Siriona.Library.Period})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.TakeWhile(Siriona.Library.Func{Siriona.Library.Period,System.Int32,System.Boolean})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Select``1(Siriona.Library.Func{Siriona.Library.Period,``0})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing projections of the elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projection">The projection.</param>
            <returns>The projected enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.Select(Siriona.Library.Func{Siriona.Library.Period,Siriona.Library.Period})">
            <summary>
            Selects the specified projection.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.SelectMany``1(Siriona.Library.Func{Siriona.Library.Period,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing projections of the elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projection">The projection.</param>
            <returns>The projected enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.Temporal.op_Implicit(Siriona.Library.Period)~Siriona.Library.Collections.ObjectModel.Temporal">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Period"/> to <see cref="T:Siriona.Library.Collections.ObjectModel.Temporal"/>.
            </summary>
            <param name="period">The period.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.Temporal.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.Temporal.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.Temporal.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.Temporal.Period">
            <summary>
            Gets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1">
            <summary>
            Represents a value defined on time intervals.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.TemporalValue`1">
            <summary>
            Represents a value defined on time intervals.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporalValue`1">
            <summary>
            Provides a typed interface for temporal values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporalValue">
            <summary>
            Provides an untyped interface for temporal values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalValue.Contains(System.DateTime)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalValue.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalValue.TryGetValue(System.DateTime,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalValue.TryGetValue(Siriona.Library.Period,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporalValue.Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporalValue.Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporal`1">
            <summary>
            Indicates that an object has values defined on time intervals.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporal`1.GetValues(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Gets the values.
            </summary>
            <param name="periods">The periods.</param>
            <returns>The values</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalValue`1.TryGetValue(System.DateTime,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalValue`1.TryGetValue(Siriona.Library.Period,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporalValue`1.Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporalValue`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporalValue`1.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.#ctor(Siriona.Library.Collections.ObjectModel.TemporalCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.TemporalValue`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.TemporalValue`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Contains(System.DateTime)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the temporal value contains a value for the specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the temporal value contains a value for the specified period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.TryGetValue(System.DateTime,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.TryGetValue(Siriona.Library.Period,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Siriona#Library#Collections#ObjectModel#ITemporalValue#TryGetValue(Siriona.Library.Period,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValue`1.GetValues(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Gets the values.
            </summary>
            <param name="periods">The periods.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.InnerValues">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Period">
            <summary>
            Gets the range of dates defined by the temporal object.
            </summary>
            <value>The range.</value>
            <remarks>The temporal values should be defined.
            Call <see cref="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.IsEmpty"/> to know if this property is defined.</remarks>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValue`1.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.#ctor(Siriona.Library.Collections.ObjectModel.TemporalCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.PeriodValue{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.Set(Siriona.Library.Period,`0)">
            <summary>
            Sets the specified interval.
            </summary>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.Reset(Siriona.Library.Period)">
            <summary>
            Resets the specified period.
            </summary>
            <param name="period">The period.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.Update(Siriona.Library.Period,`0,Siriona.Library.Func{`0,`0,`0})">
            <summary>
            Updates the value on specified interval.
            </summary>
            <param name="period">The interval.</param>
            <param name="value">The value.</param>
            <param name="updateCallback">The update callback.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1.AsReadOnly">
            <summary>
            Returns a readonly temporal value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.TemporalUtility">
            <summary>
            Provides helpers to work with temporal values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Split(Siriona.Library.Collections.ObjectModel.ITemporal[])">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Split(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Splits the specified temporal values.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.InternalSplit(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Merge(Siriona.Library.Collections.ObjectModel.ITemporal[])">
            <summary>
            Merges the specified temporal values date ranges.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Merge(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Merges the specified temporal values date ranges.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Clamp(Siriona.Library.Collections.ObjectModel.Temporal,Siriona.Library.Period)">
            <summary>
            Clamps the specified intervals to specifier clamp interval.
            </summary>
            <param name="intervals">The intervals.</param>
            <param name="clampInterval">The clamp interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.InternalClamp(System.Collections.Generic.IEnumerable{Siriona.Library.Period},Siriona.Library.Period)">
            <summary>
            Clamps the specified intervals to specifier clamp interval.
            </summary>
            <param name="intervals">The intervals.</param>
            <param name="clampInterval">The clamp interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.SplitIntersect(Siriona.Library.Collections.ObjectModel.ITemporal[])">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.SplitIntersect(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Splits the specified temporal values.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.InternalSplitIntersect(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Intersect(Siriona.Library.Collections.ObjectModel.ITemporal[])">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.Intersect(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Splits the specified temporal values.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalUtility.InternalIntersect(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.ITemporal})">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporalCollection">
            <summary>
            Provides an untyped interface for temporal collections.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalCollection.Set(Siriona.Library.Period,System.Object)">
            <summary>
            Sets the value for specified period.
            </summary>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalCollection.Reset(Siriona.Library.Period)">
            <summary>
            Resets the specified period.
            </summary>
            <param name="period">The period.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalCollection.IsHole(Siriona.Library.Period)">
            <summary>
            Determines whether the specified period is hole.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the specified period is hole; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalCollection.IsContiguous(Siriona.Library.Period)">
            <summary>
            Determines whether the specified period is contiguous.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the specified period is contiguous; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporalCollection`1">
            <summary>
            Provides a typed interface for temporal collections.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.ITemporalCollection`1.Set(Siriona.Library.Period,`0)">
            <summary>
            Sets the value for specified period.
            </summary>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.ITemporalValueContainer">
            <summary>
            Indicates that an object contains temporal values as properties
            </summary>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.ITemporalValueContainer.TemporalValues">
            <summary>
            Gets the temporal values.
            </summary>
            <value>The temporal values.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.TemporalValueContainer">
            <summary>
            Provides a base class for <see cref="T:Siriona.Library.Collections.ObjectModel.ITemporalValueContainer"/>.
            </summary>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueContainer.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueContainer.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueContainer.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueContainer.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueContainer.Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueContainer.TemporalValues">
            <summary>
            Gets the temporal values.
            </summary>
            <value>The temporal values.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2">
            <summary>
            Represents a temporal value readonly transformation
            </summary>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <typeparam name="TOuter">The type of the outer.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.#ctor(Siriona.Library.Collections.ObjectModel.ITemporalValue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2"/> class.
            </summary>
            <param name="temporalValue">The temporal value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.TransformValue(`0)">
            <summary>
            When overriden, returns the transformed value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.TryGetValue(System.DateTime,`1@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.TryGetValue(Siriona.Library.Period,`1@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Contains(System.DateTime)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Siriona#Library#Collections#ObjectModel#ITemporalValue#TryGetValue(System.DateTime,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Siriona#Library#Collections#ObjectModel#ITemporalValue#TryGetValue(Siriona.Library.Period,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.GetValues(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Gets the value.
            </summary>
            <param name="periods">The periods.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.TemporalValue">
            <summary>
            Gets the temporal value.
            </summary>
            <value>The temporal value.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Siriona#Library#Collections#ObjectModel#ITemporalValue#Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Siriona#Library#Collections#ObjectModel#ITemporalValue#Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Start">
            <summary>
            Gets the of all intervals.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.End">
            <summary>
            Gets the end of all intervals.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalValueTransform`2.Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.WeekPeriod">
            <summary>
            Represents days of week for a specific period.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriod.#ctor(Siriona.Library.Period,Siriona.Library.DaysOfWeek)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.WeekPeriod"/> class.
            </summary>
            <param name="definitionPeriod">The definition period.</param>
            <param name="daysOfWeek">The days of week.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriod.Intersect(Siriona.Library.Period)">
            <summary>
             Intersects the period value with specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>A new week period restricted to specified period.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.DaysOfWeek">
            <summary>
            Gets the days of week.
            </summary>
            <value>The days of week.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.DefinitionPeriod">
            <summary>
            Gets the definition period.
            </summary>
            <value>The definition period.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.Start">
            <summary>
            Gets the of all intervals.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.End">
            <summary>
            Gets the end of all intervals.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriod.Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1">
            <summary>
            Represents a value defined on a specific <see cref="T:Siriona.Library.Collections.ObjectModel.WeekPeriod"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.#ctor(Siriona.Library.Collections.ObjectModel.WeekPeriod,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1"/> class.
            </summary>
            <param name="weekPeriod">The week period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.#ctor(Siriona.Library.Period,Siriona.Library.DaysOfWeek,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1"/> class.
            </summary>
            <param name="period">The period.</param>
            <param name="daysOfWeek">The days of week.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.TryGetValue(System.DateTime,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.TryGetValue(Siriona.Library.Period,`0@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Contains(System.DateTime)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the temporal value contains a value for the specified date.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Intersect(Siriona.Library.Period)">
            <summary>
            Intersects the week period value with specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>A new <see cref="T:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1"/> restricted to specified period.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.GetValues(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Gets the values.
            </summary>
            <param name="periods">The periods.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.WeekPeriod">
            <summary>
            Gets the week period.
            </summary>
            <value>The week period.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Start">
            <summary>
            Gets the of all intervals.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.End">
            <summary>
            Gets the end of all intervals.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.WeekPeriodValue`1.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Partition`1">
            <summary>
            Represents a partition of a collection into two collections.
            </summary>
            <typeparam name="T">The type of values stored in the collections</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Partition`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Partition`1"/> class.
            </summary>
            <param name="included">The included items.</param>
            <param name="excluded">The excluded items.</param>
        </member>
        <member name="P:Siriona.Library.Collections.Partition`1.Included">
            <summary>
            Gets the included items.
            </summary>
            <value>The included items.</value>
        </member>
        <member name="P:Siriona.Library.Collections.Partition`1.Excluded">
            <summary>
            Gets the excluded items.
            </summary>
            <value>The excluded items.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Record`1">
            <summary>
            Provides a base class for record objects.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Record`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Record`1"/> class.
            </summary>
            <param name="item1">The item1.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Record`1.Equals(Siriona.Library.Collections.Record{`0})">
            <summary>
            Equalses the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Record`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Record`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Record`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Record`2">
            <summary>
            Provides a base class for record objects.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Record`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Record`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Record`2.Equals(Siriona.Library.Collections.Record{`0,`1})">
            <summary>
            Equalses the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Record`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Record`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Record`2.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Record`3">
            <summary>
            Provides a base class for record objects.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Record`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Record`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Record`3.Equals(Siriona.Library.Collections.Record{`0,`1,`2})">
            <summary>
            Equalses the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Record`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Record`3.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Record`3.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Record`4">
            <summary>
            Provides a base class for record objects.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Record`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Record`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Record`4.Equals(Siriona.Library.Collections.Record{`0,`1,`2,`3})">
            <summary>
            Equalses the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Record`4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Record`4.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Record`4.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Record`5">
            <summary>
            Provides a base class for record objects.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Record`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Record`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Record`5.Equals(Siriona.Library.Collections.Record{`0,`1,`2,`3,`4})">
            <summary>
            Equalses the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Record`5.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Record`5.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.Record`5.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ObjectModel.TemporalCollection`1">
            <summary>
            Represents a collection of values defined on time periods.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.PeriodValue{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.TemporalCollection`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.TemporalCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Collections.ObjectModel.WeekPeriodValue{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ObjectModel.TemporalCollection`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.CreateInterval(System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Creates the interval.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStartClosed">if set to <c>true</c> [is start closed].</param>
            <param name="isEndClosed">if set to <c>true</c> [is end closed].</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Siriona#Library#Collections#ObjectModel#ITemporalCollection#Set(Siriona.Library.Period,System.Object)">
            <summary>
            Sets the value for specified period.
            </summary>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Siriona#Library#Collections#ObjectModel#ITemporalValue#TryGetValue(System.DateTime,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="date">The date.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Siriona#Library#Collections#ObjectModel#ITemporalValue#TryGetValue(Siriona.Library.Period,System.Object@)">
            <summary>
            Tries to get the value.
            </summary>
            <param name="period">The period.</param>
            <param name="outValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.CreatePair(Siriona.Library.Period,`0)">
            <summary>
            Creates a pair.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.GetValues(Siriona.Library.Collections.ObjectModel.Temporal)">
            <summary>
            Gets the values.
            </summary>
            <param name="periods">The periods.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Siriona#Library#Collections#ObjectModel#ITemporalValue#Item(System.DateTime)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Collections.ObjectModel.TemporalCollection`1.Siriona#Library#Collections#ObjectModel#ITemporalValue#Item(Siriona.Library.Period)">
            <summary>
            Gets the value associated with the specified date.
            </summary>
            <value>The value</value>
        </member>
        <member name="T:Siriona.Library.Collections.TemporaryDictionary`2">
            <summary>
            Represents a dictionary containing temporary values. Values are reloaded after a specified time interval.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.#ctor(Siriona.Library.Collections.TryGetValueDelegate{`0,`1},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.TemporaryDictionary`2"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <c>TValue</c> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.AvailableValueCount">
            <summary>
            Gets the available value count.
            </summary>
            <value>The available value count.</value>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.LoadedKeys">
            <summary>
            Gets the loaded keys.
            </summary>
            <value>The loaded keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.AvailableKeys">
            <summary>
            Gets the available keys.
            </summary>
            <value>The available keys.</value>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.AvailableValues">
            <summary>
            Gets the available values.
            </summary>
            <value>The available values.</value>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.TemporaryDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Siriona.Library.Collections.TryGetValueDelegate`2">
            <summary>
            Represents a function that tries to get a value.
            </summary>
        </member>
        <member name="T:Siriona.Library.Collections.Tuple">
            <summary>
            Provides static constructors for <see cref="T:Siriona.Library.Collections.Tuple"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple.Create``1(``0)">
            <summary>
            Creates a new Tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="item1">The item1.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple.Create``2(``0,``1)">
            <summary>
            Creates a new Tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple.Create``3(``0,``1,``2)">
            <summary>
            Creates a new Tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a new Tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a new Tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Collections.Tuple`1">
            <summary>
            Represents a Tuple
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Tuple`1"/> class.
            </summary>
            <param name="item1">The item1.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.op_Inequality(Siriona.Library.Collections.Tuple{`0},Siriona.Library.Collections.Tuple{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="tuple1">The tuple1.</param>
            <param name="tuple2">The tuple2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.op_Equality(Siriona.Library.Collections.Tuple{`0},Siriona.Library.Collections.Tuple{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="tuple1">The tuple1.</param>
            <param name="tuple2">The tuple2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.Equals(Siriona.Library.Collections.Tuple{`0})">
            <summary>
            Equalses the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`1.DeepEquals``1(``0,``0)">
            <summary>
            Compares objects in depth.
            </summary>
            <typeparam name="T">The type of objects.</typeparam>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns><c>true</c> if both objects are equals; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.Tuple`1.Item1">
            <summary>
            Gets the first item.
            </summary>
            <value>The item1.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Tuple`2">
            <summary>
            Represents a tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Tuple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`2.Equals(Siriona.Library.Collections.Tuple{`0,`1})">
            <summary>
            Equalses the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`2.Equals(System.Object)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`2.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.Tuple`2.Item2">
            <summary>
            Gets the second item.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Tuple`3">
            <summary>
            Represents a tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Tuple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`3.Equals(Siriona.Library.Collections.Tuple{`0,`1,`2})">
            <summary>
            Equalses the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`3.Equals(System.Object)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`3.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.Tuple`3.Item3">
            <summary>
            Gets the second item.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Tuple`4">
            <summary>
            Represents a tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Tuple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`4.Equals(Siriona.Library.Collections.Tuple{`0,`1,`2,`3})">
            <summary>
            Equalses the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`4.Equals(System.Object)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`4.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.Tuple`4.Item4">
            <summary>
            Gets the second item.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="T:Siriona.Library.Collections.Tuple`5">
            <summary>
            Represents a tuple.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.Tuple`2"/> class.
            </summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
            <param name="item5">The item5.</param>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`5.Equals(Siriona.Library.Collections.Tuple{`0,`1,`2,`3,`4})">
            <summary>
            Equalses the specified tuple.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`5.Equals(System.Object)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Collections.Tuple`5.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Collections.Tuple`5.Item5">
            <summary>
            Gets the second item.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="T:Siriona.Library.Collections.ValueSet`1">
            <summary>
            Represents an immutable set of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ValueSet`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Collections.ValueSet`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in array at which copying begins. </param><exception cref="T:System.ArgumentNullException">array is null. </exception><exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception><exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from index to the end of the destination array. </exception><exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.Equals(Siriona.Library.Collections.ValueSet{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.Contains(`0)">
            <summary>
            Determines whether the list contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the list contains  the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.op_Equality(Siriona.Library.Collections.ValueSet{`0},Siriona.Library.Collections.ValueSet{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Collections.ValueSet`1.op_Inequality(Siriona.Library.Collections.ValueSet{`0},Siriona.Library.Collections.ValueSet{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Siriona.Library.Collections.ValueSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Collections.ValueSet`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Collections.ValueSet`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Configuration.AjaxScriptManagerInfo.GetCurrent(System.Web.UI.Page)">
            <summary>
            Gets the current.
            </summary>
            <param name="page">The page.</param>
            <returns>The script manager for the specified page.</returns>
        </member>
        <member name="P:Siriona.Library.Configuration.AjaxScriptManagerInfo.IsInAsyncPostBack">
            <summary>
            Gets a value indicating whether this instance is in async post back.
            </summary>
            <value>
            	<c>true</c> if this instance is in async post back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Configuration.ApplicationInfo">
            <summary>
            Provides information about the current application.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.ApplicationInfo.Configure(System.String,System.String)">
            <summary>
            Configures the current application.
            </summary>
            <param name="newProductName">The name of the product.</param>
            <param name="newApplicationName">The name of the application.</param>
        </member>
        <member name="M:Siriona.Library.Configuration.ApplicationInfo.Configure(System.String,System.String,System.Version)">
            <summary>
            Configures the current application.
            </summary>
            <param name="newProductName">The name of the product.</param>
            <param name="newProjectName">The name of the project.</param>
            <param name="newVersion">The application version.</param>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationInfo.ProductName">
            <summary>
            Gets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationInfo.ProjectName">
            <summary>
            Gets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationInfo.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationInfo.RootAssembly">
            <summary>
            Gets the root assembly.
            </summary>
            <value>The root assembly.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationInfo.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.ApplicationSection">
            <summary>
            Represents a configuration section for <see cref="N:Siriona.Library.Diagnostics"/> components.
            </summary>
            <remarks>
            <para>
            Configuration of components of the <see cref="N:Siriona.Library.Diagnostics"/> namespace is stored in the <c>siriona.library/errorReport</c> section of the configuration file.
            <code>
            &lt;configSections&gt;
              &lt;sectionGroup name="siriona.library"&gt;
                &lt;section
                  name="application"
                  type="Siriona.Library.Configuration.ApplicationSection, Siriona.Library"
                /&gt;
              &lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            </code>
            This section enables specifying information about the application :
            <code>
            &lt;siriona.library&gt;
              &lt;application
                product = "..."
                project = "..."
              /&gt;
            &lt;/siriona.library&gt;
            </code>
            Settings :
            <list type="bullet">
            <item>
                <term>product</term>
                <description>
                    The product name. This value can be retrieved and set at runtime through
                    <see cref="P:Siriona.Library.Configuration.ApplicationInfo.ProductName"/>.
                </description>
            </item>
            <item>
                <term>project</term>
                <description>
                    The project name. This value can be retrieved and set at runtime through
                    <see cref="P:Siriona.Library.Configuration.ApplicationInfo.ProjectName"/>. 
                    If not set, the value is the same as <see cref="P:Siriona.Library.Configuration.ApplicationInfo.ProductName"/>.
                </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Siriona.Library.Configuration.ConfigurationSectionBase`1">
            <summary>
            Provides static Current property for inherited configuration sections.
            </summary>
            <typeparam name="T">The type of the implemented configuration section.</typeparam>
            <remarks>
            if the group name is not specified in the SectionName attribute,
            the default group "siriona.library" is used.
            Set the RestartOnExternalChanges property to false to prevent an application restart 
            when configuration settings in the external include file are modified for this ConfigurationSection object.
            </remarks>
            <example>
            To implement a configuration section, just inherite from <see cref="T:Siriona.Library.Configuration.ConfigurationSectionBase`1"/> :
            <code>
            [SectionName("sampleSection")]
            public class SampleSection : ConfigurationSectionBase&lt;SampleSection&gt;
            {
            	[ConfigurationProperty("text")]
            	public string Text
            	{
            		get { return (string)this["text"]; }
            	}
            }
            </code>
            
            You can the use the configuration section from your code :
            <code>
            	string text = SampleSection.Current.Text;
            </code>
            </example>
        </member>
        <member name="P:Siriona.Library.Configuration.ConfigurationSectionBase`1.CurrentOrDefault">
            <summary>
            returns the object corresponding to the xml section in the .config file or an object containing the defaults
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.ConfigurationSectionBase`1.Current">
            <summary>
            Gets the current instance of the section in the configuration file.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationSection.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationSection.ProjectName">
            <summary>
            Gets or sets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ApplicationSection.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.CommandLine">
            <summary>
            Represents a command-line.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Contains(System.String)">
            <summary>
            Determines whether the command-line contains an argument having the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the command-line contains the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value of a parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if command line contains the specified parameter, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.GetValue(System.String)">
            <summary>
            Gets the value of a specified argument.
            </summary>
            <param name="name">The argument name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Parse">
            <summary>
            Parses the command-line using the <see cref="F:Siriona.Library.Configuration.CommandLineStyle.Windows"/> case-insensitive scheme.
            </summary>
            <returns>The command-line.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Parse(Siriona.Library.Configuration.CommandLineStyle)">
            <summary>
            Parses the command-line using the specified style, case-insensitive scheme.
            </summary>
            <param name="style">The style.</param>
            <returns>The command-line.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Parse(Siriona.Library.Configuration.CommandLineStyle,System.Boolean)">
            <summary>
            Parses the command-line using the specified style and case-sensitivity scheme.
            </summary>
            <param name="style">The style.</param>
            <param name="caseInsensitive">if set to <c>true</c>, parsing is case insensitive.</param>
            <returns>The command-line.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Parse(System.String,System.String)">
            <summary>
            Parses the command-line using the specified argument prefix and separator, using a case-insensitive scheme.
            </summary>
            <param name="argumentPrefix">The argument prefix.</param>
            <param name="nameValueSeparator">The name/value separator.</param>
            <returns>The command-line.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the command-line using the specified argument prefix, separator and case-sensitivity.
            </summary>
            <param name="argumentPrefix">The argument prefix.</param>
            <param name="nameValueSeparator">The name/value separator.</param>
            <param name="caseInsensitive">if set to <c>true</c>, parsing is case insensitive.</param>
            <returns>The command-line.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLine.Parse(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Parses the specified arguments using the specified argument prefix, separator and case-sensitivity.
            </summary>
            <param name="argumentPrefix">The argument prefix.</param>
            <param name="nameValueSeparator">The name/value separator.</param>
            <param name="caseInsensitive">if set to <c>true</c>, parsing is case insensitive.</param>
            <param name="commandLineArgs">The command line arguments.</param>
            <returns>The command-line.</returns>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLine.Item(System.String)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Configuration.CommandLineArgument"/> with the specified name.
            </summary>
            <value>The command-line argument.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLine.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLine.UnnamedArguments">
            <summary>
            Gets the unnamed arguments.
            </summary>
            <value>The unnamed arguments.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.CommandLineArgument">
            <summary>
            Represents a command-line argument.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLineArgument.Equals(Siriona.Library.Configuration.CommandLineArgument)">
            <summary>
            Equalses the specified command line argument.
            </summary>
            <param name="commandLineArgument">The command line argument.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLineArgument.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.CommandLineArgument.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLineArgument.HasName">
            <summary>
            Gets a value indicating whether this instance has name.
            </summary>
            <value><c>true</c> if this instance has name; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLineArgument.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLineArgument.Index">
            <summary>
            Gets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLineArgument.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.CommandLineArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.CommandLineStyle">
            <summary>
            Represents a standard command-line style.
            </summary>
        </member>
        <member name="F:Siriona.Library.Configuration.CommandLineStyle.Windows">
            <summary>
            Arguments are prefixed with "/" and name/value pairs are separated by ":".
            </summary>
        </member>
        <member name="F:Siriona.Library.Configuration.CommandLineStyle.Unix">
            <summary>
            Arguments are prefixed with "-" and name/value pairs are separated by spaces
            </summary>
        </member>
        <member name="F:Siriona.Library.Configuration.CommandLineStyle.UnixLong">
            <summary>
            Arguments are prefixed with "--" and name/value pairs are separated by spaces
            </summary>
        </member>
        <member name="T:Siriona.Library.Configuration.ConfigurationUtility">
            <summary>
            Provides helper methods for handling configuration files.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.ConfigurationUtility.GetSectionName(System.String,System.String)">
            <summary>
            Gets the full name of the section.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="sectionName">Name of the section.</param>
            <returns>The full name of the section</returns>
        </member>
        <member name="T:Siriona.Library.Configuration.ConnectionElement">
            <summary>
            Represents a data access connection configuration element.
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElement.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElement.DataAccessProvider">
            <summary>
            Gets the data access provider.
            </summary>
            <value>The data access provider.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElement.UseStoredProcedures">
            <summary>
            Gets a value indicating whether the connection uses stored procedures.
            </summary>
            <value><c>true</c> if the connection uses stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElement.SkipTransactions">
            <summary>
            Gets a value indicating whether the connection uses stored procedures.
            </summary>
            <value><c>true</c> if the connection uses stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElement.LogFilePath">
            <summary>
            Gets the log file path.
            </summary>
            <value>The log file path.</value>
            <remarks>Is omitted, no log file is created. Log file path accepts the same format string as <see cref="T:Siriona.Library.IO.LogFile"/>.</remarks>
        </member>
        <member name="T:Siriona.Library.Configuration.ConnectionElementCollection">
            <summary>
            Represents a collection of <see cref="T:Siriona.Library.Configuration.ConnectionElement"/> items.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.ConnectionElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ConnectionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ConnectionElementCollection.Contains(Siriona.Library.Configuration.ConnectionElement)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ConnectionElementCollection.Remove(Siriona.Library.Configuration.ConnectionElement)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Configuration.ConnectionElementCollection.System#Collections#Generic#IEnumerable{Siriona#Library#Configuration#ConnectionElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Configuration.ConnectionElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Configuration.ConnectionElement"/> with the specified name.
            </summary>
            <value>The item, if available, otherwise <c>null</c>.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.DataSettingsSection">
            <summary>
            Represents the configuration section for data access
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.DataSettingsSection.DefaultDataAccessProvider">
            <summary>
            Gets the default data access provider.
            </summary>
            <value>The default data access provider.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.DataSettingsSection.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.ErrorReportSection">
            <summary>
            Represents a configuration section for <see cref="N:Siriona.Library.Diagnostics"/> components.
            </summary>
            <remarks>
            <para>
            Configuration of components of the <see cref="N:Siriona.Library.Diagnostics"/> namespace is stored in the <c>siriona.library/errorReport</c> section of the configuration file.
            <code>
            &lt;configSections&gt;
              &lt;sectionGroup name="siriona.library"&gt;
                &lt;section
                  name="errorReport"
                  type="Siriona.Library.Configuration.ErrorReportSection, Siriona.Library"
                /&gt;
              &lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            </code>
            This section enables specifying custom error writers :
            <code>
            &lt;siriona.library&gt;
              &lt;errorReport
                filter = "type, assembly"
                converterRulesFilePath = "filepath"
                soapErrorNamespace = "..." 
                rethrowFailures = "true|false" &gt;
                &lt;writers&gt;
                  &lt;clear /&gt;
                  &lt;remove name="..." /&gt;
                  &lt;add name="..." type="type, assembly"&gt;
                    &lt;settings&gt;
                      &lt;add name="..." value="..." /&gt;
                    &lt;/settings&gt;
                  &lt;/add&gt;
                &lt;/writers&gt;
                &lt;fallbackWriter type="type, assembly" &gt;
                  &lt;settings&gt;
                    &lt;add name="..." value="..." /&gt;
                  &lt;/settings&gt;
                &lt;/fallbackWriter&gt;
                &lt;failureWriter type="type, assembly" &gt;
                  &lt;settings&gt;
                    &lt;add name="..." value="..." /&gt;
                  &lt;/settings&gt;
                &lt;/failureWriter&gt;
              &lt;/errorReport&gt;
            &lt;/siriona.library&gt;
            </code>
            Settings :
            <list type="bullet">
            <item>
                <term>filter</term>
                <description>
                    The type and assembly of the <see cref="T:Siriona.Library.Diagnostics.IExceptionFilter"/> component used to filter reported
                    exceptions.
                    If not set, all exception are reported, excepted <see cref="T:System.Threading.ThreadAbortException"/>.
                </description>
            </item>
            <item>
                <term>converterRulesFilePath</term>
                <description>
                    The path of the exception convertion rules file.
                    If not set, exceptions are not converted and reported as is.
                </description>
            </item>
            <item>
                <term>rethrowFailures</term>
                <description>
                    Indicates whether to rethrow failures that occurred while reporting an error.
                    If not set, failures are not rethrown.
                </description>
            </item>
            <item>
                <term>soapErrorNamespace</term>
                <description>
                    The namespace used to serialize <see cref="T:System.Exception"/> to SOAP errors in a Web Service.
                    If not set, the <see cref="N:Siriona.Library.Diagnostics"/> namespace is used.
                </description>
            </item>
            <item>
                <term>writers</term>
                <description>
                    The <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> components used to report errors.
                    The configuration file contains specific configuration for each error writer. 
                    Refer to specific documentation for additional information.
                </description>
            </item>
            <item>
                <term>fallbackWriter</term>    
                <description>
                    The <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> component used to fallback when error reporting fails.
                    The configuration file contains specific configuration for the error writer. 
                    Refer to specific documentation for additional information.
                </description>
            </item>
            <item>
                <term>failureWriter</term>    
                <description>
                    The <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> component used to report failures during the error reporting process.
                    The configuration file contains specific configuration for the error writer. 
                    Refer to specific documentation for additional information.
                </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.ProjectName">
            <summary>
            Gets or sets the name of the project.
            </summary>
            <value>The name of the project.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.ConverterRulesFilePath">
            <summary>
            Gets the converter rules file path.
            </summary>
            <value>The converter rules file path.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.AreFailuresRethrown">
            <summary>
            Gets or sets a value indicating whether failures are rethrown.
            </summary>
            <value><c>true</c> if failures are rethrown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.IsFallbackEnabled">
            <summary>
            Gets or sets a value indicating whether error reporting fallback is enabled.
            </summary>
            <value>
            	<c>true</c> if fallback is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.SoapErrorNamespace">
            <summary>
            Gets or sets the SOAP error namespace.
            </summary>
            <value>The SOAP error namespace.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.FallbackWriter">
            <summary>
            Gets the fallback error writer.
            </summary>
            <value>The fallback error writer configuration.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.FailureWriter">
            <summary>
            Gets the errors writers.
            </summary>
            <value>The errors writers configuration.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorReportSection.Writers">
            <summary>
            Gets the error writers.
            </summary>
            <value>The error writers configuration.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.ErrorWriterElement">
            <summary>
            Represents an error writer configuration.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Configuration.ErrorWriterElement"/> class.
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterElement.Name">
            <summary>
            Gets or sets the name of the writer.
            </summary>
            <value>The friendly name of the writer.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterElement.Type">
            <summary>
            Gets or sets the type of the writer.
            </summary>
            <value>A <c>string</c> value representing the type of the writer.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterElement.Settings">
            <summary>
            Gets the custom settings for the writer.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.ErrorWriterElementCollection">
            <summary>
            Represents a collection of <see cref="T:Siriona.Library.Configuration.ErrorWriterElement"/> items.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterElementCollection.Contains(Siriona.Library.Configuration.ErrorWriterElement)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterElementCollection.Remove(Siriona.Library.Configuration.ErrorWriterElement)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterElementCollection.System#Collections#Generic#IEnumerable{Siriona#Library#Configuration#ErrorWriterElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Configuration.ErrorWriterElement"/> at the specified index.
            </summary>
            <value>The requested element, if available; otherwise, <c>null</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Configuration.ErrorWriterElement"/> with the specified name.
            </summary>
            <value>The requested element, if available; otherwise, <c>null</c>.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.ErrorWriterSettingsElement">
            <summary>
            Represents the name / value pair of a custom error writer configuration.
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterSettingsElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterSettingsElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection">
            <summary>
            Represents a collection of <see cref="T:Siriona.Library.Configuration.ErrorWriterSettingsElement"/> items.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.Contains(Siriona.Library.Configuration.ErrorWriterSettingsElement)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.Remove(Siriona.Library.Configuration.ErrorWriterSettingsElement)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.System#Collections#Generic#IEnumerable{Siriona#Library#Configuration#ErrorWriterSettingsElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Configuration.ErrorWriterSettingsElement"/> at the specified index.
            </summary>
            <value>The requested item, if available; otherwise <c>null</c>.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.ErrorWriterSettingsElementCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Configuration.ErrorWriterSettingsElement"/> with the specified name.
            </summary>
            <value>The requested item, if available; otherwise <c>null</c>.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.Extensibility.PluginAttribute">
            <summary>
            Represents an attribute that identifies a publicly visible
            </summary>
            <remarks>
            Plugins based on the same type must have different friendly names.
            </remarks>
        </member>
        <member name="P:Siriona.Library.Configuration.Extensibility.PluginAttribute.Name">
            <summary>
            Gets the friendly name of the plugin.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.Extensibility.PluginAttribute.BaseType">
            <summary>
            Gets or sets the base type of the plugin.
            </summary>
            <value>The base type of the plugin, if ambiguous; otherwise, <c>null</c>.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.Extensibility.Plugins`1">
            <summary>
            Represents a repository for plugins based on a given type.
            </summary>
            <typeparam name="T">The base types of plugins.</typeparam>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.OnPluginLoadingError(Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs)">
            <summary>
            Raises the <see cref="E:Siriona.Library.Configuration.Extensibility.Plugins`1.PluginLoadingError"/> event.
            </summary>
            <param name="e">The <see cref="T:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPlugins(System.String)">
            <summary>
            Gets the plugins.
            </summary>
            <param name="pluginsPath">The path of the directory or file where plugins are located.</param>
            <returns>A collection of plugins</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPluginNames">
            <summary>
            Gets the plugin names.
            </summary>
            <returns>The name of each installed plugin.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPluginTypes">
            <summary>
            Gets the plugin types.
            </summary>
            <returns>The plugin types</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPluginType(System.String)">
            <summary>
            Gets the type of a the plugin having the given name.
            </summary>
            <param name="pluginName">Name of the plugin.</param>
            <returns>The type of the plugin, if existing; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPluginInstances">
            <summary>
            Gets the plugin instances.
            </summary>
            <returns>The instances of the plugin.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPluginInstances(Siriona.Library.Func{System.Type,System.Object[]})">
            <summary>
            Gets the plugin instances.
            </summary>
            <returns>The instances of the plugin.</returns>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.Plugins`1.GetPluginInstance(System.String)">
            <summary>
            Gets an instance of the plugin having the given name.
            </summary>
            <param name="pluginName">Name of the plugin.</param>
            <returns>An instance of the plugin, if existing; otherwise, <c>null</c>.</returns>
        </member>
        <member name="E:Siriona.Library.Configuration.Extensibility.Plugins`1.PluginLoadingError">
            <summary>
            Occurs on a loading error.
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.Extensibility.Plugins`1.PluginsPath">
            <summary>
            Gets the path of the file or directory where plugins are stored.
            </summary>
            <value>The plugins path.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventHandler">
            <summary>
            Represents a methods to handle the <see cref="E:Siriona.Library.Configuration.Extensibility.Plugins`1.PluginLoadingError"/> event.
            </summary>
        </member>
        <member name="T:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs">
            <summary>
            Represents the argument for the <see cref="E:Siriona.Library.Configuration.Extensibility.Plugins`1.PluginLoadingError"/> event.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs.Path">
            <summary>
            Gets the plugin path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.Extensibility.PluginLoadingErrorEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.MailTemplateSection">
            <summary>
            Represents a setting section in the config file for the MailTemplate module.
            </summary>
        </member>
        <member name="P:Siriona.Library.Configuration.MailTemplateSection.Path">
            <summary>
            Gets the path of the mail template directory.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.PlatformInfo">
            <summary>
            Provides additional information about the platform.
            </summary>
        </member>
        <member name="F:Siriona.Library.Configuration.PlatformInfo.Bitness">
            <summary>
            Gets the bitness of the plaform.
            </summary>
            <value>The bitness, in bits (usually 32 or 64).</value>
        </member>
        <member name="T:Siriona.Library.Configuration.SectionNameAttribute">
            <summary>
            Specify the section name of a <see cref="T:Siriona.Library.Configuration.ConfigurationSectionBase`1"/> in the configuration file.
            </summary>
        </member>
        <member name="M:Siriona.Library.Configuration.SectionNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Configuration.SectionNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:Siriona.Library.Configuration.SectionNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Configuration.SectionNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Siriona.Library.Configuration.SectionNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Configuration.SectionNameAttribute.GroupName">
            <summary>
            Gets the name of the group.
            </summary>
            <value>The name of the group.</value>
        </member>
        <member name="T:Siriona.Library.Configuration.TimeZoneConfigurationSection">
            <summary>
            Represents the timezone data provider configuration section.
            </summary>
            <remarks>
            <para>
            Configuration of timezone components is stored in the <c>siriona.library/timeZone</c> section of the configuration file.
            <code>
            &lt;configSections&gt;
              &lt;sectionGroup name="siriona.library"&gt;
                &lt;section
                  name="timeZone"
                  type="Siriona.Library.Configuration.TimeZoneConfigurationSection, Siriona.Library"
                /&gt;
              &lt;/sectionGroup&gt;
            &lt;/configSections&gt;
            </code>
            </para>
            <para>
            Section usage is as follow:
            <code>
            &lt;siriona.library&gt;
              &lt;timeZone storagePath = "..." /&gt;
            </code>
            Settings :
            <list type="bullet">
            <item>
                <term>storagePath</term>
                <description>
                    Required. The path of the directory containing the zones and rules definition.
                    If the section does not exist, default definition are used.
                </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Siriona.Library.Configuration.TimeZoneConfigurationSection.StoragePath">
            <summary>
            Gets or sets the storage path.
            </summary>
            <value>The storage path.</value>
        </member>
        <member name="T:Siriona.Library.Data.AggregateReader">
            <summary>
            Provides access to data to build an aggregate.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Data.IDataRecord}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.AggregateReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.Lookup``2(Siriona.Library.Data.IDataBuilder{``0},Siriona.Library.Data.IDataBuilder{``1})">
            <summary>
            Creates a lookup.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keyBuilder">The key builder.</param>
            <param name="valueBuilder">The value builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.Lookup``2(Siriona.Library.Data.IDataBuilder{``0},Siriona.Library.Func{System.Data.IDataRecord,``1})">
            <summary>
            Creates a lookup.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="keyBuilder">The key builder.</param>
            <param name="valueBuilder">The value builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.Skip">
            <summary>
            Skips the next dataset.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.ReadWith``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads the data with specified builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.ReadWith``2(Siriona.Library.Data.IDataBuilder{``0,``1},``1)">
            <summary>
            Reads the data with specified builder.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="builder">The builder.</param>
            <param name="context">The context.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.ReadWith``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Reads the data with specified builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:Siriona.Library.Data.AggregateReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siriona.Library.Data.CommandTemplate">
            <summary>
            Represents a template command object derived from method information.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplate.#ctor(System.Data.Common.DbCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.CommandTemplate"/> class.
            </summary>
            <param name="templateCommand">The template command.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplate.Instantiate(Siriona.Library.Data.Connection,System.Object[])">
            <summary>
            Creates the templateCommand.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="values">The parameter values.</param>
            <returns>The newly instantiated <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplate.SetParametersValue(Siriona.Library.Data.DataAccessProvider,System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Sets the parameters value.
            </summary>
            <param name="dataAccessProvider">The data access provider.</param>
            <param name="command">The templateCommand.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Siriona.Library.Data.CommandTemplateBuilder">
            <summary>
            Provides methods to buid a <see cref="T:Siriona.Library.Data.CommandTemplate"/> object.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.Create(Siriona.Library.Data.ConnectionSettings,Siriona.Library.Data.DataMethodInfo)">
            <summary>
            Creates a <see cref="T:Siriona.Library.Data.CommandTemplate"/> object using specified method info.
            </summary>
            <param name="connectionSettings">The connection settings.</param>
            <param name="methodInfo">The method info.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Data.CommandTemplate"/> object.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.PrepareParameters(Siriona.Library.Data.DataAccessProvider,System.Data.Common.DbCommand,Siriona.Library.Data.DataMethodInfo)">
            <summary>
            Prepares the parameters.
            </summary>
            <param name="dataAccessProvider">The data access provider.</param>
            <param name="command">The command.</param>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.PrepareParameter(Siriona.Library.Data.DataAccessProvider,System.Data.Common.DbCommand,Siriona.Library.Data.DataParameterInfo)">
            <summary>
            Prepares a parameter.
            </summary>
            <param name="dataAccessProvider">The data access provider.</param>
            <param name="command">The command.</param>
            <param name="parameterInfo">The parameter info.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.SetParameterType(Siriona.Library.Data.DataParameterAttribute,Siriona.Library.Data.DataParameterInfo)">
            <summary>
            Sets the type of the parameter.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="parameterInfo">The parameter info.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.SetParameterDirection(Siriona.Library.Data.DataParameterAttribute,Siriona.Library.Data.DataParameterInfo)">
            <summary>
            Sets the parameter direction using parameter information.
            </summary>
            <param name="attribute">The parameter attribute.</param>
            <param name="parameterInfo">The parameter info.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.PrepareReturnParameter(Siriona.Library.Data.DataAccessProvider,System.Data.Common.DbCommand,Siriona.Library.Data.DataMethodInfo)">
            <summary>
            Prepares the return parameter.
            </summary>
            <param name="dataAccessProvider">The data access provider.</param>
            <param name="command">The templateCommand.</param>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.SetReturnParameterDirection(Siriona.Library.Data.DataMethodInfo,Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Sets the return parameter direction.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="attribute">The return attribute.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.SetReturnParameterType(Siriona.Library.Data.DataMethodInfo,Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Sets the type of the return parameter.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="attribute">The return attribute.</param>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateBuilder.GetParameterAttribute(Siriona.Library.Data.DataParameterInfo)">
            <summary>
            Gets the parameter attribute or creates a new attribute with default values..
            </summary>
            <param name="parameterInfo">The parameter info.</param>
            <returns>A <see cref="T:Siriona.Library.Data.DataParameterAttribute"/> containing the parameter information</returns>
        </member>
        <member name="T:Siriona.Library.Data.CommandTemplateCache">
            <summary>
            Provides a cache for <see cref="T:Siriona.Library.Data.CommandTemplate"/> object.
            </summary>
            <remarks>
            This class avoid to create a CommandTemplate object each time it
            should be used.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Data.CommandTemplateCache.GetCommandTemplate(Siriona.Library.Data.Connection,Siriona.Library.Data.DataMethodInfo)">
            <summary>
            Gets a command template from its method information.
            </summary>
            <param name="connection">The connection.</param>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.Connection">
            <summary>
            Represents a connection to a database.
            </summary>
            <remarks>
            This connection schema enables the call of other commands even when stuck
            in a data reader. Internal connection nesting is used to do so.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Data.Connection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.Connection"/> class.
            </summary>
            <param name="connectionName">The connection name.</param>
        </member>
        <member name="M:Siriona.Library.Data.Connection.#ctor(Siriona.Library.Data.ConnectionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.Connection"/> class.
            </summary>
            <param name="connectionSettings">The connection settings.</param>
        </member>
        <member name="M:Siriona.Library.Data.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.BeginReader">
            <summary>
            Called when a reader call is begining on this connection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.EndReader">
            <summary>
            Called when a reader call is ending on this connection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.EnsureUsableConnection">
            <summary>
            Ensures that a internal connection is available even when stuck in a reader.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.RollbackTransaction">
            <summary>
            Rollbacks the current transcation.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Connection.CommitTransaction">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.Connection.DbConnection">
            <summary>
            Gets the base <see cref="P:Siriona.Library.Data.Connection.DbConnection"/> object.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.Connection.Transaction">
            <summary>
            Gets the current transaction or null.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.ConnectionSettings">
            <summary>
            Provides the configuration info about a database connection.
            </summary>
            <remarks>
            This class is not intended to be instantiated in code. 
            </remarks>
        </member>
        <member name="M:Siriona.Library.Data.ConnectionSettings.#ctor(System.String,System.String,Siriona.Library.Data.DataAccessProvider,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.ConnectionSettings"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="connectionString">The connection string.</param>
            <param name="dataAccessProvider">The data access provider.</param>
            <param name="useStoredProcedures">if set to <c>true</c> use stored procedures.</param>
            <param name="skipTransactions">if set to <c>true</c> [skip transactions].</param>
            <param name="logFilePath">The log file path.</param>
        </member>
        <member name="M:Siriona.Library.Data.ConnectionSettings.FromName(System.String)">
            <summary>
            Gets the connection settings by name from the configuration file.
            </summary>
            <param name="connectionName">Name of the connection settings.</param>
            <returns>The <see cref="T:Siriona.Library.Data.ConnectionSettings"/> object.</returns>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.Name">
            <summary>
            Gets the connection settings name.
            </summary>
            <value>The connection settings name.</value>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.DataAccessProvider">
            <summary>
            Gets the data access provider.
            </summary>
            <value>The data access provider.</value>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.IsLogFileEnabled">
            <summary>
            Gets a value indicating whether this instance is log file enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is log file enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.LogFilePath">
            <summary>
            Gets the log file path.
            </summary>
            <value>The log file path.</value>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.UseStoredProcedures">
            <summary>
            Gets a value indicating whether the connection uses stored procedures.
            </summary>
            <value><c>true</c> if the connection uses stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.ConnectionSettings.SkipTransactions">
            <summary>
            Gets a value indicating whether the connection should skip transactions.
            </summary>
            <value><c>true</c> if the connection should skip transactions; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Data.ConnectionSettingsManager">
            <summary>
            Manages the access to the connection settings in the configuration file.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.ConnectionSettingsManager.GetSettings(System.String)">
            <summary>
            Gets the settings by name.
            </summary>
            <param name="name">The connection settings name.</param>
            <returns>The <see cref="T:Siriona.Library.Data.ConnectionSettings"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.ConnectionSettingsManager.CreateSettingsObject(System.String)">
            <summary>
            Creates the connection settings object.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.Prepare">
            <summary>
            Creates a prepared (or compiled) version of the command on the data source.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.Cancel">
            <summary>
            Attempts to cancels the execution of a <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.CreateDbParameter">
            <summary>
            Creates a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object.
            </summary>
            <returns>
            A <see cref="T:System.Data.Common.DbParameter"/> object.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Executes the command text against the connection.
            </summary>
            <returns>
            A <see cref="T:System.Data.Common.DbDataReader"/>.
            </returns>
            <param name="behavior">An instance of <see cref="T:System.Data.CommandBehavior"/>.</param>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <returns>
            The number of rows affected.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.ExecuteScalar">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <returns>
            The first column of the first row in the result set.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeCommand.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
            <returns>
            The text command to execute. The default value is an empty string ("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <returns>
            The time in seconds to wait for the command to execute.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.CommandType">
            <summary>
            Indicates or specifies how the <see cref="P:System.Data.Common.DbCommand.CommandText"/> property is interpreted.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.CommandType"/> values. The default is Text.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow"/> when used by the Update method of a <see cref="T:System.Data.Common.DbDataAdapter"/>.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.UpdateRowSource"/> values. The default is Both unless the command is automatically generated. Then the default is None.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.DbConnection">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbConnection"/> used by this <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <returns>
            The connection to the data source.
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.DbParameterCollection">
            <summary>
            Gets the collection of <see cref="T:System.Data.Common.DbParameter"/> objects.
            </summary>
            <returns>
            The parameters of the SQL statement or stored procedure.
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.DbTransaction">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbTransaction"/> within which this <see cref="T:System.Data.Common.DbCommand"/> object executes.
            </summary>
            <returns>
            The transaction within which a Command object of a .NET Framework data provider executes. The default value is a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeCommand.DesignTimeVisible">
            <summary>
            Hidden property used by the designers.
            </summary>
            <returns>
            This property is not intended to be used in your code. It is used internally to support the designers.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a database transaction.
            </summary>
            <returns>
            An object representing the new transaction.
            </returns>
            <param name="isolationLevel">Specifies the isolation level for the transaction.</param>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeConnection.Close">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
            <exception cref="T:System.Data.Common.DbException">The connection-level error that occurred while opening the connection. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open connection.
            </summary>
            <param name="databaseName">Specifies the name of the database for the connection to use.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeConnection.Open">
            <summary>
            Opens a database connection with the settings specified by the <see cref="P:System.Data.Common.DbConnection.ConnectionString"/>.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeConnection.CreateDbCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/> object associated with the current connection.
            </summary>
            <returns>
            A <see cref="T:System.Data.Common.DbCommand"/> object.
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open the connection.
            </summary>
            <returns>
            The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeConnection.Database">
            <summary>
            Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.
            </summary>
            <returns>
            The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeConnection.State">
            <summary>
            Gets a string that describes the state of the connection.
            </summary>
            <returns>
            The state of the connection. The format of the string returned depends on the specific type of connection you are using.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeConnection.DataSource">
            <summary>
            Gets the name of the database server to which to connect.
            </summary>
            <returns>
            The name of the database server to which to connect. The default value is an empty string.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeConnection.ServerVersion">
            <summary>
            Gets a string that represents the version of the server to which the object is connected.
            </summary>
            <returns>
            The version of the database. The format of the string returned depends on the specific type of connection you are using.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siriona.Library.Data.CubeDataAccessProvider">
            <summary>
            Provides an implementatioin of the <see cref="T:Siriona.Library.Data.DataAccessProvider"/> for the SqlServer client data store.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.DataAccessProvider">
            <summary>
            Represents a base class for the data acces providers used to adapt
            the <see cref="T:Siriona.Library.Data.DataAccessBase"/> class to several data stores.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.CreateCommand">
            <summary>
            Creates a new Command object.
            </summary>
            <returns>The <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates a new DataAdapter object.
            </summary>
            <param name="command">The select command.</param>
            <returns>The <see cref="T:System.Data.Common.DbDataAdapter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.CreateConnection(System.String)">
            <summary>
            Creates a new Connection object.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.CreateParameter(Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter"/> object corresponding to current attibutes and with specified value.
            </summary>
            <param name="parameterDefinition">The parameter definition.</param>
            <returns>The <see cref="T:System.Data.Common.DbParameter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.SetParameterValue(System.Data.Common.DbParameter,System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.CreateCommand(System.String,System.Data.CommandType,System.Int32)">
            <summary>
            Creates the command.
            </summary>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
            <param name="timeout">The timeout.</param>
            <returns>The <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessProvider.GetParameterName(System.String)">
            <summary>
            Gets the name of the parameter.
            </summary>
            <param name="baseName">Name of the base.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeDataAccessProvider.CreateCommand">
            <summary>
            Creates a new Command object.
            </summary>
            <returns>The <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeDataAccessProvider.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates a new DataAdapter object.
            </summary>
            <param name="command">The select command.</param>
            <returns>The <see cref="T:System.Data.Common.DbDataAdapter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeDataAccessProvider.CreateConnection(System.String)">
            <summary>
            Creates a new Connection object.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeDataAccessProvider.CreateParameter(Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter"/> object corresponding to current attibutes and with specified value.
            </summary>
            <param name="parameterDefinition">The attribute that defins the paramter.</param>
            <returns>The <see cref="T:System.Data.Common.DbParameter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeDataAccessProvider.GetParameterName(System.String)">
            <summary>
            Gets the name of the parameter.
            </summary>
            <param name="baseName">Name of the base.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.Common.DbDataReader"/> object.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> that describes the column metadata of the <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"/> that describes the column metadata.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.NextResult">
            <summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns>
            true if there are more result sets; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.Read">
            <summary>
            Advances the reader to the next record in a result set.
            </summary>
            <returns>
            true if there are more rows; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column, starting at location indicated by dataIndex, into the buffer, starting at the location indicated by bufferIndex.
            </summary>
            <returns>
            The actual number of bytes read.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><param name="buffer">The buffer into which to copy the data.</param><param name="dataOffset">The index within the row from which to begin the read operation.</param><param name="bufferOffset">The index with the buffer to which the data will be copied.</param><param name="length">The maximum number of characters to read.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column, starting at location indicated by dataIndex, into the buffer, starting at the location indicated by bufferIndex.
            </summary>
            <returns>
            The actual number of characters read.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><param name="buffer">The buffer into which to copy the data.</param><param name="dataOffset">The index within the row from which to begin the read operation.</param><param name="bufferOffset">The index with the buffer to which the data will be copied.</param><param name="length">The maximum number of characters to read.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.DateTime"/> object.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.String"/>.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetValues(System.Object[])">
            <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
            <returns>
            The number of instances of <see cref="T:System.Object"/> in the array.
            </returns>
            <param name="values">An array of <see cref="T:System.Object"/> into which to copy the attribute columns.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <returns>
            true if the specified column is equivalent to <see cref="T:System.DBNull"/>; otherwise false.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a <see cref="T:System.Decimal"/> object.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary>
            <returns>
            The name of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal given the name of the column.
            </summary>
            <returns>
            The zero-based column ordinal.
            </returns>
            <param name="name">The name of the column.</param><exception cref="T:System.IndexOutOfRangeException">The name specified is not a valid column name.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets name of the data type of the specified column.
            </summary>
            <returns>
            A string representing the name of the data type.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the data type of the specified column.
            </summary>
            <returns>
            The data type of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the rows in the data reader.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the rows in the data reader.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <returns>
            The depth of nesting for the current row.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Data.Common.DbDataReader"/> is closed.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Common.DbDataReader"/> is closed; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.RecordsAffected">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Data.Common.DbDataReader"/> contains one or more rows.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Common.DbDataReader"/> contains one or more rows; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <returns>
            The number of columns in the current row.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param><filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <returns>
            The value of the specified column.
            </returns>
            <param name="name">The name of the column.</param><filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeDataReader.HasRows">
            <summary>
            Gets a value that indicates whether this <see cref="T:System.Data.Common.DbDataReader"/> contains one or more rows.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Common.DbDataReader"/> contains one or more rows; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameter.ResetDbType">
            <summary>
            Resets the DbType property to its original settings.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType"/> of the parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.DbType"/> values. The default is <see cref="F:System.Data.DbType.String"/>.
            </returns>
            <exception cref="T:System.ArgumentException">The property is not set to a valid <see cref="T:System.Data.DbType"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.Direction">
            <summary>
            Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.ParameterDirection"/> values. The default is Input.
            </returns>
            <exception cref="T:System.ArgumentException">The property is not set to one of the valid <see cref="T:System.Data.ParameterDirection"/> values.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.IsNullable">
            <summary>
            Gets or sets a value that indicates whether the parameter accepts null values.
            </summary>
            <returns>
            true if null values are accepted; otherwise false. The default is false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Data.Common.DbParameter"/>.
            </summary>
            <returns>
            The name of the <see cref="T:System.Data.Common.DbParameter"/>. The default is an empty string ("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column mapped to the <see cref="T:System.Data.DataSet"/> and used for loading or returning the <see cref="P:System.Data.Common.DbParameter.Value"/>.
            </summary>
            <returns>
            The name of the source column mapped to the <see cref="T:System.Data.DataSet"/>. The default is an empty string.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion"/> to use when you load <see cref="P:System.Data.Common.DbParameter.Value"/>.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.DataRowVersion"/> values. The default is Current.
            </returns>
            <exception cref="T:System.ArgumentException">The property is not set to one of the <see cref="T:System.Data.DataRowVersion"/> values.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is the value of the parameter. The default value is null.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates whether the source column is nullable. This allows <see cref="T:System.Data.Common.DbCommandBuilder"/> to correctly generate Update statements for nullable columns.
            </summary>
            <returns>
            true if the source column is nullable; false if it is not.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
            <returns>
            The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.Add(System.Object)">
            <summary>
            Adds a <see cref="T:System.Data.Common.DbParameter"/> item with the specified value to the <see cref="T:System.Data.Common.DbParameterCollection"/>.
            </summary>
            <returns>
            The index of the <see cref="T:System.Data.Common.DbParameter"/> object in the collection.
            </returns>
            <param name="value">The <see cref="P:System.Data.Common.DbParameter.Value"/> of the <see cref="T:System.Data.Common.DbParameter"/> to add to the collection.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.Contains(System.Object)">
            <summary>
            Indicates whether a <see cref="T:System.Data.Common.DbParameter"/> with the specified <see cref="P:System.Data.Common.DbParameter.Value"/> is contained in the collection.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Common.DbParameter"/> is in the collection; otherwise false.
            </returns>
            <param name="value">The <see cref="P:System.Data.Common.DbParameter.Value"/> of the <see cref="T:System.Data.Common.DbParameter"/> to look for in the collection.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.Clear">
            <summary>
            Removes all <see cref="T:System.Data.Common.DbParameter"/> values from the <see cref="T:System.Data.Common.DbParameterCollection"/>.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified <see cref="T:System.Data.Common.DbParameter"/> object.
            </summary>
            <returns>
            The index of the specified <see cref="T:System.Data.Common.DbParameter"/> object.
            </returns>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter"/> object in the collection.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified the index of the <see cref="T:System.Data.Common.DbParameter"/> object with the specified name into the collection at the specified index.
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter"/> object to insert into the collection.</param><param name="index">The index at which to insert the <see cref="T:System.Data.Common.DbParameter"/> object.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:System.Data.Common.DbParameter"/> object from the collection.
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter"/> object to remove.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Data.Common.DbParameter"/> object at the specified from the collection.
            </summary>
            <param name="index">The index where the <see cref="T:System.Data.Common.DbParameter"/> object is located.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the <see cref="T:System.Data.Common.DbParameter"/> object with the specified name from the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter"/> object to remove.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter"/> object at the specified index to a new value. 
            </summary>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter"/> value.</param><param name="index">The index where the <see cref="T:System.Data.Common.DbParameter"/> object is located.</param>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter"/> object with the specified name to a new value.
            </summary>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter"/> value.</param><param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter"/> object in the collection.</param>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the <see cref="T:System.Data.Common.DbParameter"/> object with the specified name.
            </summary>
            <returns>
            The index of the <see cref="T:System.Data.Common.DbParameter"/> object with the specified name.
            </returns>
            <param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter"/> object in the collection.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.GetEnumerator">
            <summary>
            Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> method, which supports a simple iteration over a collection by a .NET Framework data provider.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.GetParameter(System.Int32)">
            <summary>
            Returns the <see cref="T:System.Data.Common.DbParameter"/> object at the specified index in the collection.
            </summary>
            <returns>
            The <see cref="T:System.Data.Common.DbParameter"/> object at the specified index in the collection.
            </returns>
            <param name="index">The index of the <see cref="T:System.Data.Common.DbParameter"/> in the collection.</param>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.GetParameter(System.String)">
            <summary>
            Returns <see cref="T:System.Data.Common.DbParameter"/> the object with the specified name.
            </summary>
            <returns>
            The <see cref="T:System.Data.Common.DbParameter"/> the object with the specified name.
            </returns>
            <param name="parameterName">The name of the <see cref="T:System.Data.Common.DbParameter"/> in the collection.</param>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.Contains(System.String)">
            <summary>
            Indicates whether a <see cref="T:System.Data.Common.DbParameter"/> with the specified name exists in the collection.
            </summary>
            <returns>
            true if the <see cref="T:System.Data.Common.DbParameter"/> is in the collection; otherwise false.
            </returns>
            <param name="value">The name of the <see cref="T:System.Data.Common.DbParameter"/> to look for in the collection.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies an array of items to the collection starting at the specified index.
            </summary>
            <param name="array">The array of items to copy to the collection.</param><param name="index">The index in the collection to copy the items.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of items with the specified values to the <see cref="T:System.Data.Common.DbParameterCollection"/>.
            </summary>
            <param name="values">An array of values of type <see cref="T:System.Data.Common.DbParameter"/> to add to the collection.</param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameterCollection.Count">
            <summary>
            Specifies the number of items in the collection.
            </summary>
            <returns>
            The number of items in the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameterCollection.SyncRoot">
            <summary>
            Specifies the <see cref="T:System.Object"/> to be used to synchronize access to the collection.
            </summary>
            <returns>
            A <see cref="T:System.Object"/> to be used to synchronize access to the <see cref="T:System.Data.Common.DbParameterCollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameterCollection.IsFixedSize">
            <summary>
            Specifies whether the collection is a fixed size.
            </summary>
            <returns>
            true if the collection is a fixed size; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameterCollection.IsReadOnly">
            <summary>
            Specifies whether the collection is read-only.
            </summary>
            <returns>
            true if the collection is read-only; otherwise false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeParameterCollection.IsSynchronized">
            <summary>
            Specifies whether the collection is synchronized.
            </summary>
            <returns>
            true if the collection is synchronized; otherwise false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.CubeClient.CubeTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeTransaction.DbConnection">
            <summary>
            Specifies the <see cref="T:System.Data.Common.DbConnection"/> object associated with the transaction.
            </summary>
            <returns>
            The <see cref="T:System.Data.Common.DbConnection"/> object associated with the transaction.
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.CubeClient.CubeTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel"/> for this transaction.
            </summary>
            <returns>
            The <see cref="T:System.Data.IsolationLevel"/> for this transaction.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Siriona.Library.Data.DataCommand">
            <summary>
            Represents a data command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataCommand.#ctor(Siriona.Library.Data.DataMethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataCommand"/> class.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="parameterValues">The parameter values.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataCommand.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommand.AddParameters(Siriona.Library.Data.DataCommandParameter[])">
            <summary>
            Adds the parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The data command.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataCommand.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
            <value>The method info.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataCommand.ParameterValues">
            <summary>
            Gets the parameter values.
            </summary>
            <value>The parameter values.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataCommandParameter">
            <summary>
            Represents an abstract <see cref="T:Siriona.Library.Data.DataCommand"/> parameter.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataCommandParameter"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandParameter.Create``1(System.String,``0)">
            <summary>
            Creates a command parameter from its name ad value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataCommandParameter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataCommandParameter.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataCommandParameter.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataCommandParameter`1">
            <summary>
            Implements a <see cref="T:Siriona.Library.Data.DataCommandParameter"/> for a specific type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandParameter`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataCommandParameter`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Siriona.Library.Data.DataCommandParameter`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataCommandParameter`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataField">
            <summary>
            Represents a data field in a <see cref="T:System.Data.IDataRecord"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataField.Create``1(System.String)">
            <summary>
            Creates a <see cref="T:Siriona.Library.Data.DataField"/> with specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataField.Create``2(System.String,Siriona.Library.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:Siriona.Library.Data.DataField"/> with specified name.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="name">The name.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataField.Map(System.String)">
            <summary>
            Maps the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataField.Map``1(System.String,System.String,Siriona.Library.Func{``0,System.Object})">
            <summary>
            Maps the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="dataFieldName">Name of the data field.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataField.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataField.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataField.FieldMappingBuilder">
            <summary>
            Represents a mapping builder.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataField.FieldMappingBuilder.To(System.String)">
            <summary>
            Toes the specified data field name.
            </summary>
            <param name="dataFieldName">Name of the data field.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.DataField.ConversionFieldMappingBuilder">
            <summary>
            Represents a mapping builder for conversion.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataField.ConversionFieldMappingBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataField.ConversionFieldMappingBuilder"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="dataFieldName">Name of the data field.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataField.ConversionFieldMappingBuilder.With``1(Siriona.Library.Func{``0,System.Object})">
            <summary>
            Indicates the projection used.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataField.ConversionFieldMappingBuilder.op_Implicit(Siriona.Library.Data.DataField.ConversionFieldMappingBuilder)~Siriona.Library.EntityModel.FieldMapping">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Data.DataField.ConversionFieldMappingBuilder"/> to <see cref="T:Siriona.Library.EntityModel.FieldMapping"/>.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Siriona.Library.Data.DataField`1">
            <summary>
            Represents a type <see cref="T:Siriona.Library.Data.DataField"/>.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
        </member>
        <member name="T:Siriona.Library.Data.IDataBuilder`1">
            <summary>
            Represents a builder creating instances of a specified type from a <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <typeparam name="T">The returned type.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.IDataBuilder`1.Build(System.Data.IDataRecord)">
            <summary>
            Builds an instance from the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns>The build data.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataField`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SimpleDataField`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataField`1.Siriona#Library#Data#IDataBuilder{TData}#Build(System.Data.IDataRecord)">
            <summary>
            Builds an instance from the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns>The build data.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataField`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataField`1.Item(System.Data.IDataRecord)">
            <summary>
            Gets the value from the specified record.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Data.SimpleDataField`1">
            <summary>
            Represents a data field in a <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Siriona.Library.Data.SimpleDataField`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SimpleDataField`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Siriona.Library.Data.SimpleDataField`1.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.SimpleDataField`1.Item(System.Data.IDataRecord)">
            <summary>
            Gets the value from the specified record.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Data.ProjectionDataField`2">
            <summary>
            Represents a data field in a <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.ProjectionDataField`2.#ctor(System.String,Siriona.Library.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="projection">The projection.</param>
        </member>
        <member name="P:Siriona.Library.Data.ProjectionDataField`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.ProjectionDataField`2.Item(System.Data.IDataRecord)">
            <summary>
            Gets the value from the specified record.
            </summary>
            <value></value>
        </member>
        <member name="M:Siriona.Library.Data.DataValueField`2.NullableCastTransform``1(Siriona.Library.Func{`0,``0})">
            <summary>
            converts a function that returns a struct to a functions that returns a nullable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseCast">The base cast.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValueField`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataValueField`2"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Siriona.Library.Data.DataValueField`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataValueField`2.Item(System.Data.IDataRecord)">
            <summary>
            Gets the value for the specified record.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Siriona.Library.Data.DataValueConverterField`2.#ctor(System.String,Siriona.Library.Data.IDataValueConverter{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataValueField`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="P:Siriona.Library.Data.DataValueConverterField`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataValueConverterField`2.Item(System.Data.IDataRecord)">
            <summary>
            Gets the value for the specified record.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Siriona.Library.Data.NullableDataValueConverterField`2.#ctor(System.String,Siriona.Library.Data.IDataValueConverter{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataValueField`2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="P:Siriona.Library.Data.NullableDataValueConverterField`2.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.NullableDataValueConverterField`2.Item(System.Data.IDataRecord)">
            <summary>
            Gets the value for the specified record.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataGateway">
            <summary>
            Provides a base class for data gateways.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.#ctor(Siriona.Library.Data.IDataMethodProvider,Siriona.Library.Injection.IIocContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataGateway"/> class.
            </summary>
            <param name="dataMethodProvider">The data method provider used to execute commands.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.#ctor(Siriona.Library.Data.IDataMethodProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataGateway"/> class.
            </summary>
            <param name="dataMethodProvider">The data method provider.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.#ctor(Siriona.Library.Data.IDataMethodProvider,Siriona.Library.EntityModel.IEntityTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataGateway"/> class.
            </summary>
            <param name="dataMethodProvider">The data method provider.</param>
            <param name="tracker">The tracker.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.Execute(System.Object[])">
            <summary>
            Executes the command using given parameters.
            </summary>
            <param name="parameterValues">The list parameters to pass to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.LateExecute``1(System.Object[])">
            <summary>
            Execute the command lately.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameterValues">The list parameters to pass to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.Read(System.Object[])">
            <summary>
            Provides an object to execute a command returning results.
            </summary>
            <param name="parameterValues">The list parameters to pass to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.ReadEntity(System.Object[])">
            <summary>
            Provides an object to execute a command returning results.
            </summary>
            <param name="parameterValues">The list parameters to pass to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.Factory``1">
            <summary>
            Creates an instance of the specified type..
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The instance</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.ReadLegacyTemporal(System.Object[])">
            <summary>
            Reads the temporal value from database passing specified values.
            Start and end parameters are automatically generated.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.ReadLegacyWeekTemporal(System.Object[])">
            <summary>
            Reads the temporal value from database passing specified values.
            Start and end parameters are automatically generated.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataGateway.ReadTemporal(System.Object[])">
            <summary>
            Reads the temporal value from database passing specified values.
            Start and end parameters are automatically generated.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataGateway.DataMethodProvider">
            <summary>
            Gets the data method provider used to execute commands.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.DataGateway.Tracker">
            <summary>
            Gets the entity tracker.
            </summary>
            <value>The tracker.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataAccessAttribute">
            <summary>
            Indicates global attributes for data access classes.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessAttribute"/> class.
            </summary>
            <param name="connectionName">Name of the connection.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessAttribute"/> class.
            </summary>
            <param name="connectionName">Name of the connection.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessAttribute"/> class.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.DataAccessAttribute.ConnectionName">
            <summary>
            Gets the name of the connection.
            </summary>
            <value>The name of the connection.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataAccessAttribute.Prefix">
            <summary>
            Gets the prefix for stored procedures methods.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataAccessAttribute.Schema">
            <summary>
            Gets or sets the data schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataAccessAttribute.SkipTransactions">
            <summary>
            Gets or sets a value indicating whether this data access should skip transactions.
            </summary>
            <value><c>true</c> if this data access should skip transactions, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataAccessBase">
            <summary>
            Provides the <c>abstract</c> base class for data access.
            </summary>
            <remarks>
				 <para>
					 This class provides helpers to map C# methods with stored procedures.
				</para>
				 <para>
					 Implementers should use this class to write the data access layer classes.
					 Since the data access classes provides no business logic an just maps the
					 database stored procedures, the derived class should not be accessed from
					 outside the class library and should be marked as internal.
				</para>
				 <para>
					 The inherited classes should provide the connection name corresponding to the
					 mapped database by implementing a default constructor.
				</para>
				 <para>
					 Most of the case should be covered by the various Execute and Read methods. If special
					 cases are encountered, use the CreateCommand method. All the Execute methods
					 open and close the connection automatically. If you want to make several successive
					 calls and manage the connection, use <see cref="M:Siriona.Library.Data.DataAccessBase.Open"/> and <see cref="M:Siriona.Library.Data.DataAccessBase.Close"/> methods
					 in a <c>try</c>...<c>finally</c> statement.
				</para>
				 <para>
						Use the <see cref="T:Siriona.Library.Data.NonDataParameterAttribute"/> attribute on a parameter when you want to provide a
					  method parameter that is not in the stored procedure signature.
				</para>
				 <para>
					 Use the <see cref="T:Siriona.Library.Data.DataParameterAttribute"/> attribute on a parameter to change its name or type mapping,
					 or on the return value of a method to map it to the output parameter of a stored procedure.
				</para>
				 <para>
					 Use the <see cref="T:Siriona.Library.Data.DataMethodAttribute"/> attribute on a method to change its name mapping or specify
					 other stored procedure call parameters.
				</para>
				 <para>
						This class doesn't provide methods to work with <see cref="T:System.Data.DataTable"/> and <see cref="T:System.Data.DataSet"/>.
						This is by design. DataTables and DataSets provides a weakly typed object model that should not
					  be used in the applications.
				</para>
				 <para>
						This class is <see cref="T:System.IDisposable"/> and should always be disposed as soon as possible.
				</para>
				 <para>
					 The class inherits from MarshalByRefObject so that every public method
					 is made not inlineable. This is important for the stack walk to work.
				</para>
				 <para>
					When working with a database that does not allow stored procedures, it is still possible to use this class and
					separate the SQL code from the implementation. To enable the use of embedded SqlCode, the connection configuration
					must define the <c>useStoredProcedures</c> attribute with a value of <c>false</c>.
				 </para>
				 <para>
					The SQL code should be located in a 'Procedures' folder the can be found at the same level as the data access class.
					The SQL files should have the name of the methods that map it and end with the '.sql' extension. The file should also be
					set as embedded resource.
				 </para>
				 <para>
					For instance, the <c>GetUser</c> method will use the Sql code in the <c>GetUser.sql</c> file. The file contains
					the SQL code to be executed. It can contain the methods parameters prefixed with the '@' character. The <c>userId</c> method
					parameter will be referenced as <c>@userId</c> in the Sql code.
				</para>
			</remarks><example>
				 The following code example implements the <see cref="T:Siriona.Library.Data.DataAccessBase"/> class to map stored procedures :
				 <code>
						internal class UserDataAccess : DataAccessBase
					 {
							public UserDataAccess() : base("users") {}
					
							// Executes the 'InsertUser(@id,@name,@age)' stored procedure in the the database.
							public void InsertUser(Guid id, string name, int age)
							{
								Execute(id, name, age);
							}
					
							// Executes the 'GetUserAge(@id, @age OUTPUT)' stored procedure in the database.
							[return: DataParameter("age")]
							public int GetUserAge(Guid id)
							{
								return (int)Execute(id);
							}
					
							// Executes the 'GetUsers()' stored procedures, and use a reader to read rows.
							public Enumerable&lt;User&gt; GetUsers()
							{
                return Read&lt;User&gt;().With(ReadUser);
							}
					
							// Executes the 'GetUser(@id)' stored procedures, and use a reader to read rows.
							public User GetUser(Guid id)
							{
                return Read&lt;User&gt;(id).With(ReadUser).SingleOrDefault();
							}
					
							private static User ReadUser(DataReader reader)
							{
								Guid id = (Guid)reader["Id"];
								string name = (string)reader["Name"];
								int age = (int)reader["Age"];
                        
								return new User(id, name, age);
							}
					 }
				</code>
				 The following code example uses the <c>UserDataAcess</c> class to access the data :
				 <code>
							public class User
							{
								private Guid id;
								private string name;
								private int age;
					
								public User(Guid id, string name, int age)
								{
									this.id = id;
									this.name = name;
									this.age = age;
								}
					
								public Guid Id
								{
									get { return id; }
								}
					
								public string Name
								{
									get { return name; }
								}
					
								public int Age
								{
									get { return age; }
								}
					
								public static ReadOnlyList&lt;User&gt; GetUsers()
								{
									using (UserDataAccess dataAccess = new UserDataAccess())
										return dataAccess.GetUsers().AsReadOnly();
								}
					
								public static User FromId(Guid id)
								{
									using (UserDataAccess dataAccess = new UserDataAccess())
										return dataAccess.GetUser();
								}
					
								public static User InsertUser(string name, int age)
								{
									Guid id = Guid.NewGuid();
									using (UserDataAccess dataAccess = new UserDataAccess())
										dataAccess.InsertUser(id, name, age);
									return new User(id, name, age);
								}
							}
				</code>
				 The following code shows how to set the connection in the configuration file :
				<code>
					&lt;configuration&gt;
						&lt;configSections&gt;
							&lt;sectionGroup name="siriona.library"&gt;
								&lt;section name="data" type="Siriona.Library.Data.Configuration.DataSettingsSection, Siriona.Library"/&gt;
							&lt;/sectionGroup&gt;
						&lt;/configSections&gt;

					  &lt;siriona.library&gt;
  						&lt;data defaultDataAccessProvider="Siriona.Library.Data.SqlDataAccessProvider, Siriona.Library"&gt;
	  						&lt;connection name="SqlConnection" connectionString="connectionstring" /&gt;
		  				&lt;/data&gt;
			  		&lt;/siriona.library&gt;
				  &lt;/configuration&gt;							
				</code>
				 The following code shows how to set the same connection with embedded SQL files :
				 <code>
					 &lt;configuration&gt;
					 &lt;configSections&gt;
					 &lt;sectionGroup name="siriona.library"&gt;
					 &lt;section name="data" type="Siriona.Library.Data.Configuration.DataSettingsSection, Siriona.Library"/&gt;
					 &lt;/sectionGroup&gt;
					 &lt;/configSections&gt;

					 &lt;siriona.library&gt;
					 &lt;data defaultDataAccessProvider="Siriona.Library.Data.SqlDataAccessProvider, Siriona.Library"&gt;
					 &lt;connection name="SqlConnection" connectionString="connectionstring" useStoredProcedures="false" /&gt;
					 &lt;/data&gt;
					 &lt;/siriona.library&gt;
					 &lt;/configuration&gt;
				 </code>
				The following code is a sample implementation of the <c>GetUser</c> method in an SQL embedded file :
				<code>
					--- Select all the columns of the Users table.
					SELECT * FROM Users
					WHERE UserId = @id
				</code>
			 </example>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.#ctor(System.String)">
            <summary>
            Initialize the <see cref="T:Siriona.Library.Data.DataAccessBase"/> object instance.
            </summary>
            <param name="connectionName">The connection settings name.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.#ctor">
            <summary>
            Initialize the <see cref="T:Siriona.Library.Data.DataAccessBase"/> object instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.#ctor(Siriona.Library.Data.ConnectionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessBase"/> class.
            </summary>
            <param name="connectionSettings">The connection settings.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Finalize">
            <summary>
            Clean up internal resource. Do not rely on destructor, call Dispose instead.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Dispose(System.Boolean)">
            <summary>
            Clean up internal resources.
            </summary>
            <param name="disposing">true if called by the Dispose methode,false if called from the Finalizer.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Open">
            <summary>
            Opens the database connection.
            </summary>
            <remarks>
				<para>
					This method is safe to use during transactions.
				</para>
				<para>
					Use this method to open the connection once for multiple access to the database.
					Consider using a <c>try finally</c> statement to call the <see cref="M:Siriona.Library.Data.DataAccessBase.Close"/> method.
				</para>
			</remarks><example>
				The following exemple shows how to call to stored procedures without connecting twice :
				<code>
					using (CustomerDataAccess dataAccess = new CustomerDataAccess)
					{
						dataAccess.Open();
						try
						{
							dataAccess.FirstMethod();
							dataAccess.SecondMethod();
						}
						finally
						{
							dataAccess.Close();
						}
					}
				</code>
			</example>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Close">
            <summary>
            Closes the database connection.
            </summary>
            <remarks>
				<para>
					This method is safe to use during transactions.
				</para>
				<para>
					Use this method to in conjonction with the <see cref="M:Siriona.Library.Data.DataAccessBase.Open"/> to open the connection once for multiple access to the database.
					Consider using a <c>try finally</c> statement to call the <see cref="M:Siriona.Library.Data.DataAccessBase.Open"/> method.
				</para>
			</remarks><example>
				The following exemple shows how to call to stored procedures without connecting twice :
				<code>
					using (CustomerDataAccess dataAccess = new CustomerDataAccess)
					{
					dataAccess.Open();
					try
					{
					dataAccess.FirstMethod();
					dataAccess.SecondMethod();
					}
					finally
					{
					dataAccess.Close();
					}
					}
				</code>
			</example>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Execute(System.Object[])">
            <summary>
            Executes the stored procedure using given parameters.
            </summary>
            <param name="parameterValues">The list parameters to pass to the stored procedure.</param>
            <returns>The result of the stored procedure</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ExecuteReader(System.Object[])">
            <summary>
            Executes the stored procedure using given parameters.
            </summary>
            <param name="parameterValues">The list parameters to pass to the stored procedure.</param>
            <returns>A <see cref="T:Siriona.Library.Data.DataReader"/> that contains the result of the stored procedure.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ExecuteParameters(System.Object[])">
            <summary>
            Executes the procedure with the specified parameters.
            </summary>
            <param name="parameterValues">The parameters.</param>
            <returns>The resulting parameters</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ExecuteScalar(System.Object[])">
            <summary>
            Executes a stored procedure that return a single result.
            </summary>
            <param name="parameterValues">The parameter list.</param>
            <returns>The stored procedure return value.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ExecuteEnumerable(System.Object[])">
            <summary>
            Executes the stored procedure, and returns an enumerable.
            </summary>
            <param name="parameterValues">The parameter values.</param>
            <returns>A data reference</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.Read``1(System.Object[])">
            <summary>
            Reads data lines from database.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.CreateCommand(System.Object[])">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbCommand"/> initialized with given parameterValues.
            </summary>
            <param name="parameterValues">The parameter list.</param>
            <returns>A new <see cref="T:System.Data.Common.DbCommand"/> that can be used to execute the stored procedure.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.CreateCommand(Siriona.Library.Data.DataMethodInfo,System.Object[])">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbCommand"/> initialized with given parameterValues.
            </summary>
            <param name="callingMethodInfo">The calling method info.</param>
            <param name="parameterValues">The parameter list.</param>
            <returns>
            A new <see cref="T:System.Data.Common.DbCommand"/> that can be used to execute the stored procedure.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ExecuteReader(Siriona.Library.Data.DataMethodInfo,System.Object[])">
            <summary>
            Executes the stored procedure using given parameters.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="parameterValues">The list parameters to pass to the stored procedure.</param>
            <returns>
            A <see cref="T:Siriona.Library.Data.DataReader"/> that contains the result of the stored procedure.
            </returns>
        </member>
        <member name="T:Siriona.Library.Data.DataAccessBase.ReadMethods`1">
            <summary>
            Provides the With fluent method.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ReadMethods`1.#ctor(Siriona.Library.Data.DataAccessBase,Siriona.Library.Data.DataMethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessBase.ReadMethods`1"/> class.
            </summary>
            <param name="dataAccessBase">The data access base.</param>
            <param name="methodInfo">The method info.</param>
            <param name="parameterValues">The parameter values.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase.ReadMethods`1.With(Siriona.Library.Func{Siriona.Library.Data.DataRecord,`0})">
            <summary>
            Indicates with which method database lines should be read.
            </summary>
            <param name="readMethod">The read method.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.DataAccessBase`1">
            <summary>
            Provides a base class for implementing <see cref="T:Siriona.Library.Data.DataAccessBase"/> with a factory support.
            </summary>
            <typeparam name="T">The class own type for factory instanciation.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase`1.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessBase`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase`1.#ctor(Siriona.Library.Data.ConnectionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessBase`1"/> class.
            </summary>
            <param name="connectionSettings">The connection settings.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataAccessBase`1"/> class.
            </summary>
            <param name="connectionName">The connection settings name.</param>
        </member>
        <member name="P:Siriona.Library.Data.DataAccessBase`1.Factory">
            <summary>
            Gets or sets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataAccessFactory`1">
            <summary>
            Provides a default implementation of the <see cref="T:Siriona.Library.Data.IDataAccessFactory`1"/> interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Data.IDataAccessFactory`1">
            <summary>
            Represents an abstract <see cref="T:Siriona.Library.Data.DataAccessBase"/> object factory.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Data.IDataAccessFactory`1.CreateDataAccess">
            <summary>
            Creates the data access object.
            </summary>
            <returns>The newly created data access object</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataAccessFactory`1.CreateDataAccess">
            <summary>
            Creates the data access object.
            </summary>
            <returns>The newly created data access object</returns>
        </member>
        <member name="T:Siriona.Library.Data.DataLookup`2">
            <summary>
            Represents a lookup used to build an aggregate.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.DataLookup`2.#ctor(Siriona.Library.Collections.Lookup{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataLookup`2"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataLookup`2.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if [contains] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.DataLookup`2.Item(`0)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Collections.Enumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Data.DataLookup`2.Count">
            <summary>
            Gets the number of keys.
            </summary>
            <value>The number of keys.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataLookup`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataLookup`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataMethodAttribute">
            <summary>
            Indicates that the method maps an Sql Stored procedure.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the DataMethodAttribute class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataMethodAttribute class.
            </summary>
            <param name="commandText">The name of the stored procedure.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodAttribute.#ctor(System.String,System.Data.CommandType)">
            <summary>
            Initializes a new instance of the DataMethodAttribute class.
            </summary>
            <param name="commandText">The text of the SQL command.</param>
            <param name="commandType">The command type of the SQL command.</param>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodAttribute.CommandText">
            <summary>
            Gets/sets the text of the SQL command used to invoke the stored procedure.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodAttribute.CommandType">
            <summary>
            Gets/sets the commande type of the SQL command used to invoke the stored procedure.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodAttribute.CommandTimeout">
            <summary>
            Gets/sets the timeout used when invoking the stored procedure.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodAttribute.Schema">
            <summary>
            Gets or sets the procedure schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodAttribute.SkipTransactions">
            <summary>
            Gets or sets a value indicating whether this data method should skip transaction.
            </summary>
            <value><c>true</c> if the data method execution shoul skip transaction; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataCommandCall">
            <summary>
            Represent the context to perform a data command call.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.#ctor(Siriona.Library.Data.DataCommand,Siriona.Library.Data.IDataMethodProvider,Siriona.Library.EntityModel.IEntityTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataCommandCall"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="provider">The provider.</param>
            <param name="tracker">The tracker.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.All">
            <summary>
            Creates an object to get all results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.All``1">
            <summary>
            Creates an object to get all results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.Single">
            <summary>
            Creates an object to get a single result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.Single``1">
            <summary>
            Creates an object to get a single result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.SingleOrDefault">
            <summary>
            Creates an object to get a single result if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.SingleOrDefault``1">
            <summary>
            Creates an object to get a single result if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.First">
            <summary>
            Creates an object to get the first result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.First``1">
            <summary>
            Creates an object to get the first result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.FirstOrDefault">
            <summary>
            Creates an object to get the first result if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.FirstOrDefault``1">
            <summary>
            Creates an object to get the first result if any.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.Read">
            <summary>
            Reads the command results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.Track``1(Siriona.Library.Collections.Enumerable{``0})">
            <summary>
            Tracks the specified entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.AsSet``1">
            <summary>
            Gets the search result as a result set.
            </summary>
            <typeparam name="T">The result data type.</typeparam>
            <returns>The search results.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataCommandCall.GetReader">
            <summary>
            Gets the reader to build an aggregate.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.DataMethodProvider">
            <summary>
            Implements the <see cref="T:Siriona.Library.Data.IDataMethodProvider"/> to execute commands as stored procedures.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.IDataMethodProvider">
            <summary>
            Represents a data method provider.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.IDataMethodProvider.Execute(Siriona.Library.Data.DataCommand)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>The value returned by the command.</returns>
        </member>
        <member name="M:Siriona.Library.Data.IDataMethodProvider.Read(Siriona.Library.Data.DataCommand)">
            <summary>
            Reads the results returned by the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>A enumeration of <see cref="T:System.Data.IDataRecord"/> containing data returned by the command.</returns>
        </member>
        <member name="M:Siriona.Library.Data.IDataMethodProvider.ReadAggregate(Siriona.Library.Data.DataCommand)">
            <summary>
            Reads the data returned by specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
            A enumeration of <see cref="T:System.Data.IDataRecord"/> containing data returned by the command.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.#ctor(Siriona.Library.Data.ConnectionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataMethodProvider"/> class.
            </summary>
            <param name="connectionSettings"></param>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.Execute(Siriona.Library.Data.DataCommand)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
            The value returned by the command or <c>null</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.Read(Siriona.Library.Data.DataCommand)">
            <summary>
            Reads the data returned by specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
            A enumeration of <see cref="T:System.Data.IDataRecord"/> containing data returned by the command.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.ReadAggregate(Siriona.Library.Data.DataCommand)">
            <summary>
            Reads the data returned by specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
            A enumeration of <see cref="T:System.Data.IDataRecord"/> containing data returned by the command.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.CreateCommand(Siriona.Library.Data.Connection,Siriona.Library.Data.DataCommand)">
            <summary>
            Creates the command.
            </summary>
            <param name="connection">The connection.</param>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.CreateConnection(Siriona.Library.Data.DataMethodInfo)">
            <summary>
            Creates the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.Configure(Siriona.Library.Injection.IIocContainer)">
            <summary>
            Configures the specified container with data method provides from configuration.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataMethodProvider.FromName(System.String)">
            <summary>
            Get a configured instance of <see cref="T:Siriona.Library.Data.IDataMethodProvider"/> by name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodProvider.ConnectionSettings">
            <summary>
            Gets the connection settings.
            </summary>
            <value>The connection settings.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataMethodProvider.DataAccessProvider">
            <summary>
            Gets the data access provider.
            </summary>
            <value>The data access provider.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataParameterAttribute">
            <summary>
            Indicates the mapping between the function parameter and the stored procedure parameter.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the DataParameterAttribute class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataParameterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataParameterAttribute class.
            </summary>
            <param name="name">The name of the corresponding stored procedure parameter (without the @ prefix).</param>
        </member>
        <member name="M:Siriona.Library.Data.DataParameterAttribute.#ctor(System.Data.DbType)">
            <summary>
            Initializes a new instance of the DataParameterAttribute class.
            </summary>
            <param name="dbType">The type of the corresponding stored procedure parameter.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataParameterAttribute.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the DataParameterAttribute class.
            </summary>
            <param name="name">The name of the corresponding stored procedure parameter (without the @ prefix).</param>
            <param name="dbType">The type of the corresponding stored procedure parameter.</param>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Name">
            <summary>
            Gets/sets the name of corresponding stored procedure parameter (without the @ prefix).
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.DbType">
            <summary>
            Gets/sets the type of corresponding stored procedure parameter.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Size">
            <summary>
            Gets/sets the size of corresponding stored procedure parameter.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Precision">
            <summary>
            Gets/sets the precision of corresponding stored procedure parameter.
            </summary>
            <value>The precision.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Scale">
            <summary>
            Gets/sets the scale of corresponding stored procedure parameter.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Direction">
            <summary>
            Gets/sets the direction of corresponding stored procedure parameter.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsNullable">
            <summary>
            Gets/sets a value indication wether corresponding stored procedure parameter is nullable.
            </summary>
            <value>
            	<c>true</c> if this instance is nullable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Version">
            <summary>
            Gets/sets the version used for corresponding stored procedure parameter.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.Column">
            <summary>
            Gets sets the column name used for corresponding stored procedure parameter.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsDbTypeDefined">
            <summary>
            Gets a value indicating wether DbType has been set.
            </summary>
            <value><c>true</c> if [db type is defined]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsSizeDefined">
            <summary>
            Gets a value indicating wether Size has been set.
            </summary>
            <value><c>true</c> if [size is defined]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsPrecisionDefined">
            <summary>
            Gets a value indicating wether Precision has been set.
            </summary>
            <value><c>true</c> if precision is defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsScaleDefined">
            <summary>
            Gets a value indicating wether Scale has been set.
            </summary>
            <value><c>true</c> if scale is defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsDirectionDefined">
            <summary>
            Gets a value indicating wether Direction has been set.
            </summary>
            <value><c>true</c> if direction is defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsVersionDefined">
            <summary>
            Gets a value indicating wether Version has been set.
            </summary>
            <value><c>true</c> if version is defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataParameterAttribute.IsColumnDefined">
            <summary>
            Gets a value indicating wether Column has been set.
            </summary>
            <value><c>true</c> if column is defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataReader">
            <summary>
            Provides access to rows returned by the execution of a command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.Close">
            <summary>
            Closes the data reader.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.NextResult">
            <summary>
            Moves the reader to the next result set if available.
            </summary>
            <returns>
            	<c>true</c> if result is available, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.Read">
            <summary>
            Moves the reader to the next row if available.
            </summary>
            <returns>
            	<c>true</c> if a row is available, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetSchemaTable">
            <summary>
            Gets a table containing the schema of the result.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"/> containing the schema.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.IDataReader"></see> is closed. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetName(System.Int32)">
            <summary>
            Gets the name of a result column.
            </summary>
            <param name="i">The index of the result column.</param>
            <returns>The name of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type name of a result column.
            </summary>
            <param name="i">The index of the result column.</param>
            <returns>The name of the data type.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"/> of data in specified column.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>
            The <see cref="T:System.Type"/> of the data in the column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetValues(System.Object[])">
            <summary>
            Gets the values of all the columns in an array.
            </summary>
            <param name="values">On return, <c>values</c> contains the values of the columns for current row.</param>
            <returns>
            The number of columns written to the array.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetOrdinal(System.String)">
            <summary>
            Get the index of specified column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The index of the column.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetBoolean(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>bool</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>bool</c> value.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetBoolean(System.String)">
            <summary>
            Gets the value of specified column as a <c>bool</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>bool</c> value.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetByte(System.String)">
            <summary>
            Gets the value of specified column as a <c>byte</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>byte</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetByte(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>byte</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>byte</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the value of specified column as an array of <c>byte</c>.
            </summary>
            <param name="name">The index of the column.</param>
            <param name="fieldOffset">the offset in the column data</param>
            <param name="buffer">The buffer that contains data on return.</param>
            <param name="bufferoffset">The offset in the buffer of data being written.</param>
            <param name="length">The length of data being written.</param>
            <returns>
            The number of bytes written to the buffer.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the value of specified column as an array of <c>byte</c>.
            </summary>
            <param name="i">The index of the column.</param>
            <param name="fieldOffset">the offset in the column data</param>
            <param name="buffer">The buffer that contains data on return.</param>
            <param name="bufferoffset">The offset in the buffer of data being written.</param>
            <param name="length">The length of data being written.</param>
            <returns>
            The number of bytes written to the buffer.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetChar(System.String)">
            <summary>
            Gets the value of specified column as a <c>char</c> value.
            </summary>
            <param name="name">The index of the column.</param>
            <returns>The <c>char</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetChar(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>char</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>char</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the value of specified column as an array of <c>char</c>.
            </summary>
            <param name="name">The index of the column.</param>
            <param name="fieldoffset">the offset in the column data</param>
            <param name="buffer">The buffer that contains data on return.</param>
            <param name="bufferoffset">The offset in the buffer of data being written.</param>
            <param name="length">The length of data being written.</param>
            <returns>
            The number of chars written to the buffer.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the value of specified column as an array of <c>char</c>.
            </summary>
            <param name="i">The index of the column.</param>
            <param name="fieldoffset">the offset in the column data</param>
            <param name="buffer">The buffer that contains data on return.</param>
            <param name="bufferoffset">The offset in the buffer of data being written.</param>
            <param name="length">The length of data being written.</param>
            <returns>
            The number of chars written to the buffer.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetGuid(System.String)">
            <summary>
            Gets the value of specified column as a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <see cref="T:System.Guid"/> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetGuid(System.Int32)">
            <summary>
            Gets the value of specified column as a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <see cref="T:System.Guid"/> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetInt16(System.String)">
            <summary>
            Gets the value of specified column as a <c>short</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>short</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetInt16(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>short</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>short</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetInt32(System.String)">
            <summary>
            Gets the value of specified column as an <c>int</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>int</c> value</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetInt32(System.Int32)">
            <summary>
            Gets the value of specified column as an <c>int</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>int</c> value</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetInt64(System.String)">
            <summary>
            Gets the value of specified column as a <c>long</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>long</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetInt64(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>long</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>long</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetFloat(System.String)">
            <summary>
            Gets the value of specified column as a <c>float</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>float</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetFloat(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>float</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>float</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetDouble(System.String)">
            <summary>
            Gets the value of specified column as a <c>double</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>double</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetDouble(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>double</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>double</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetString(System.String)">
            <summary>
            Gets the value of specified column as a <c>string</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>string</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetString(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>string</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>string</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetDecimal(System.String)">
            <summary>
            Gets the value of specified column as a <c>decimal</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>decimal</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetDecimal(System.Int32)">
            <summary>
            Gets the value of specified column as a <c>decimal</c> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <c>decimal</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetDateTime(System.String)">
            <summary>
            Gets the value of specified column as a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="name">The index of the column.</param>
            <returns>The <see cref="T:System.DateTime"/> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetDateTime(System.Int32)">
            <summary>
            Gets the value of specified column as a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <see cref="T:System.DateTime"/> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.GetData(System.String)">
            <summary>
            Gets the value of specified column as a new <see cref="T:System.Data.IDataReader"/> object.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Gets the value of specified column as a new <see cref="T:System.Data.IDataReader"/> object.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.IsDBNull(System.String)">
            <summary>
            Check whether specified columns contains a DBNull value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>
            	<c>true</c> is the column contains DBNull, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataReader.System#Data#IDataRecord#IsDBNull(System.Int32)">
            <summary>
            Check whether specified columns contains a DBNull value.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>
            	<c>true</c> is the column contains DBNull, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="P:Siriona.Library.Data.DataReader.FieldCount">
            <summary>
            Gets the number of fields in the current row.
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise the number of columns in the current record. The default is -1.</value>
            <returns>When not positioned in a valid recordset, 0; otherwise the number of columns in the current record. The default is -1.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataReader.Item(System.String)">
            <summary>
            Gets the value of specified column.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Data.DataReader.Depth">
            <summary>
            Get the reader depth.
            </summary>
            <value>The level of nesting.</value>
            <returns>The level of nesting.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataReader.IsClosed">
            <summary>
            Gets a booean value indicating whether the reader is closed.
            </summary>
            <returns>true if the data reader is closed; otherwise, false.</returns>
            <value>true if the data reader is closed; otherwise, false.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataReader.RecordsAffected">
            <summary>
            Gets the number of records affected by the execution of the command.
            </summary>
            <returns>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</returns>
            <value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataRecord">
            <summary>
            Represents a data record.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetName(System.Int32)">
            <summary>
            Gets the name of a result column.
            </summary>
            <param name="i">The index of the result column.</param>
            <returns>The name of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type name of a result column.
            </summary>
            <param name="i">The index of the result column.</param>
            <returns>The name of the data type.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"/> of data in specified column.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>
            The <see cref="T:System.Type"/> of the data in the column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetValues(System.Object[])">
            <summary>
            Gets the values of all the columns in an array.
            </summary>
            <param name="values">On return, <c>values</c> contains the values of the columns for current row.</param>
            <returns>
            The number of columns written to the array.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetOrdinal(System.String)">
            <summary>
            Get the index of specified column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The index of the column.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetBoolean(System.String)">
            <summary>
            Gets the value of specified column as a <c>bool</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>bool</c> value.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetByte(System.String)">
            <summary>
            Gets the value of specified column as a <c>byte</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>byte</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the value of specified column as an array of <c>byte</c>.
            </summary>
            <param name="name">The index of the column.</param>
            <param name="fieldOffset">the offset in the column data</param>
            <param name="buffer">The buffer that contains data on return.</param>
            <param name="bufferoffset">The offset in the buffer of data being written.</param>
            <param name="length">The length of data being written.</param>
            <returns>
            The number of bytes written to the buffer.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetChar(System.String)">
            <summary>
            Gets the value of specified column as a <c>char</c> value.
            </summary>
            <param name="name">The index of the column.</param>
            <returns>The <c>char</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the value of specified column as an array of <c>char</c>.
            </summary>
            <param name="name">The index of the column.</param>
            <param name="fieldoffset">the offset in the column data</param>
            <param name="buffer">The buffer that contains data on return.</param>
            <param name="bufferoffset">The offset in the buffer of data being written.</param>
            <param name="length">The length of data being written.</param>
            <returns>
            The number of chars written to the buffer.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetGuid(System.String)">
            <summary>
            Gets the value of specified column as a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <see cref="T:System.Guid"/> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetInt16(System.String)">
            <summary>
            Gets the value of specified column as a <c>short</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>short</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetInt32(System.String)">
            <summary>
            Gets the value of specified column as an <c>int</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>int</c> value</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetInt64(System.String)">
            <summary>
            Gets the value of specified column as a <c>long</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>long</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetFloat(System.String)">
            <summary>
            Gets the value of specified column as a <c>float</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>float</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetDouble(System.String)">
            <summary>
            Gets the value of specified column as a <c>double</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>double</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetString(System.String)">
            <summary>
            Gets the value of specified column as a <c>string</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>string</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetDecimal(System.String)">
            <summary>
            Gets the value of specified column as a <c>decimal</c> value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <c>decimal</c> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetDateTime(System.String)">
            <summary>
            Gets the value of specified column as a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="name">The index of the column.</param>
            <returns>The <see cref="T:System.DateTime"/> value</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.GetData(System.String)">
            <summary>
            Gets the value of specified column as a new <see cref="T:System.Data.IDataReader"/> object.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.IsDBNull(System.String)">
            <summary>
            Check whether specified columns contains a DBNull value.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>
            	<c>true</c> is the column contains DBNull, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            
            <returns>
            The <see cref="T:System.Object"></see> which will contain the field value upon return.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            
            <returns>
            The value of the column.
            </returns>
            
            <param name="i">The zero-based column ordinal. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
            
            <param name="i">The zero-based column ordinal. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            
            <returns>
            The actual number of bytes read.
            </returns>
            
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferoffset">The index for buffer to start the read operation. </param>
            <param name="fieldOffset">The index within the field from which to start the read operation. </param>
            <param name="i">The zero-based column ordinal. </param>
            <param name="length">The number of bytes to read. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            
            <returns>
            The character value of the specified column.
            </returns>
            
            <param name="i">The zero-based column ordinal. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            
            <returns>
            The actual number of characters read.
            </returns>
            
            <param name="fieldoffset">The index within the row from which to start the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferoffset">The index for buffer to start the read operation. </param>
            <param name="i">The zero-based column ordinal. </param>
            <param name="length">The number of bytes to read. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            
            <returns>
            The GUID value of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            
            <returns>
            The string value of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            
            <returns>
            The date and time data value of the spcified field.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Data.IDataReader"></see> to be used when the field points to more remote structured data.
            </summary>
            
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> to be used when the field points to more remote structured data.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            
            <returns>
            true if the specified field is set to null. Otherwise, false.
            </returns>
            
            <param name="i">The index of the field to find. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Data.DataRecord.op_Implicit(Siriona.Library.Data.DataReader)~Siriona.Library.Data.DataRecord">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Data.DataReader"/> to <see cref="T:Siriona.Library.Data.DataRecord"/>.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataRecord.FieldCount">
            <summary>
            Gets the number of fields in the current row.
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise the number of columns in the current record. The default is -1.</value>
            <returns>When not positioned in a valid recordset, 0; otherwise the number of columns in the current record. The default is -1.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataRecord.Item(System.String)">
            <summary>
            Gets the value of specified column.
            </summary>
            <value>The value</value>
        </member>
        <member name="P:Siriona.Library.Data.DataRecord.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
            
            <returns>
            The column located at the specified index as an <see cref="T:System.Object"></see>.
            </returns>
            
            <param name="i">The index of the column to get. </param>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:Siriona.Library.Data.DataReference">
             <summary>
             Represents the reference to a datamethod to be used from inside an iterator methode.
             </summary>
             <remarks>
             Iterator methods are executed when the iteration begins. At that time, the stack walk is not possible to
             find the method signature. The DataReference keeps a track from the method signature so that the command
             can be created when the iteration begins, and disposed then.
             <code>
             public IEnumerable&lt;Item&gt; GetItems(int id)
             {
                return ReadItems(ExecuteEnumerable(id));
             }
             
             private IEnumerable&lt;Item&gt; ReadItems(DataReference data)
             {
            		foreach(DataRecord record in data.Records)
            			yield return new Item((string)record["Name"]);
             }
             </code> 
            
             </remarks>
        </member>
        <member name="M:Siriona.Library.Data.DataReference.#ctor(Siriona.Library.Data.DataAccessBase,Siriona.Library.Data.DataMethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataReference"/> class.
            </summary>
            <param name="dataAccessBase">The data access base.</param>
            <param name="methodInfo">The method info.</param>
            <param name="parameterValues">The parameter values.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataReference.ExecuteReader">
            <summary>
            Executes the reader.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.DataReference.Records">
            <summary>
            Gets the records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataResult">
            <summary>
            Provides a base class for the result of a data command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataResult"/> class.
            </summary>
            <param name="commandCall">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.DataResult.Read``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Reads the resutls with the specified reader.
            </summary>
            <typeparam name="T">Return object type.</typeparam>
            <param name="reader">The reader.</param>
            <returns>An enumeration of read objects.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataResult.Read``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads the resutls with the specified builder.
            </summary>
            <typeparam name="T">Return object type.</typeparam>
            <param name="builder">The reader.</param>
            <returns>An enumeration of read objects.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataResult.Read``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Reads the resutls with the specified builder.
            </summary>
            <typeparam name="T">Return object type.</typeparam>
            <param name="builder">The reader.</param>
            <returns>An enumeration of read objects.</returns>
        </member>
        <member name="P:Siriona.Library.Data.DataResult.CommandCall">
            <summary>
            Gets the call.
            </summary>
            <value>The call.</value>
        </member>
        <member name="T:Siriona.Library.Data.LateUniqueResult">
            <summary>
            Provides a base class for the result of a data command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.LateUniqueResult.#ctor(Siriona.Library.Data.UniqueResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataResult"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Siriona.Library.Data.LateUniqueResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.LateUniqueResult`1">
            <summary>
            Provides a base class for the result of a data command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.LateUniqueResult`1.#ctor(Siriona.Library.Data.UniqueResult{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataResult"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Siriona.Library.Data.LateUniqueResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.DataTransaction">
            <summary>
            Represents a transaction on a <see cref="T:Siriona.Library.Data.Connection"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataTransaction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.DataTransaction"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataTransaction.EnlistConnection(Siriona.Library.Data.ConnectionSettings)">
            <summary>
            Creates a connection from connection string using a pool and enlists it in the transaction.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The pooled connection object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataTransaction.AddConnection(Siriona.Library.Data.Connection)">
            <summary>
            Adds an existing connection to the transaction.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Siriona.Library.Data.DataTransaction.Complete">
            <summary>
            Completes and commits the transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.DataTransaction.Current">
            <summary>
            Gets the current ambiant transaction.
            </summary>
            <value>The current ambiant transaction.</value>
        </member>
        <member name="P:Siriona.Library.Data.DataTransaction.Instances">
            <summary>
            Gets the thread local static instance stack.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.DataTransaction.Connections">
            <summary>
            Gets an enumeration of all available connections.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataTypeMapper.GetDbType(System.Type)">
            <summary>
            Gets the db type corresponding to .Net type.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <returns>The db type associated with the .Net type.</returns>
        </member>
        <member name="M:Siriona.Library.Data.DataTypeMapper.CreateTypeMappings">
            <summary>
            Creates the type mappings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.EntitySetResult`1">
            <summary>
            Represents an entity set result.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Data.EntitySetResult`1.#ctor(Siriona.Library.Data.DataCommandCall,Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.EntitySetResult`1"/> class.
            </summary>
            <param name="call">The call.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Siriona.Library.Data.EntitySetResult`1.SearchWith``1(``0)">
            <summary>
            Searches the with.
            </summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.ExtendedDataMethodInfo">
            <summary>
            Represents an extension of existing <see cref="T:Siriona.Library.Data.DataMethodInfo"/>
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.ExtendedDataMethodInfo.AddParamter(Siriona.Library.Data.DataParameterInfo)">
            <summary>
            Adds the paramter.
            </summary>
            <param name="parameterInfo">The parameter info.</param>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.MethodHandle">
            <summary>
            Gets the method handle.
            </summary>
            <value>The method handle.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.DeclaringType">
            <summary>
            Gets the type of the declaring.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.ReturnType">
            <summary>
            Gets the type of the return value.
            </summary>
            <value>The type of the return.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.ReturnTypeCustomAttribute">
            <summary>
            Gets the return type custom attribute.
            </summary>
            <value>The return type custom attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataMethodInfo.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Siriona.Library.Data.ExtendedDataParameterInfo">
            <summary>
            Represents a custom <see cref="T:Siriona.Library.Data.DataMethodInfo"/> parameter.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.ExtendedDataParameterInfo.#ctor(System.String,System.Type,System.Data.ParameterDirection,Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.ExtendedDataParameterInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="parameterDirection">The parameter direction.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Siriona.Library.Data.ExtendedDataParameterInfo.#ctor(System.String,System.Type,System.Data.ParameterDirection,Siriona.Library.Data.DataParameterAttribute,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.ExtendedDataParameterInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="parameterDirection">The parameter direction.</param>
            <param name="attribute">The attribute.</param>
            <param name="isSensitive">if set to <c>true</c>, data stored in the parameter are sensitive.</param>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataParameterInfo.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataParameterInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataParameterInfo.IsSensitive">
            <summary>
            Gets a value indicating whether this parameter may contain sensitive data.
            </summary>
            <value>
            	<c>true</c> if this parameters is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataParameterInfo.IsIn">
            <summary>
            Gets a value indicating whether this instance is in.
            </summary>
            <value><c>true</c> if this instance is in; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.ExtendedDataParameterInfo.IsOut">
            <summary>
            Gets a value indicating whether this instance is out.
            </summary>
            <value><c>true</c> if this instance is out; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Data.IAggregateBuilder`1">
            <summary>
            Represents a builder creating instances of a specified aggregate from a <see cref="T:Siriona.Library.Data.AggregateReader"/>.
            </summary>
            <typeparam name="T">The returned type.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.IAggregateBuilder`1.Build(Siriona.Library.Data.AggregateReader)">
            <summary>
            Builds instances from the specified record.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The build data.</returns>
        </member>
        <member name="T:Siriona.Library.Data.MoneyBuilder">
            <summary>
            Represents a builder for <see cref="T:Siriona.Library.Money"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MoneyBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MoneyBuilder"/> class.
            </summary>
            <param name="amountFieldName">Name of the amount field.</param>
            <param name="currencyFieldName">Name of the currency field.</param>
        </member>
        <member name="M:Siriona.Library.Data.MoneyBuilder.Build(System.Data.IDataRecord)">
            <summary>
            Builds an instance from the specified record.
            </summary>
            <param name="record">The record.</param>
            <returns>The build data.</returns>
        </member>
        <member name="P:Siriona.Library.Data.MoneyBuilder.Default">
            <summary>
            Gets the default money builder.
            </summary>
            <value>The default money builder.</value>
            <remarks>The default money builder uses fields named "Amount" and "Currency" for amount and currency values, respectively.</remarks>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MList">
            <summary>
            Represents a list of <see cref="T:Siriona.Library.Data.MGraph.MNode"/>.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MNode">
            <summary>
            represents a node in a MGraph.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.MNode.Unknown">
            <summary>
            Represents an unknown node.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.Successor(System.Object)">
            <summary>
            Get the successor with specified label.
            </summary>
            <param name="successorLabel">The successor label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.Successors">
            <summary>
            Get the node successors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.Descendant(System.Object)">
            <summary>
            Get the descendant with specified label.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.Descendants(System.Object)">
            <summary>
            Get the descendants with specified label.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.Descendants">
            <summary>
            Descendantses the node descendants.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.ToMGraph(Siriona.Library.Data.MGraph.MWriter)">
            <summary>
            Serializes the graph to specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.ToMGraph">
            <summary>
            Retruns the text representation of the graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.op_Implicit(System.String)~Siriona.Library.Data.MGraph.MNode">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Siriona.Library.Data.MGraph.MNode"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.op_Implicit(System.Int32)~Siriona.Library.Data.MGraph.MNode">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Siriona.Library.Data.MGraph.MNode"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.op_Implicit(System.DateTime)~Siriona.Library.Data.MGraph.MNode">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Siriona.Library.Data.MGraph.MNode"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.Parse(System.String)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNode.ApplySchema(Siriona.Library.Data.MGraph.MNode,Siriona.Library.Data.MGraph.MNode)">
            <summary>
            Applies the schema.
            </summary>
            <param name="node">The node.</param>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MNode.IsNode">
            <summary>
            Gets a value indicating whether this instance is node.
            </summary>
            <value><c>true</c> if this instance is node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MNode.HasSuccessors">
            <summary>
            Gets a value indicating whether this instance has successors.
            </summary>
            <value>
            	<c>true</c> if this instance has successors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MNode.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MNode.Value">
            <summary>
            Gets the node value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.#ctor(System.Object,Siriona.Library.Data.MGraph.MNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MList"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="children">The children.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.#ctor(System.Object,System.Collections.Generic.IEnumerable{Siriona.Library.Data.MGraph.MNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MList"/> class.
            </summary>
            <param name="label">The label.</param>
            <param name="children">The children.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.AddLabel(System.Object)">
            <summary>
            Adds the label.
            </summary>
            <param name="newLabel">The new label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.Successor(System.Object)">
            <summary>
            Get the successor with specified label.
            </summary>
            <param name="successorLabel">The successor label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.Successors">
            <summary>
            Get the node successors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.Descendant(System.Object)">
            <summary>
            Get the descendant with specified label.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.Descendants(System.Object)">
            <summary>
            Get the descendants with specified label.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.DescendantsIterator(System.Object)">
            <summary>
            Descendantses the iterator.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.Descendants">
            <summary>
            Descendantses the node descendants.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.ToMGraph(Siriona.Library.Data.MGraph.MWriter)">
            <summary>
            Serializes the graph to specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MList.DescendantsIterator">
            <summary>
            Descendantses the iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MList.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MList.IsNode">
            <summary>
            Gets a value indicating whether this instance is node.
            </summary>
            <value><c>true</c> if this instance is node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MList.HasSuccessors">
            <summary>
            Gets a value indicating whether this instance has successors.
            </summary>
            <value>
            	<c>true</c> if this instance has successors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MNodeList">
            <summary>
            Represents a list of MNodes.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.MGraph.MNodeList.Empty">
            <summary>
            Gets an empty list.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNodeList.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Data.MGraph.MNode})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MNodeList"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNodeList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MNodeList.ToArray">
            <summary>
            Converts to array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MNodeList.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MTokenizer">
            <summary>
            The tokenizer for the MGraph grammar.
            </summary>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Tokenizer">
             A character stream tokenizer. This class groups the characters read
             from the stream together into tokens ("words"). The grouping is
             controlled by token patterns that contain either a fixed string to
             search for, or a regular expression. If the stream of characters
             don't match any of the token patterns, a parse exception is thrown.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Tokenizer.stringDfaMatcher">
            The string DFA token matcher. This token matcher uses a
            deterministic finite automaton (DFA) implementation and is
            used for all string token patterns. It has a slight speed
            advantage to the NFA implementation, but should be equivalent
            on memory usage.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Tokenizer.nfaMatcher">
            The regular expression NFA token matcher. This token matcher
            uses a non-deterministic finite automaton (DFA) implementation
            and is used for most regular expression token patterns. It is
            somewhat faster than the other recursive regular expression
            implementations available, but doesn't support the full
            syntax. It conserves memory by using a fast queue instead of
            the stack during processing (no stack overflow).
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Tokenizer.regExpMatcher">
            The regular expression token matcher. This token matcher is
            used for complex regular expressions, but should be avoided
            due to possibly degraded speed and memory usage compared to
            the automaton implementations.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Tokenizer.buffer">
            The character stream reader buffer.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Tokenizer.lastMatch">
            The last token match found.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.#ctor">
             Creates a new case-sensitive tokenizer for the specified
             input stream.
            
             @param input          the input stream to read
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.#ctor(System.Boolean)">
             Creates a new tokenizer for the specified input stream. The
             tokenizer can be set to process tokens either in
             case-sensitive or case-insensitive mode.
            
             @param input          the input stream to read
             @param ignoreCase     the character case ignore flag
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.GetPatternDescription(System.Int32)">
             Returns a description of the token pattern with the
             specified id.
            
             @param id             the token pattern id
            
             @return the token pattern description, or
                     null if not present
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.GetCurrentLine">
             Returns the current line number. This number will be the line
             number of the next token returned.
            
             @return the current line number
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.GetCurrentColumn">
             Returns the current column number. This number will be the
             column number of the next token returned.
            
             @return the current column number
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.AddPattern(Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a new token pattern to the tokenizer. The pattern will be
             added last in the list, choosing a previous token pattern in
             case two matches the same string.
            
             @param pattern        the pattern to add
            
             @throws ParserCreationException if the pattern couldn't be
                         added to the tokenizer
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.Reset(System.IO.TextReader)">
             Resets this tokenizer for usage with another input stream.
             This method will clear all the internal state in the
             tokenizer as well as close the previous input stream. It
             is normally called in order to reuse a parser and
             tokenizer pair with multiple input streams, thereby
             avoiding the cost of re-analyzing the grammar structures.
            
             @param input          the new input stream to read
            
             @see Parser#reset(Reader)
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.Next">
             Finds the next token on the stream. This method will return
             null when end of file has been reached. It will return a
             parse exception if no token matched the input stream, or if
             a token pattern with the error flag set matched. Any tokens
             matching a token pattern with the ignore flag set will be
             silently ignored and the next token will be returned.
            
             @return the next token found, or
                     null if end of file was encountered
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.NextToken">
             Finds the next token on the stream. This method will return
             null when end of file has been reached. It will return a
             parse exception if no token matched the input stream.
            
             @return the next token found, or
                     null if end of file was encountered
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.NewToken(Siriona.Library.Text.Parsing.TokenPattern,System.String,System.Int32,System.Int32)">
             Factory method for creating a new token. This method can be
             overridden to provide other token implementations than the
             default one.
            
             @param pattern        the token pattern
             @param image          the token image (i.e. characters)
             @param line           the line number of the first character
             @param column         the column number of the first character
            
             @return the token created
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer.ToString">
             Returns a string representation of this object. The returned
             string will contain the details of all the token patterns
             contained in this tokenizer.
            
             @return a detailed string representation
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MTokenizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MTokenizer"/> class.
            </summary>
            Creates a new case-sensitive tokenizer for the specified
            input stream.
            @param input          the input stream to read
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MValue">
            <summary>
            Represents a value in a MGraph.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.Successor(System.Object)">
            <summary>
            Get the successor with specified label.
            </summary>
            <param name="successorLabel">The successor label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.Successors">
            <summary>
            Get the node successors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.Descendant(System.Object)">
            <summary>
            Get the descendant with specified label.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.Descendants(System.Object)">
            <summary>
            Get the descendants with specified label.
            </summary>
            <param name="descendantLabel">The descendant label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.Descendants">
            <summary>
            Descendantses the node descendants.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.ToMGraph(Siriona.Library.Data.MGraph.MWriter)">
            <summary>
            Serializes the graph to specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MValue.Value">
            <summary>
            Gets the node value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MValue.IsNode">
            <summary>
            Gets a value indicating whether this instance is node.
            </summary>
            <value><c>true</c> if this instance is node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MValue.HasSuccessors">
            <summary>
            Gets a value indicating whether this instance has successors.
            </summary>
            <value>
            	<c>true</c> if this instance has successors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.MGraph.MValue.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Siriona.Library.Data.MGraph.MWriter">
            <summary>
            Respresents a writer for M graphs.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MGraph.MWriter"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.StartMList(System.Object)">
            <summary>
            Starts a M list.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.EndMList">
            <summary>
            Ends a M list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.WriteValue(System.Object)">
            <summary>
            Writes the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MGraph.MWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Data.ReflectionDataParameterInfo">
            <summary>
            Represents a <see cref="T:Siriona.Library.Data.DataMethodInfo"/> parameter obtained through reflection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.ReflectionDataParameterInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.ReflectionDataParameterInfo"/> class.
            </summary>
            <param name="parameterInfo">The parameter info.</param>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataParameterInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataParameterInfo.IsIn">
            <summary>
            Gets a value indicating whether this instance is in.
            </summary>
            <value><c>true</c> if this instance is in; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataParameterInfo.IsOut">
            <summary>
            Gets a value indicating whether this instance is out.
            </summary>
            <value><c>true</c> if this instance is out; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataParameterInfo.IsSensitive">
            <summary>
            Gets a value indicating whether this parameter may contain sensitive data.
            </summary>
            <value>
            	<c>true</c> if this parameters is sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.ReflectionDataParameterInfo.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="T:Siriona.Library.Data.LegacyTemporalCommandCall">
            <summary>
            Provides fluent typing for late temporal command calls.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.LegacyTemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.LegacyTemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{Siriona.Library.Period},Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="periodBuilder">The period builder.</param>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.SearchResult`1">
            <summary>
            Represents a result of a entity set search.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Data.SearchResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SearchResult`1"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.SearchResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Builds entities with specified builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.SqlDateTimeHepler">
            <summary>
            Use SqlDateTimeHelper instead
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHepler.ToSqlDate(System.DateTime)">
            <summary>
            Use SqlDateTimeHelper.ToSqlDate instead.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHepler.FromSqlDate(System.DateTime)">
            <summary>
            Use SqlDateTimeHelper.FromSqlDate instead.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHepler.ToSqlDate(Siriona.Library.Period)">
            <summary>
            Use SqlDateTimeHelper.ToSqlDate instead.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHepler.FromSqlDate(Siriona.Library.Period)">
            <summary>
            Use SqlDateTimeHelper.FromSqlDate instead.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.SqlDateTimeHelper">
            <summary>
            Provides methods to work with Sql date time limits.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHelper.ToSqlDate(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to a equivalent that fits Sql date time limits.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHelper.FromSqlDate(System.DateTime)">
            <summary>
            Converts a sql datetime to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHelper.ToSqlDate(Siriona.Library.Period)">
            <summary>
            Converts a <see cref="T:Siriona.Library.Period"/> to a equivalent that fits Sql date time limits.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDateTimeHelper.FromSqlDate(Siriona.Library.Period)">
            <summary>
            Converts a sql datetime period to a <see cref="T:Siriona.Library.Period"/> value.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.TemporalCommandCall">
            <summary>
            Provides fluent typing for late temporal command calls.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.TemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.TemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{Siriona.Library.Period},Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="periodBuilder">The period builder.</param>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.ITemporal`1">
            <summary>
            Represents a value that change in time.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Siriona.Library.Temporality.ITemporal`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the the temporary values within the specified period.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Data.LegacyWeekTemporalCommandCall">
            <summary>
            Provides fluent typing for late week temporal command calls.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.LegacyWeekTemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.LegacyWeekTemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{Siriona.Library.Collections.ObjectModel.WeekPeriod},Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="periodBuilder">The period builder.</param>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.WeekTemporalCommandCall">
            <summary>
            Provides fluent typing for late week temporal command calls.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.WeekTemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.WeekTemporalCommandCall.With``1(Siriona.Library.Data.IDataBuilder{Siriona.Library.Collections.ObjectModel.WeekPeriod},Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Reads results with specified <see cref="T:Siriona.Library.Data.IDataBuilder`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="periodBuilder">The period builder.</param>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.ChangeTracker">
            <summary>
            Implements the <see cref="T:Siriona.Library.EntityModel.IChangeTracker"/> interface.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.IChangeTracker">
            <summary>
            Represents a change tracker.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Add``1(``0)">
            <summary>
            Adds the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Update``1(``0)">
            <summary>
            Updates the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.GetAddedEntities``1">
            <summary>
            Gets the added entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.GetUpdatedEntities``1">
            <summary>
            Gets the updated entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.GetDeletedEntities``1">
            <summary>
            Gets the deleted entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Track``1(``0)">
            <summary>
            Tracks the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Track(System.Type,System.Object)">
            <summary>
            Tracks the specified entity.
            </summary>
            <param name="type">The type.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Untrack``1(``0)">
            <summary>
            Untracks the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IChangeTracker.Forget``1(``0)">
            <summary>
            Forgets the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Add``1(``0)">
            <summary>
            Adds the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Update``1(``0)">
            <summary>
            Updates the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Update(System.Type,System.Object)">
            <summary>
            Updates the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.GetAddedEntities``1">
            <summary>
            Gets the added entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.GetUpdatedEntities``1">
            <summary>
            Gets the updated entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.GetDeletedEntities``1">
            <summary>
            Gets the deleted entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Track``1(``0)">
            <summary>
            Tracks the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Track(System.Type,System.Object)">
            <summary>
            Tracks the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Untrack``1(``0)">
            <summary>
            Untracks the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.Forget``1(``0)">
            <summary>
            Forgets the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.GetTracker``1">
            <summary>
            Gets the tracker.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.CreateCache(System.Type,Siriona.Library.EntityModel.Metadata.KeyManager)">
            <summary>
            Creates the cache.
            </summary>
            <param name="type">The type.</param>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.ChangeTracker.GetKeyManager(System.Type)">
            <summary>
            Gets the key manager.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.FieldMapping">
            <summary>
            Represents a field mapping
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.FieldMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.FieldMapping"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="dataFieldName">Name of the data field.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.FieldMapping.CreateBuider">
            <summary>
            Creates the buider.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.FieldMapping.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.FieldMapping.DataFieldName">
            <summary>
            Gets the name of the data field.
            </summary>
            <value>The name of the data field.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.DataList`1">
            <summary>
            Represents a data list that is retrived from a delayloaded enumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.DataList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.DataList`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.DataList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.DataList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.DataList">
            <summary>
            Provides a factory method for the <see cref="T:Siriona.Library.EntityModel.DataList`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.DataList.From``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new <see cref="T:Siriona.Library.EntityModel.DataList`1"/> from source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.DataSession">
            <summary>
            Represents a data session.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.IDataSession">
            <summary>
            Represents a data session.
            </summary>
        </member>
        <member name="P:Siriona.Library.EntityModel.IDataSession.IdentityManager">
            <summary>
            Gets the identity manager.
            </summary>
            <value>The identity manager.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.IDataSession.DataMethodProvider">
            <summary>
            Gets the data method provider.
            </summary>
            <value>The data method provider.</value>
        </member>
        <member name="M:Siriona.Library.EntityModel.DataSession.#ctor(Siriona.Library.Data.IDataMethodProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.DataSession"/> class.
            </summary>
            <param name="dataMethodProvider">The data method provider.</param>
        </member>
        <member name="P:Siriona.Library.EntityModel.DataSession.IdentityManager">
            <summary>
            Gets the identity manager.
            </summary>
            <value>The identity manager.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.DataSession.DataMethodProvider">
            <summary>
            Gets the data method provider.
            </summary>
            <value>The data method provider.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntityChangeTracker">
            <summary>
            Represents an entity change tracker;
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.#ctor(Siriona.Library.EntityModel.IdentityCache,Siriona.Library.EntityModel.IdentityCache,Siriona.Library.EntityModel.IdentityCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntityChangeTracker"/> class.
            </summary>
            <param name="addedEntities">The added entities.</param>
            <param name="updatedEntities">The updated entities.</param>
            <param name="deletedEntities">The deleted entities.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.Add(System.Object)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.Update(System.Object)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.Delete(System.Object)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.GetAddedEntities``1">
            <summary>
            Gets the added entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.GetUpdatedEntities``1">
            <summary>
            Gets the updated entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.GetDeletedEntities``1">
            <summary>
            Gets the deleted entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityChangeTracker.Forget(System.Object)">
            <summary>
            Forgets the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntityDataSpecification`1">
            <summary>
            Implements the <see cref="T:Siriona.Library.EntityModel.IEntityDataSpecification`1"/> interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.EntityModel.IEntityDataSpecification`1">
            <summary>
            Reprensents a specification that can be matched against a data source.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.EntityModel.IEntitySpecification`1">
            <summary>
            Represetns a specification for a specific entity type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntitySpecification`1.IsMatch(`0)">
            <summary>
            Determines whether the specified entity is match.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityDataSpecification`1.GetMatchs">
            <summary>
            Gets the matchs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.IEntityDataSpecification`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound to a data source.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityDataSpecification`1.#ctor(System.Boolean,System.Predicate{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntityDataSpecification`1"/> class.
            </summary>
            <param name="isBound">if set to <c>true</c> [is bound].</param>
            <param name="isMatch">The is match.</param>
            <param name="matches">The matches.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityDataSpecification`1.IsMatch(`0)">
            <summary>
            Determines whether the specified entity is match.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityDataSpecification`1.GetMatchs">
            <summary>
            Gets the matchs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntityDataSpecification`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound to a data source.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySetChangedEventArgs`1">
            <summary>
            Reprents the argument of the <see cref="T:Siriona.Library.EntityModel.EntitySetChangedEventHandler`1"/> event.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySetChangedEventArgs`1.#ctor(`0,Siriona.Library.EntityModel.EntitySetChangeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntitySetChangedEventArgs`1"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySetChangedEventArgs`1.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySetChangedEventArgs`1.ChangeType">
            <summary>
            Gets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySetChangedEventHandler`1">
            <summary>
            Represents a method callend when an <see cref="T:Siriona.Library.EntityModel.EntitySet`1"/> changes
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySetChangeType">
            <summary>
            Indicates the type of change in an <see cref="T:Siriona.Library.EntityModel.EntitySet`1"/>
            </summary>
        </member>
        <member name="F:Siriona.Library.EntityModel.EntitySetChangeType.ItemAdded">
            <summary>
            An item has been added.
            </summary>
        </member>
        <member name="F:Siriona.Library.EntityModel.EntitySetChangeType.ItemRemoved">
            <summary>
            An item has been removed.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySetSource">
            <summary>
            Represents the source of an <see cref="T:Siriona.Library.EntityModel.EntitySet`2"/>
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySetSource.From``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Creates an EntitySet.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <param name="source">The source.</param>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySetSource.Empty``2(``1)">
            <summary>
            Creates an empty EntitySet.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <param name="search">The search.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySetSource`2">
            <summary>
            Represents the source of an <see cref="T:Siriona.Library.EntityModel.EntitySet`2"/>
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TSearch">The type of the search.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySetSource`2.#ctor(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntitySetSource`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="search">The search.</param>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySetSource`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySetSource`2.Search">
            <summary>
            Gets the search.
            </summary>
            <value>The search.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntityTracker">
            <summary>
            Implements the <see cref="T:Siriona.Library.EntityModel.IEntityTracker"/> interface.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.IEntityTracker">
            <summary>
            Represents a service that track Entity identity and changes.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.Add``1(``0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.Attach``1(``0)">
            <summary>
            Tracks the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.Track``1(System.Action{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tracks the sub entities of specified type.
            </summary>
            <typeparam name="TSubEntity">The type of the sub entity.</typeparam>
            <param name="add">The method to use when adding a sub entity.</param>
            <param name="update">The method to use when updating a sub entity.</param>
            <param name="delete">The method to use when deleting a sub entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.InsertLookup``1(``0)">
            <summary>
            Inserts the lookup.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.Find``1(System.Object[])">
            <summary>
            Finds an entity using specified key values.
            </summary>
            <param name="keyValues">The key values.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IEntityTracker.SubmitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.#ctor(Siriona.Library.EntityModel.IIdentityManager,Siriona.Library.EntityModel.IChangeTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntityTracker"/> class.
            </summary>
            <param name="identityManager">The identity manager.</param>
            <param name="changeTracker">The change tracker.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.Find``1(System.Object[])">
            <summary>
            Finds an entity using specified key values.
            </summary>
            <param name="keyValues">The key values.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.Add``1(``0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.InsertLookup``1(``0)">
            <summary>
            Inserts the lookup.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="entity">The entity.</param>
            <returns>The lookup.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.Attach``1(``0)">
            <summary>
            Tracks the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.Attach``1(``0,System.Boolean)">
            <summary>
            Tracks the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity.</param>
            <param name="deep">if set to <c>true</c> [deep].</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.TrackEntitySet(System.Type,System.Object,Siriona.Library.EntityModel.Metadata.EntitySetProperty,System.Boolean)">
            <summary>
            Tracks the entity set.
            </summary>
            <param name="type">The type.</param>
            <param name="entity">The entity.</param>
            <param name="property">The property.</param>
            <param name="deep">if set to <c>true</c> [deep].</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.Delete``1(``0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.UntrackEntitySet``1(``0,Siriona.Library.EntityModel.Metadata.EntitySetProperty)">
            <summary>
            Untracks the entity set.
            </summary>
            <param name="entity">The entity.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.Track``1(System.Action{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tracks the sub entities of specified type.
            </summary>
            <typeparam name="TSubEntity">The type of the sub entity.</typeparam>
            <param name="add">The method to use when adding a sub entity.</param>
            <param name="update">The method to use when updating a sub entity.</param>
            <param name="delete">The method to use when deleting a sub entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntityTracker.SubmitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.IEntitySet`1">
            <summary>
            Represents a collection of entities.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="E:Siriona.Library.EntityModel.IEntitySet`1.EntitySetChanged">
            <summary>
            Occurs when the entity set changed.
            </summary>
        </member>
        <member name="P:Siriona.Library.EntityModel.IEntitySet`1.InMemoryEntities">
            <summary>
            Gets the in memory entities.
            </summary>
            <value>The in memory entities.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.IRepository`2">
            <summary>
            Represents a basic generic repository.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.IRepository`2.SubmitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
        <member name="P:Siriona.Library.EntityModel.IRepository`2.Item(`0)">
            <summary>
            Gets the entity with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.EntityModel.ISearch`1">
            <summary>
            Indicates that interface is a search for specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.EntityModel.ISingleEntityDataSpecification`1">
            <summary>
            Represents a specification that should be matched by a single entity.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.ISingleEntityDataSpecification`1.GetMatch">
            <summary>
            Gets the match.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.IUnitOfWork">
            <summary>
            Represents a way to commit the current unit of work.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.IUnitOfWork.Commit">
            <summary>
            Commits the changes to the databas.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySet`1">
            <summary>
            Provides a base class fo entity lists.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntitySet`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntitySet`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="onAdd">The on add.</param>
            <param name="onRemove">The on remove.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Find(System.Predicate{`0},Siriona.Library.Func{`0})">
            <summary>
            Finds an entity using the specified predicate or specifi function.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="finder">The finder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.GetEntity(Siriona.Library.EntityModel.IEntitySpecification{`0})">
            <summary>
            Finds an entity using the specified predicate or specifi function.
            </summary>
            <param name="specification">The specification.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Find(System.Predicate{`0})">
            <summary>
            Finds an entity using the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Lookup(System.Predicate{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Finds an entity using the specified predicate or specifi function.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="finder">The finder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Lookup(Siriona.Library.EntityModel.IEntitySpecification{`0})">
            <summary>
            Finds an entity using the specified predicate or specifi function.
            </summary>
            <param name="specification">The specification.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Lookup(System.Predicate{`0})">
            <summary>
            Finds an entity using the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Add(`0)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.AddEntity(`0)">
            <summary>
            Adds the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Attach(`0)">
            <summary>
            Attaches the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.OnAdd(`0)">
            <summary>
            Called when an entity is added.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.RemoveEntity(`0)">
            <summary>
            Removes the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified entity].
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if [contains] [the specified entity]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type TEntity cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Remove(`0)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.IndexOf(`0)">
            <summary>
            Gets the index of specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`1.InvokeEntitySetChanged(`0,Siriona.Library.EntityModel.EntitySetChangeType)">
            <summary>
            Invokes the entity set changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.IsLoaded">
            <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
            <value><c>true</c> if this instance is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.InMemoryEntities">
            <summary>
            Gets the in memory entities.
            </summary>
            <value>The in memory entities.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`1.Item(System.Int32)">
            <summary>
            Gets or sets the entity at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="E:Siriona.Library.EntityModel.EntitySet`1.EntitySetChanged">
            <summary>
            Occurs when the entity set changed.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.EntitySet`2">
            <summary>
            Provides a base class fo entity lists with data source bound search.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TSearch">The type of the search.</typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.EntitySet`2.#ctor(Siriona.Library.EntityModel.EntitySetSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.EntitySet`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Siriona.Library.EntityModel.EntitySet`2.Search">
            <summary>
            Gets the search.
            </summary>
            <value>The search.</value>
        </member>
        <member name="T:Siriona.Library.Data.Excel.ExcelDocument">
            <summary>
            Represents an Excel document.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelDocument.#ctor(System.String,Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.Excel.ExcelDocument"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelDocument.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelDocument.Tables">
            <summary>
            Gets the tables.
            </summary>
            <value>The tables.</value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelDocument.Options">
            <summary>
            Gets the document options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelDocument.HasHeaderRow">
            <summary>
            Gets a value indicating whether this instance has header row.
            </summary>
            <value>
            	<c>true</c> if this instance has header row; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelDocument.TrimsColumnNames">
            <summary>
            Gets a value indicating whether this instance trims column names.
            </summary>
            <value><c>true</c> if [trim column names]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelDocument.Path">
            <summary>
            Gets the document path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Siriona.Library.Data.Excel.ExcelOptions">
            <summary>
            Defines the options used to load an <see cref="T:Siriona.Library.Data.Excel.ExcelDocument"/>.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.Excel.ExcelOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.Excel.ExcelOptions.HeaderRow">
            <summary>
            The document contains a header row.s
            </summary>
        </member>
        <member name="F:Siriona.Library.Data.Excel.ExcelOptions.TrimColumnNames">
            <summary>
            The spaces arround column names will be trimmed.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.Data.Excel.ExcelOptions"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.Count(Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.Contains(Siriona.Library.Data.Excel.ExcelOptions,Siriona.Library.Data.Excel.ExcelOptions[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.AddIf(Siriona.Library.Data.Excel.ExcelOptions,System.Boolean,Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.RemoveIf(Siriona.Library.Data.Excel.ExcelOptions,System.Boolean,Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.Add(Siriona.Library.Data.Excel.ExcelOptions,Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.Remove(Siriona.Library.Data.Excel.ExcelOptions,Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelOptionsExtensionMethods.Differences(Siriona.Library.Data.Excel.ExcelOptions,Siriona.Library.Data.Excel.ExcelOptions)">
            <summary>
            Retrieves differences between two sets of flags.
            </summary>
            <param name="currentFlags">The current flags.</param>
            <param name="previousFlags">The previous flags.</param>
            <returns>The added and removed flags.</returns>
        </member>
        <member name="T:Siriona.Library.Data.Excel.ExcelRow">
            <summary>
            Represents a row in a <see cref="T:Siriona.Library.Data.Excel.ExcelTable"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelRow.#ctor(Siriona.Library.Data.Excel.ExcelReader,Siriona.Library.Data.Excel.ExcelTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.Excel.ExcelRow"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="table">The table.</param>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelRow.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified column.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelRow.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified column.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelRow.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Siriona.Library.Data.Excel.ExcelTable">
            <summary>
            Represents a Excel table.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelTable.#ctor(Siriona.Library.Data.Excel.ExcelDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.Excel.ExcelTable"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Siriona.Library.Data.Excel.ExcelTable.GetColumnNames">
            <summary>
            Gets the column names.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelTable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelTable.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Siriona.Library.Data.Excel.ExcelTable.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="T:Siriona.Library.Data.FirstOrDefaultResult">
            <summary>
            Represents the first result of a command if any.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.UniqueResult">
            <summary>
            Provides a base class for data result containing a unique object.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.UniqueResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult.With``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult.With``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult.Late">
            <summary>
            Make the result of this data access late bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.FirstOrDefaultResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult.With``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult.With``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.FirstOrDefaultResult`1">
            <summary>
            Represents the first result of a command if any.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.UniqueResult`1">
            <summary>
            Provides a base class for data result containing a unique object.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.UniqueResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult`1.With(Siriona.Library.Func{System.Data.IDataRecord,`0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult`1.With(Siriona.Library.Data.IAggregateBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.UniqueResult`1.Late">
            <summary>
            Make the result of this data access late bound.
            </summary>
            <returns>The late bound object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.FirstOrDefaultResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult`1.With(Siriona.Library.Func{System.Data.IDataRecord,`0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstOrDefaultResult`1.With(Siriona.Library.Data.IAggregateBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.FirstResult">
            <summary>
            Represents the first result.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.FirstResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult.With``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult.With``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.FirstResult`1">
            <summary>
            Represents the first result.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.FirstResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult`1.With(Siriona.Library.Func{System.Data.IDataRecord,`0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.FirstResult`1.With(Siriona.Library.Data.IAggregateBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.IDataBuilder`2">
            <summary>
            Represents a builder creating instances of a specified type from a <see cref="T:System.Data.IDataRecord"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:Siriona.Library.Data.IDataBuilder`2.Build(System.Data.IDataRecord,`1)">
            <summary>
            Builds an instance from the specified record.
            </summary>
            <param name="record">The record.</param>
            <param name="context">The context.</param>
            <returns>The build data.</returns>
        </member>
        <member name="T:Siriona.Library.Data.IDataValue">
            <summary>
            Provides an access to an underlying value.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.IDataValue.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Data.IDataValue`1">
            <summary>
            Provides an access to an underlying value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Siriona.Library.Data.IDataValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Data.DataValue">
            <summary>
            Provides methods to manage <see cref="T:Siriona.Library.Data.IDataValue"/> objects.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.DataValue.GetUnderlyingType(System.Type)">
            <summary>
            Gets the underlying type of the data value.
            </summary>
            <param name="dataValueType">Type of the data value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValue.GetActivator``2">
            <summary>
            Creates the specified value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.DataValue.GetConverter(System.Type)">
            <summary>
            Gets the data value converter.
            </summary>
            <param name="dataValueType">Type of the data value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EntityModel.IdentityKeyAttribute">
            <summary>
            Indicates that a property represents the identity key of an entity.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.IdentityManager">
            <summary>
            Implements the <see cref="T:Siriona.Library.EntityModel.IIdentityManager"/> interface.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.IIdentityManager">
            <summary>
            Provides entity identity.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.IIdentityManager.Find``1(System.Object[])">
            <summary>
            Finds an entity using specified key values.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="keyValues">The key values.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IIdentityManager.FindLike``1(``0)">
            <summary>
            Finds an entity that has the same key that specified instance or <c>null</c>.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="instance">The instance.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IIdentityManager.InsertLookup``1(``0)">
            <summary>
            Inserts the entity instance the entity has not yet been added.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IIdentityManager.RemoveLike``1(``0)">
            <summary>
            Removes the entity that has the same key that specified instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IIdentityManager.GetEntities``1">
            <summary>
            Gets cached entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IIdentityManager.Remove``1(System.Predicate{``0})">
            <summary>
            Removes entities that satisfy the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.Find``1(System.Object[])">
            <summary>
            Finds an entity using specified key values.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="keyValues">The key values.</param>
            <returns>
            The entity or <c>null</c> if the entity could not be found.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.FindLike``1(``0)">
            <summary>
            Finds an entity that has the same key that specified instance or <c>null</c>.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="instance">The instance.</param>
            <returns>
            The entity or <c>null</c> if the entity could not be found.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.InsertLookup``1(``0)">
            <summary>
            Inserts the entity instance the entity has not yet been added.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.RemoveLike``1(``0)">
            <summary>
            Removes the entity that has the same key that specified instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.GetEntities``1">
            <summary>
            Gets cached entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.Remove``1(System.Predicate{``0})">
            <summary>
            Removes entities that satisfy the specified predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.GetCache``1">
            <summary>
            Gets the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.IdentityManager.GetKeyManager``1">
            <summary>
            Gets the key manager.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Data.IUnitOfWork">
            <summary>
            Represents a unit of work on data.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.IUnitOfWork.IdentityManager">
            <summary>
            Gets the identity manager.
            </summary>
            <value>The identity manager.</value>
        </member>
        <member name="T:Siriona.Library.Data.IUnitOfWorkProvider">
            <summary>
            Provides unit of work management.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.IUnitOfWorkProvider.Create">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Data.IUnitOfWork"/>.
            </summary>
            <returns>The new unit of work.</returns>
        </member>
        <member name="M:Siriona.Library.Data.IUnitOfWorkProvider.Close(Siriona.Library.Data.IUnitOfWork)">
            <summary>
            Closes the specified unit of work.
            </summary>
            <param name="unitOfWork">The unit of work.</param>
        </member>
        <member name="P:Siriona.Library.Data.IUnitOfWorkProvider.Current">
            <summary>
            Gets the current <see cref="T:Siriona.Library.Data.IUnitOfWork"/>.
            </summary>
            <value>The current <see cref="T:Siriona.Library.Data.IUnitOfWork"/>.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.IUnitOfWorkRepository">
            <summary>
            Represents a repository that should be used in a unit of work.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.IUnitOfWorkRepository.SubmitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.MultipleResult">
            <summary>
            Represents the multiple results of a command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MultipleResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult.With``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Maps the data results to specified type using a reader.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read objects.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data results to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read objects.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult.With``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Maps the data results to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read objects.</returns>
        </member>
        <member name="T:Siriona.Library.Data.MultipleResult`1">
            <summary>
            Represents the multiple results of a command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.MultipleResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult`1.With(Siriona.Library.Func{System.Data.IDataRecord,`0})">
            <summary>
            Maps the data results to specified type using a reader.
            </summary>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read objects.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data results to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read objects.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MultipleResult`1.With(Siriona.Library.Data.IAggregateBuilder{`0})">
            <summary>
            Maps the data results to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read objects.</returns>
        </member>
        <member name="T:Siriona.Library.Data.MySqlDataAccessProvider">
            <summary>
            Provides an implementatioin of the <see cref="T:Siriona.Library.Data.DataAccessProvider"/> for the MySql data store.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.MySqlDataAccessProvider.CreateCommand">
            <summary>
            Creates a new Command object.
            </summary>
            <returns>The <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MySqlDataAccessProvider.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates a new DataAdapter object.
            </summary>
            <param name="command">The select command.</param>
            <returns>The <see cref="T:System.Data.Common.DbDataAdapter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MySqlDataAccessProvider.CreateConnection(System.String)">
            <summary>
            Creates a new Connection object.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MySqlDataAccessProvider.CreateParameter(Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter"/> object corresponding to current attibutes and with specified value.
            </summary>
            <param name="parameterDefinition">The attribute that defins the paramter.</param>
            <returns>The <see cref="T:System.Data.Common.DbParameter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.MySqlDataAccessProvider.SetParameterValue(System.Data.Common.DbParameter,System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Siriona.Library.Data.NonDataParameterAttribute">
            <summary>
            Indicates that method parameter does not appear in stored procedure parameters.
            </summary>
        </member>
        <member name="T:Siriona.Library.Data.Parameters">
            <summary>
            Represents the return value of the stored procedure parameters.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Parameters.#ctor(Siriona.Library.Data.DataAccessBase,System.Data.Common.DbCommand,Siriona.Library.Data.DataAccessProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.Parameters"/> class.
            </summary>
            <param name="dataAccess">The data access.</param>
            <param name="command">The command.</param>
            <param name="dataAccessProvider">The data access provider.</param>
        </member>
        <member name="M:Siriona.Library.Data.Parameters.Close">
            <summary>
            Closes the data reader.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.Parameters.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.Parameters.Item(System.String)">
            <summary>
            Gets the value contained in the column with the specified name.
            </summary>
            <value>The value contained in the specified column</value>
        </member>
        <member name="P:Siriona.Library.Data.Parameters.Result">
            <summary>
            Gets the result of the stored procedure.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Siriona.Library.Data.Parameters.NoResult">
            <summary>
            Gets a value indicating whether the stored procedure returns a result.
            </summary>
            <value><c>true</c> if no result where returned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Data.Parameters.ReturnValue">
            <summary>
            Gets the return value as an integer.
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:Siriona.Library.Data.SingleOrDefaultResult">
            <summary>
            Represents the single result of a command if any.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SingleOrDefaultResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult.With``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult.With``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.SingleOrDefaultResult`1">
            <summary>
            Represents the single result of a command if any.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SingleOrDefaultResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult`1.With(Siriona.Library.Func{System.Data.IDataRecord,`0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleOrDefaultResult`1.With(Siriona.Library.Data.IAggregateBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.SingleResult">
            <summary>
            Represents the single result of a command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SingleResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult.With``1(Siriona.Library.Func{System.Data.IDataRecord,``0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult.With``1(Siriona.Library.Data.IDataBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult.With``1(Siriona.Library.Data.IAggregateBuilder{``0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.SingleResult`1">
            <summary>
            Represents the single result of a command.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult`1.#ctor(Siriona.Library.Data.DataCommandCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SingleResult"/> class.
            </summary>
            <param name="call">The call.</param>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult`1.With(Siriona.Library.Func{System.Data.IDataRecord,`0})">
            <summary>
            Maps the data result to specified type using a reader.
            </summary>
            <param name="reader">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult`1.With(Siriona.Library.Data.IDataBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SingleResult`1.With(Siriona.Library.Data.IAggregateBuilder{`0})">
            <summary>
            Maps the data result to specified type using a builder.
            </summary>
            <param name="builder">The reader to perform mapping.</param>
            <returns>The read object.</returns>
        </member>
        <member name="T:Siriona.Library.Data.SqlDataAccessProvider">
            <summary>
            Provides an implementatioin of the <see cref="T:Siriona.Library.Data.DataAccessProvider"/> for the SqlServer client data store.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SqlDataAccessProvider"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.SqlDataAccessProvider"/> class.
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="failoverPartnerName">Name of the failover partner.</param>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.CreateCommand">
            <summary>
            Creates a new Command object.
            </summary>
            <returns>The <see cref="T:System.Data.Common.DbCommand"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates a new DataAdapter object.
            </summary>
            <param name="command">The select command.</param>
            <returns>The <see cref="T:System.Data.Common.DbDataAdapter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.CreateConnection(System.String)">
            <summary>
            Creates a new Connection object.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.CreateParameter(Siriona.Library.Data.DataParameterAttribute)">
            <summary>
            Creates a <see cref="T:System.Data.Common.DbParameter"/> object corresponding to current attibutes and with specified value.
            </summary>
            <param name="parameterDefinition">The attribute that defins the paramter.</param>
            <returns>The <see cref="T:System.Data.Common.DbParameter"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.GetParameterName(System.String)">
            <summary>
            Gets the name of the parameter.
            </summary>
            <param name="baseName">Name of the base.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Data.SqlDataAccessProvider.GetConnectionString(System.String)">
            <summary>
            Gets the connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The connection string.</returns>
        </member>
        <member name="T:Siriona.Library.Data.UnitOfWork">
            <summary>
            Represents a unit of work to manage entities identity.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.UnitOfWork.#ctor(Siriona.Library.Data.IUnitOfWorkProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Data.UnitOfWork"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Siriona.Library.Data.UnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Siriona.Library.Data.UnitOfWork.IdentityManager">
            <summary>
            Gets the identity manager.
            </summary>
            <value>The identity manager.</value>
        </member>
        <member name="T:Siriona.Library.Data.UnitOfWorkProvider">
            <summary>
            Provides unit of work management.
            </summary>
        </member>
        <member name="M:Siriona.Library.Data.UnitOfWorkProvider.Create">
            <summary>
            Creates a new unit of work.
            </summary>
            <returns>The new unit of work.</returns>
        </member>
        <member name="P:Siriona.Library.Data.UnitOfWorkProvider.Current">
            <summary>
            Gets the current unit of work.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:Siriona.Library.DateUtility">
            <summary>
            Provides utility function to work on dates.
            </summary>
        </member>
        <member name="M:Siriona.Library.DateUtility.GetDays(Siriona.Library.Period)">
            <summary>
            Gets the days of a period.
            </summary>
            <param name="period">The period.</param>
            <returns>The days.</returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.GetWeeks(Siriona.Library.Period,System.Boolean,System.Boolean)">
            <summary>
            Gets the weeks in a period.
            </summary>
            <param name="period">The period.</param>
            <param name="startsOnSunday">if set to <c>true</c>, week starts on sunday.</param>
            <param name="fullWeeksOnly">if set to <c>true</c>, only return weeks that are full included in the period.</param>
            <returns>The weeks.</returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.GetMonths(Siriona.Library.Period,System.Boolean)">
            <summary>
            Gets the months in a period.
            </summary>
            <param name="period">The period.</param>
            <param name="fullMonthsOnly">if set to <c>true</c>, only return months that are fully included in the period.</param>
            <returns>The months.</returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.GetYears(Siriona.Library.Period,System.Boolean)">
            <summary>
            Gets the years in a period.
            </summary>
            <param name="period">The period.</param>
            <param name="fullYearsOnly">if set to <c>true</c>, only return years that are fully included in the period.</param>
            <returns>The years.</returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.GetDayOfWeekIndex(System.DateTime,System.Boolean)">
            <summary>
            Gets the index of the day in the week.
            </summary>
            <param name="date">The utcDate.</param>
            <param name="startsOnSunday">if set to <c>true</c>, week starts on sunday.</param>
            <returns>The index of the day in the week, starting at <c>0</c>.</returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.IsSelected(Siriona.Library.Period,Siriona.Library.DaysOfWeek)">
            <summary>
            Determines whether the specified period is selected in the specified days.
            </summary>
            <param name="period">The period.</param>
            <param name="week">The week.</param>
            <returns>
            	<c>true</c> if the specified day is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.IsSelected(System.Collections.Generic.IEnumerable{System.DateTime},Siriona.Library.DaysOfWeek)">
            <summary>
            Determines whether the specified days are selected in the specified days.
            </summary>
            <param name="days">The days.</param>
            <param name="week">The week.</param>
            <returns>
            	<c>true</c> if the specified day is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.IsSelected(System.DateTime,Siriona.Library.DaysOfWeek)">
            <summary>
            Determines whether the specified day is selected in the specified days.
            </summary>
            <param name="day">The day.</param>
            <param name="week">The week.</param>
            <returns>
            	<c>true</c> if the specified day is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.IsSelected(System.DayOfWeek,Siriona.Library.DaysOfWeek)">
            <summary>
            Determines whether the specified day is selected in specified days.
            </summary>
            <param name="day">The day.</param>
            <param name="week">The week.</param>
            <returns>
            	<c>true</c> if the specified day is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.GetWeek(Siriona.Library.DaysOfWeek,System.DayOfWeek)">
            <summary>
            Gets the pattern of selected days in week.
            </summary>
            <param name="daysOfWeek">The days of week.</param>
            <param name="firstDay">The first day.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.DateUtility.ToLocalDate(System.DateTime,Siriona.Library.TimeZone)">
            <summary>
            Returns the utcDate (a datetime without time) indicating which night is on at given instant in given timezone.
            </summary>
            <param name="utcDate">The utc date to consider.</param>
            <param name="timeZone">The time zone in which local time is considered.</param>
            <returns></returns>
            <remarks>The night is considered to end a 02:00 localtime. This enable changing planning up to 2AM during the night.</remarks>
        </member>
        <member name="M:Siriona.Library.DateUtility.ToLocalNightDate(System.DateTime,System.TimeSpan,Siriona.Library.TimeZone)">
            <summary>
            Returns the utcDate (a datetime without time) indicating which night is on at given time.
            </summary>
            <param name="utcDate">The utc date to consider</param>
            <param name="endOfNight">The end of night time. Usually 2AM.</param>
            <param name="timeZone">The time zone in which local time is considered.</param>
            <returns></returns>
            <remarks>The night is considered to end a 02:00 localtime. This enable changing planning up to 2AM during the night.</remarks>
        </member>
        <member name="M:Siriona.Library.DateUtility.ToEndOfNextYear(System.DateTime)">
            <summary>
            Returns a period up to the end of next year.
            </summary>
            <param name="start">The start of the period.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.DaysOfWeekExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.DaysOfWeek"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.Count(Siriona.Library.DaysOfWeek)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.Contains(Siriona.Library.DaysOfWeek,Siriona.Library.DaysOfWeek[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.AddIf(Siriona.Library.DaysOfWeek,System.Boolean,Siriona.Library.DaysOfWeek)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.RemoveIf(Siriona.Library.DaysOfWeek,System.Boolean,Siriona.Library.DaysOfWeek)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.Add(Siriona.Library.DaysOfWeek,Siriona.Library.DaysOfWeek)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.Remove(Siriona.Library.DaysOfWeek,Siriona.Library.DaysOfWeek)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.ToDayOfWeeks(Siriona.Library.DaysOfWeek)">
            <summary>
            Converts a DaysOfWeek enum into an enumerable of DayOfWeek
            </summary>
            <param name="daysOfWeek">The DaysOfWeek.</param>
            <returns>The corresponding days (ordered Sunday to Saturday).</returns>
        </member>
        <member name="M:Siriona.Library.DaysOfWeekExtensionMethods.ToDaysOfWeek(System.Collections.Generic.IEnumerable{System.DayOfWeek})">
            <summary>
            Converts an enumerable of DayOfWeek into a DaysOfWeek
            </summary>
            <param name="dayOfWeeks">The list of days.</param>
            <returns>The corresponding DaysOfWeek.</returns>
        </member>
        <member name="T:Siriona.Library.DaysOfWeek">
            <summary>
            Defines days of week as flags.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.None">
            <summary>
            No day of the week is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Sunday">
            <summary>
            Sunday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Monday">
            <summary>
            Monday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Tuesday">
            <summary>
            Tuesday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Wednesday">
            <summary>
            Wednesday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Thursday">
            <summary>
            Thursday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Friday">
            <summary>
            Friday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.Saturday">
            <summary>
            Saturday is selected.
            </summary>
        </member>
        <member name="F:Siriona.Library.DaysOfWeek.All">
            <summary>
            All days are selected.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.AssertErrorWriter">
            <summary>
            Represents a debug error writer reporting errors as <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean)"/> alerts.
            </summary>
            <remarks>
            This error writer does not have custom configuration.
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.AssertErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="assert" type="Siriona.Library.Diagnostics.AssertErrorWriter, Siriona.Library" /&gt;
            &lt;/writers&gt;
            </code>
            </example>
        </member>
        <member name="T:Siriona.Library.Diagnostics.IErrorWriter">
            <summary>
            Represents the interface for error writers.
            </summary>
            <remarks>
            Implementers may inherit the <see cref="T:Siriona.Library.Diagnostics.XmlErrorWriter"/> abstract class if they want 
            to use the common XML error report format.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.Begin(System.Guid)">
            <summary>
            Begins an error report.
            </summary>
            <param name="reportId">The report identifier.</param>
            <remarks>
            <c>reportType</c> might be of <see cref="T:Siriona.Library.Diagnostics.ErrorEventType"/> type, but other values are allowed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.BeginSection(Siriona.Library.Diagnostics.ErrorWriterSection)">
            <summary>
            Begins a section with the given type.
            </summary>
            <param name="section">The section type.</param>
            <remarks>Any previously opened section must be closed before opening a new section.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.BeginPart(System.String)">
            <summary>
            Begins a part in a section.
            </summary>
            <param name="partName">Name of the part.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.EndPart">
            <summary>
            Ends the currently opened part.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.WriteConfiguration(System.String,System.String)">
            <summary>
            Writes a configuration information.
            </summary>
            <param name="name">Name of the configuration item.</param>
            <param name="value">The value of the configuration item.</param>
            <remarks>
            Calling this method in the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> or a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.EndSection">
            <summary>
            Ends an opened section.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.WriteMessage(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Writes a user-defined message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message</param>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.WriteException(System.Exception)">
            <summary>
            Writes information about a given exception.
            </summary>
            <param name="exception">The exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.WriteException(System.Exception,Siriona.Library.Collections.NameValueCollection{System.Object})">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionData">Additional data concerning the exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.BeginInnerException">
            <summary>
            Begins a new level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.EndInnerException">
            <summary>
            Leaves the current level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.End">
            <summary>
            Ends an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IErrorWriter.Cancel">
            <summary>
            Cancels an error report.
            </summary>
            <remarks>The <c>Cancel</c> method clears the <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> state without sending the report.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.Begin(System.Guid)">
            <summary>
            Begins an error report.
            </summary>
            <param name="reportId">The report identifier.</param>
            <remarks>
            	<c>ReportType</c> might be of <see cref="T:Siriona.Library.Diagnostics.ErrorEventType"/> type, but other values are allowed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.BeginSection(Siriona.Library.Diagnostics.ErrorWriterSection)">
            <summary>
            Begins a section with the given type.
            </summary>
            <param name="section">The section type.</param>
            <remarks>Any previously opened section must be closed before opening a new section.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.BeginPart(System.String)">
            <summary>
            Begins a part in a section.
            </summary>
            <param name="partName">Name of the part.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.EndPart">
            <summary>
            Ends the currently opened part.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.WriteConfiguration(System.String,System.String)">
            <summary>
            Writes a configuration information.
            </summary>
            <param name="name">Name of the configuration item.</param>
            <param name="value">The value of the configuration item.</param>
            <remarks>
            Calling this method in the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.EndSection">
            <summary>
            Ends an opened section.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.WriteMessage(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Writes a user-defined message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message</param>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.WriteException(System.Exception)">
            <summary>
            Writes information about a given exception.
            </summary>
            <param name="exception">The exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.WriteException(System.Exception,Siriona.Library.Collections.NameValueCollection{System.Object})">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionData">Additional data concerning the exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.BeginInnerException">
            <summary>
            Begins a new level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.EndInnerException">
            <summary>
            Leaves the current level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.End">
            <summary>
            Ends an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AssertErrorWriter.Cancel">
            <summary>
            Cancels an error report.
            </summary>
            <remarks>The <c>Cancel</c> method clears the <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> state without sending the report.</remarks>
        </member>
        <member name="T:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.Diagnostics.AutomaticErrorReportTypes"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods.Count(Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods.Contains(Siriona.Library.Diagnostics.AutomaticErrorReportTypes,Siriona.Library.Diagnostics.AutomaticErrorReportTypes[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods.AddIf(Siriona.Library.Diagnostics.AutomaticErrorReportTypes,System.Boolean,Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods.RemoveIf(Siriona.Library.Diagnostics.AutomaticErrorReportTypes,System.Boolean,Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods.Add(Siriona.Library.Diagnostics.AutomaticErrorReportTypes,Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.AutomaticErrorReportTypesExtensionMethods.Remove(Siriona.Library.Diagnostics.AutomaticErrorReportTypes,Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Siriona.Library.Diagnostics.AutomaticErrorReportTypes">
            <summary>
            Represents the various types of available automatic error reports.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.AutomaticErrorReportTypes.None">
            <summary>
            No automatic report.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.AutomaticErrorReportTypes.WindowsForms">
            <summary>
            Automatic report for Windows Forms applications.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.AutomaticErrorReportTypes.WebSite">
            <summary>
            Automatic report for ASP.Net web sites.
            </summary>
            <remarks>
            A <see cref="T:Siriona.Library.Diagnostics.ErrorReportModule"/> HTTP module must be configured in the
            <c>web.config</c> configuration file.
            </remarks>
        </member>
        <member name="F:Siriona.Library.Diagnostics.AutomaticErrorReportTypes.WebService">
            <summary>
            Automatic report for ASP.Net web services.
            </summary>
            <remarks>
            A <see cref="T:Siriona.Library.Diagnostics.ErrorReportSoapExtension"/> SOAP extension must be configured in the
            <c>web.config</c> configuration file.
            </remarks>
        </member>
        <member name="F:Siriona.Library.Diagnostics.AutomaticErrorReportTypes.All">
            <summary>
            All automatic reports.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.BugErrorEvent">
            <summary>
            Represents a bug error event.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorEvent">
            <summary>
            Represents an error event.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEvent.#ctor(Siriona.Library.Diagnostics.ErrorEventType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEvent"/> class.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEvent.#ctor(Siriona.Library.Diagnostics.ErrorEventType,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEvent"/> class.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorEvent.EventType">
            <summary>
            Gets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorEvent.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorEvent.Criticity">
            <summary>
            Gets the criticity.
            </summary>
            <value>The criticity.</value>
        </member>
        <member name="M:Siriona.Library.Diagnostics.BugErrorEvent.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.BugErrorEvent"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Siriona.Library.Diagnostics.BugErrorEvent.Exceptions">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.BypassExceptionConverterOutput">
            <summary>
            Represents a bypass exception converter output corresponding to the source exception.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.IExceptionConverterOutput">
            <summary>
            Represents the output of an <see cref="T:Siriona.Library.Diagnostics.ExceptionConverter"/>.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.IExceptionConverterOutput.IsConverted">
            <summary>
            Gets a value indicating whether this instance is converted.
            </summary>
            <value>
            	<c>true</c> if this instance is converted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.BypassExceptionConverterOutput.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.BypassExceptionConverterOutput.IsConverted">
            <summary>
            Gets a value indicating whether this instance is converted.
            </summary>
            <value>
            	<c>true</c> if this instance is converted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.BypassExceptionFilter">
            <summary>
            Represents an empty exception filter that reports any error.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.IExceptionFilter">
            <summary>
            Represents an exception filter.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.IExceptionFilter.IsReported(System.Exception)">
            <summary>
            Determines whether the specified exception must be reported.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the exception must be reported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.BypassExceptionFilter.IsReported(System.Exception)">
            <summary>
            Determines whether the specified exception must be reported.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the exception must be reported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ContextStakeHolder">
            <summary>
            Represents a dictionary user state
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.IContextStakeHolder">
            <summary>
            Represents a stakeholder of the current context.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.IContextStakeHolder.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.IContextStakeHolder.Identifiers">
            <summary>
            Gets a collection of values that uniquely identify the stakeholder.
            </summary>
            <value>The identifiers.</value>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ContextStakeHolder"/> class.
            </summary>
            <param name="displayName">The display name.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ContextStakeHolder"/> class.
            </summary>
            <param name="displayName">The display name.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.op_Inequality(Siriona.Library.Diagnostics.ContextStakeHolder,Siriona.Library.Diagnostics.ContextStakeHolder)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="contextStakeHolder1">The context stake holder1.</param>
            <param name="contextStakeHolder2">The context stake holder2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.op_Equality(Siriona.Library.Diagnostics.ContextStakeHolder,Siriona.Library.Diagnostics.ContextStakeHolder)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="contextStakeHolder1">The context stake holder1.</param>
            <param name="contextStakeHolder2">The context stake holder2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.System#IEquatable{Siriona#Library#Diagnostics#IContextStakeHolder}#Equals(Siriona.Library.Diagnostics.IContextStakeHolder)">
            <summary>
            Equalses the specified context stake holder.
            </summary>
            <param name="contextStakeHolder">The context stake holder.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.Equals(Siriona.Library.Diagnostics.ContextStakeHolder)">
            <summary>
            Compares the specified context stake holder for equality.
            </summary>
            <param name="contextStakeHolder">The context stake holder.</param>
            <returns><c>true</c> if the stakeholders are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ContextStakeHolder.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ContextStakeHolder.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ContextStakeHolder.Identifiers">
            <summary>
            Gets a collection of values that uniquely identify the stakeholder.
            </summary>
            <value>The identifiers.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.CurrentContext">
            <summary>
            Represents the current context.
            </summary>
            <remarks>
            A current context object must be used in a <c>using</c> statement and gracefully closed before the end of the <c>using</c> scope, by calling <see cref="M:Siriona.Library.Diagnostics.CurrentContext.End"/>.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.CurrentContext"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.CurrentContext"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.#ctor(Siriona.Library.Diagnostics.IContextStakeHolder[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.CurrentContext"/> class.
            </summary>
            <param name="stakeHolders">The stake holders.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Diagnostics.IContextStakeHolder})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.CurrentContext"/> class.
            </summary>
            <param name="stakeHolders">The stake holders.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.#ctor(System.String,Siriona.Library.Diagnostics.IContextStakeHolder[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.CurrentContext"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="stakeHolders">The stake holders.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.#ctor(System.String,System.Collections.Generic.IEnumerable{Siriona.Library.Diagnostics.IContextStakeHolder})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.CurrentContext"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="stakeHolders">The stake holders.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.CurrentContext.End">
            <summary>
            Ends this instance.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.CurrentContext.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.CurrentContext.StakeHolders">
            <summary>
            Gets the stake holders.
            </summary>
            <value>The stake holders.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.CurrentContext.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.CurrentContext.IsGracefullyClosed">
            <summary>
            Gets a value indicating whether this instance is gracefully closed.
            </summary>
            <value>
            	<c>true</c> if this instance is gracefully closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.DefaultExceptionFilter">
            <summary>
            Represents a base implementation of the <see cref="T:Siriona.Library.Diagnostics.IExceptionFilter"/> interface.
            </summary>
            <remarks>
            This implementation filters errors caused by <see cref="T:System.Threading.ThreadAbortException"/>.
            Implementers may inherit from this class instead of directly implementing 
            the <see cref="T:Siriona.Library.Diagnostics.IExceptionFilter"/> interface.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.DefaultExceptionFilter.IsReported(System.Exception)">
            <summary>
            Determines whether the specified exception must be reported.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the exception must be reported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorEventCriticity">
            <summary>
            Represents the criticity of an event.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorEventCriticity.Information">
            <summary>
            Event is for informative purpose only.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorEventCriticity.Warning">
            <summary>
            Event is a warning.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorEventCriticity.Failure">
            <summary>
            Event is a failure.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorEventType">
            <summary>
            Represents various error event types
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorEventType.Bug">
            <summary>
            The event corresponds to a bug.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorEventType.Manual">
            <summary>
            The event corresponds to a manual (end-user) report.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorEventTypeAttribute">
            <summary>
            Represents an attribute being applied to an error event type.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEventTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEventTypeAttribute"/> class.
            </summary>
            <param name="emissionRequired">if set to <c>true</c>, indicates the event type causes report to be sent.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.#ctor(Siriona.Library.Diagnostics.ErrorEventCriticity)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEventTypeAttribute"/> class.
            </summary>
            <param name="criticity">The criticity.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.#ctor(System.Boolean,Siriona.Library.Diagnostics.ErrorEventCriticity)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEventTypeAttribute"/> class.
            </summary>
            <param name="emissionRequired">if set to <c>true</c>, indicates the event type causes report to be sent.</param>
            <param name="criticity">The criticity.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.#ctor(System.Boolean,Siriona.Library.Diagnostics.ErrorEventCriticity,Siriona.Library.Diagnostics.ErrorReportVerbosity)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorEventTypeAttribute"/> class.
            </summary>
            <param name="emissionRequired">if set to <c>true</c>, indicates the event type causes report to be sent.</param>
            <param name="criticity">The criticity.</param>
            <param name="requiredVerbosity">The required verbosity.</param>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.EmissionRequired">
            <summary>
            Gets or sets a value indicating whether the type of event causes the emission of a report.
            </summary>
            <value><c>true</c> if the type of event causes the emission of a report; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.Criticity">
            <summary>
            Gets or sets the criticity.
            </summary>
            <value>The criticity.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorEventTypeAttribute.RequiredVerbosity">
            <summary>
            Gets or sets the required verbosity.
            </summary>
            <value>The required verbosity.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorReport">
            <summary>
            Represents an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor(Siriona.Library.Diagnostics.IExceptionFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
            <param name="filter">The exception filter.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Diagnostics.IErrorWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
            <param name="errorWriters">The error writers.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor(Siriona.Library.Diagnostics.IErrorWriter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
            <param name="errorWriters">The error writers.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor(Siriona.Library.Diagnostics.IExceptionFilter,Siriona.Library.Diagnostics.IErrorWriter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
            <param name="filter">The exception filter.</param>
            <param name="errorWriters">The error writers.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor(Siriona.Library.Diagnostics.IExceptionFilter,Siriona.Library.Diagnostics.IErrorWriter,Siriona.Library.Diagnostics.IErrorWriter,Siriona.Library.Diagnostics.IErrorWriter,Siriona.Library.Diagnostics.ExceptionConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
            <param name="exceptionFilter">The exception filter.</param>
            <param name="errorWriter">The error writer.</param>
            <param name="fallbackWriter">The fallback writer.</param>
            <param name="failureWriter">The failure writer.</param>
            <param name="exceptionConverter">The exception converter.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.#ctor(Siriona.Library.Diagnostics.IExceptionFilter,System.Collections.Generic.IEnumerable{Siriona.Library.Diagnostics.IErrorWriter},Siriona.Library.Diagnostics.IErrorWriter,Siriona.Library.Diagnostics.IErrorWriter,Siriona.Library.Diagnostics.ExceptionConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> class.
            </summary>
            <param name="exceptionFilter">The exception filter.</param>
            <param name="errorWriters">The error writers.</param>
            <param name="fallbackWriter">The fallback writer.</param>
            <param name="failureWriter">The failure writer.</param>
            <param name="exceptionConverter">The exception converter.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Close">
            <summary>
            Closes the current error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Report(Siriona.Library.Diagnostics.ErrorEvent[])">
            <summary>
            Reports the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Report(System.Collections.Generic.IEnumerable{Siriona.Library.Diagnostics.ErrorEvent})">
            <summary>
            Reports the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Report(System.Enum,System.String)">
            <summary>
            Reports the specified message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Report(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Reports the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Report(System.Exception[])">
            <summary>
            Reports the specified exceptions.
            </summary>
            <param name="exceptions">The exceptions.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReport.Report(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Reports the specified exceptions.
            </summary>
            <param name="exceptions">The exceptions.</param>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorReport.IsFallbackEnabled">
            <summary>
            Gets or sets a value indicating whether this fallback is enabled.
            </summary>
            <value>
            	<c>true</c> if fallback is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorReport.IsFailureReportEnabled">
            <summary>
            Gets a value indicating whether this instance is failure enabled.
            </summary>
            <value>
            	<c>true</c> if failure reporting is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorReport.Id">
            <summary>
            Gets the report identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorReport.CurrentReport">
            <summary>
            Gets the current report.
            </summary>
            <value>The current report.</value>
        </member>
        <member name="E:Siriona.Library.Diagnostics.ErrorReport.ExceptionReport">
            <summary>
            Occurs when an exception is reported.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorReportManager">
            <summary>
            Provide high-level management for handling exceptions.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportManager.EnableAutomaticReports(Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Enables automatic report for the specified report types.
            </summary>
            <param name="reportTypes">The report types.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportManager.DisableAutomaticReports(Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Disables automatic report for the specified report types.
            </summary>
            <param name="reportTypes">The report types.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportManager.IsAutomaticReportActive(Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Determines whether automatic report is enabled for the specified report types.
            </summary>
            <param name="reportTypes">The report types.</param>
            <returns>
            	<c>true</c> if automatic report is active (enabled and not suspended) for the specified report types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportManager.IsAutomaticReportEnabled(Siriona.Library.Diagnostics.AutomaticErrorReportTypes)">
            <summary>
            Determines whether automatic report is enabled for the specified report types.
            </summary>
            <param name="reportTypes">The report types.</param>
            <returns>
            	<c>true</c> if automatic report is enabled for the specified report types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ErrorReportManager.IsAutomaticReportSuspended">
            <summary>
            Gets or sets a value indicating whether automatic report is suspended.
            </summary>
            <value>
            	<c>true</c> if automatic report is suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorReportVerbosity">
            <summary>
            Represent the verbosity level of an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/>
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorReportVerbosity.Low">
            <summary>
            Minimum information is sent.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorReportVerbosity.High">
            <summary>
            All information is sent
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorUtility">
            <summary>
            Provides helper methods for handling exceptions and error reports.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Safe(Siriona.Library.Diagnostics.ExceptionCollection,Siriona.Library.Action,System.Int32,System.Predicate{System.Exception},Siriona.Library.Action)">
            <summary>
            Executes the specified action in an exception-safe context.
            </summary>
            <param name="errors">The errors.</param>
            <param name="call">The call.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryCondition">The retry condition.</param>
            <param name="waitAction">The wait action.</param>
            <remarks>Action is executed and error, if occurring, is added to the <see cref="T:Siriona.Library.Diagnostics.ExceptionCollection"/>.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Safe``1(Siriona.Library.Diagnostics.ExceptionCollection,Siriona.Library.Func{``0},``0,System.Int32,System.Predicate{System.Exception},Siriona.Library.Action)">
            <summary>
            Executes the specified action in an exception-safe context.
            </summary>
            <typeparam name="T">The return value type.</typeparam>
            <param name="errors">The errors.</param>
            <param name="call">The call.</param>
            <param name="failureReturnValue">The failure return value.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryCondition">The retry condition.</param>
            <param name="waitAction">The wait action.</param>
            <returns>The action return value.</returns>
            <remarks>Action is executed and error, if occurring, is added to the <see cref="T:Siriona.Library.Diagnostics.ExceptionCollection"/>.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.HasInnerException(System.Exception,System.Type)">
            <summary>
            Determines whether the specified exception has inner exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="innerExceptionType">The searched inner type exception.</param>
            <returns>
            	<c>true</c> if the specified exception has inner exception of the given type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method returns <c>true</c> if the specified exception has the searched type.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.GetInnerExceptions``1(System.Exception)">
            <summary>
            Determines whether the specified exception has inner exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the specified exception has inner exception of the given type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method returns <c>true</c> if the specified exception has the searched type.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.IsCanceled(System.Exception)">
            <summary>
            Determines whether the specified exception is canceled.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the specified exception, or one of its inner exceptions, is of type <see cref="T:System.Threading.ThreadAbortException"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Report(System.Enum,System.Exception,System.String[])">
            <summary>
            Reports messages of the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="ex">The ex.</param>
            <param name="messages">The messages.</param>
            <remarks>
            If an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> is currently open messages are written to the current report.
            When used in a SQL-CLR project, current database must provide a <c>GetErrorReportConfiguration</c> stored procedure returning a XML configuration for error reporting. Otherwise, a <c>ErrorReportSection</c> is mandatory.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Report(System.Enum,Siriona.Library.Diagnostics.IContextStakeHolder,System.String[])">
            <summary>
            Reports messages of the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="stakeHolder">The stake holder.</param>
            <param name="messages">The messages.</param>
            <returns>The report identifier.</returns>
            <remarks>
            If an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> is currently open messages are written to the current report.
            When used in a SQL-CLR project, current database must provide a <c>GetErrorReportConfiguration</c> stored procedure returning a XML configuration for error reporting. Otherwise, a <c>ErrorReportSection</c> is mandatory.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.SetCriticity(System.Exception,Siriona.Library.Diagnostics.ErrorEventCriticity)">
            <summary>
            Sets the criticity.
            </summary>
            <param name="exception">The exception.</param>
            <param name="criticity">The criticity.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Report(System.Enum,System.String[])">
            <summary>
            Reports messages of the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="messages">The messages.</param>
            <returns>The report identifier.</returns>
            <remarks>
            If an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> is currently open, messages are written to the current report.
            When used in a SQL-CLR project, current database must provide a <c>GetErrorReportConfiguration</c> stored procedure returning a XML configuration for error reporting. Otherwise, a <c>ErrorReportSection</c> is mandatory.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Report(System.String[])">
            <summary>
            Reports the specified messages.
            </summary>
            <param name="messages">The messages.</param>
            <returns>The report identifier.</returns>
            <remarks>
            If an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> is currently open, messages are written to the current report.
            When used in a SQL-CLR project, current database must provide a <c>GetErrorReportConfiguration</c> stored procedure returning a XML configuration for error reporting. Otherwise, a <c>ErrorReportSection</c> is mandatory.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Report(System.Exception)">
            <summary>
            Reports the specified exceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The report identifier.</returns>
            <remarks>
            If an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> is currently open, exceptions are written to the current report.
            When used in a SQL-CLR project, current database must provide a <c>GetErrorReportConfiguration</c> stored procedure returning a XML configuration for error reporting. Otherwise, a <c>ErrorReportSection</c> is mandatory.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorUtility.Report(System.Exception[])">
            <summary>
            Reports the specified exceptions.
            </summary>
            <param name="exceptions">The reported exceptions.</param>
            <returns>The report identifier.</returns>
            <remarks>
            If an <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/> is currently open, exceptions are written to the current report.
            When used in a SQL-CLR project, current database must provide a <c>GetErrorReportConfiguration</c> stored procedure returning a XML configuration for error reporting. Otherwise, a <c>ErrorReportSection</c> is mandatory.
            </remarks>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorWriterSection">
            <summary>
            Represents the various sections of an error report.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.None">
            <summary>
            No section is defined.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.HardwarePlatform">
            <summary>
            Section contains information concerning the hardware platform.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.SoftwarePlatform">
            <summary>
            Section contains information concerning the software platform.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.Application">
            <summary>
            Section contains information concerning the application.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.WebRequest">
            <summary>
            Section contains information concerning the current web request.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.StakeHolders">
            <summary>
            Section contains information concerning the current user.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.TraceContext">
            <summary>
            Section contains information concerning the <see cref="T:Siriona.Library.Diagnostics.StackFrame"/>.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message">
            <summary>
            Section contains a user-defined message.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error">
            <summary>
            Section contains information concerning the current error.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.EventExceptionConverterOutput">
            <summary>
            Represents the output given by <see cref="T:Siriona.Library.Diagnostics.ExceptionConverter"/> for a specified exception.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventExceptionConverterOutput.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.EventExceptionConverterOutput.IsConverted">
            <summary>
            Gets a value indicating whether this instance is converted.
            </summary>
            <value>
            	<c>true</c> if this instance is converted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.EventExceptionConverterOutput.EventType">
            <summary>
            Gets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.EventExceptionConverterOutput.EventCriticity">
            <summary>
            Gets the event criticity.
            </summary>
            <value>The event criticity.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.EventExceptionConverterOutput.EventMessage">
            <summary>
            Gets the event message.
            </summary>
            <value>The event message.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.EventLogErrorWriter">
            <summary>
            Represents an error writer that reports errors in the system event log.
            </summary>
            <remarks>
            The following parameters are available through the configuration file :
            <list type="bullet">
                <item>
                    <term>eventLog</term>
                    <description>
                        The name of the target event log file.
                        If not set, the <c>Application</c> event log is used.
                    </description>
                </item>
                <item>
                    <term>application</term>
                    <description>
                        The name of the application as it appears in the event log.
                        If not set, the name of the application is to <c><see cref="P:Siriona.Library.Configuration.ApplicationInfo.ProductName"/>.<see cref="P:Siriona.Library.Configuration.ApplicationInfo.ProjectName"/></c>
                    </description>
                </item>
                <item>
                    <term>reset</term>
                    <description>
                        Indicates that the event log registration must be reset.
                    </description>
                </item>
            </list>
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.EventLogErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="eventLog" type="Siriona.Library.Diagnostics.EventLogErrorWriter, Siriona.Library" /&gt;
            &lt;/writers&gt;
            </code>
            </example>
        </member>
        <member name="F:Siriona.Library.Diagnostics.EventLogErrorWriter.DefaultEventLogName">
            <summary>
            Gets the name of the default event log file used for error reporting.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.EventLogErrorWriter"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.EventLogErrorWriter"/> class.
            </summary>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.EventLogErrorWriter"/> class.
            </summary>
            <param name="eventLogName">Name of the event log.</param>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.Begin(System.Guid)">
            <summary>
            Begins an error report.
            </summary>
            <param name="reportId">The report identifier.</param>
            <remarks>
            	<c>reportType</c> might be of <see cref="T:Siriona.Library.Diagnostics.ErrorEventType"/> type, but other values are allowed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.WriteMessage(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Writes a user-defined message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message</param>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.WriteException(System.Exception)">
            <summary>
            Writes information about a given exception.
            </summary>
            <param name="exception">The exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.WriteException(System.Exception,Siriona.Library.Collections.NameValueCollection{System.Object})">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionData">Additional data concerning the exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.End">
            <summary>
            Ends an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.EventLogErrorWriter.Cancel">
            <summary>
            Cancels an error report.
            </summary>
            <remarks>The <c>Cancel</c> method clears the <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> state without sending the report.</remarks>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ExceptionCollection">
            <summary>
            Represents a collection of exceptions.
            </summary>
            <remarks>
            Once filled with errors, a <see cref="T:Siriona.Library.Diagnostics.MultipleErrorException"/> can be sent using the <see cref="M:Siriona.Library.Diagnostics.ExceptionCollection.ThrowIfNotEmpty"/> method.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ExceptionCollection"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ExceptionCollection"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionCollection.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ExceptionCollection"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.ExceptionCollection"/> class.
            </summary>
            <param name="exceptions">The exceptions.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionCollection.ThrowIfNotEmpty">
            <summary>
            Throws a <see cref="T:Siriona.Library.Diagnostics.MultipleErrorException"/> if the list is not empty.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorReportModule">
            <summary>
            Represents a ASP.Net <see cref="T:System.Web.IHttpModule"/> intended to handle errors that occurred during 
            a Web Application request.
            </summary>
            <remarks>
            <para>
            This HTTP Module is intended for automatic handling and reporting of errors that occurs in Web Applications.
            </para>
            <para>
            <see cref="T:Siriona.Library.Diagnostics.ErrorReportModule"/> is installed using the following code in the <c>web.config</c> configuration file :
            <code>
            &lt;system.web&gt;
              &lt;httpModules&gt;
                &lt;add 
                  type="Siriona.Library.Diagnostics.ErrorReportModule, Siriona.Library"
                /&gt;
              &lt;/httpModules&gt;
            &lt;system.web&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"></see> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ErrorReportSoapExtension">
            <summary>
            Represents a <see cref="T:System.Web.Services.Protocols.SoapExtension"/> that provides error handling.
            </summary>
            <remarks>
            <para>
            This SOAP extension is intended for automatic handling and reporting of errors that occurs in Web Services.
            </para>
            <para>
            <see cref="T:Siriona.Library.Diagnostics.ErrorReportSoapExtension"/> is installed using the following code in the <c>web.config</c> configuration file :
            <code>
            &lt;system.web&gt;
              &lt;webServices&gt;
                &lt;soapExtensionTypes&gt;
                  &lt;add 
                    type="Siriona.Library.Diagnostics.ErrorReportSoapExtension, Siriona.Library"
                    priority="1" group="Low"
                  /&gt;
                &lt;/soapExtensionTypes&gt;
              &lt;/webServices&gt;
            &lt;/system.web&gt;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Siriona.Library.Diagnostics.ErrorReportSoapExtension"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            When overridden in a derived class, allows a SOAP extension to initialize data specific to an XML Web service
            method using an attribute applied to the XML Web service method at a one time performance cost.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo"/> representing the specific function prototype for the XML Web service method to which the SOAP extension is applied.</param>
            <param name="attribute">The <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute"></see> applied to the XML Web service method.</param>
            <returns>
            The <see cref="T:System.Object"/>
            that the SOAP extension initializes for caching.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.GetInitializer(System.Type)">
            <summary>
            When overridden in a
            derived class, allows a SOAP extension to initialize data specific to a class implementing
            an XML Web service at a one time performance cost.
            </summary>
            <param name="serviceType">The type of the class implementing the XML Web service to which the SOAP extension is applied.</param>
            <returns>
            The <see cref="T:System.Object"/>
            that the SOAP extension initializes for caching.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.Initialize(System.Object)">
            <summary>
            When overridden in a derived class, allows a SOAP
            extension to initialize itself using the data cached in the <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)"/>
            method.
            </summary>
            <param name="initializer">The <see cref="T:System.Object"/> returned from <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)"/> cached by ASP.NET.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.ChainStream(System.IO.Stream)">
            <summary>
            When overridden in a derived class, allows a SOAP
            extension access to the memory buffer containing the SOAP request or response.
            </summary>
            <param name="stream">A memory buffer containing the SOAP request or response.</param>
            <returns>
            A <see cref="T:System.IO.Stream"/> representing a new memory buffer that this SOAP extension can
            modify.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ErrorReportSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            When overridden in a derived class, allows a SOAP
            extension to receive a <see cref="T:System.Web.Services.Protocols.SoapMessage"/> to process at each <see cref="T:System.Web.Services.Protocols.SoapMessageStage"/> .
            </summary>
            <param name="message">The <see cref="T:System.Web.Services.Protocols.SoapMessage"/> to process.</param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.ExceptionConverter">
            <summary>
            Represents a converter for exceptions.
            </summary>
            <remarks>
            <c>ExceptionConverter</c> is build from an XML stream. XML has the following form:
            &lt;rules priority="Ascending|Descending"&gt;
              &lt;rule&gt;
                &lt;match&gt;
                  &lt;and&gt;(0..n evaluators)&lt;/and&gt;
                  &lt;or&gt;(0..n evaluators)&lt;/or&gt;
                  &lt;xor&gt;(0..n evaluators)&lt;/xor&gt;
                  &lt;not&gt;(1 evaluator)&lt;/not&gt;
            
                  &lt;exception type="(fully qualified exception namespace and class name)"&gt;
                    &lt;property path="(path to the property)" formatString="(format string applied to the property)"&gt;(expected result, as a regular expression)&lt;/property&gt;
                  &lt;/exception&gt;
                  
                  &lt;context name="(context data item name)"&gt;(expected result, as a regular expression)&lt;/context&gt;
                  
                  &lt;stakeHolder&gt;
                    &lt;identifier name="(stakeholder identifier name"&gt;(expected result, as a regular expression)&lt;/identifier&gt;        
                  &lt;/stakeHolder&gt;
                &lt;/match&gt;
            
                &lt;ignore /&gt;
                
                &lt;output type="(fully qualified event type namespace and enum name)" criticity="Information|Warning|Failure" format="(format string)"&gt;
                  &lt;argument source="Exception|Context" property="(path to the property)" /&gt;
                &lt;/output&gt;
              &lt;/rule&gt;
            &lt;/rules&gt;
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionConverter.Convert(System.Exception)">
            <summary>
            Converts the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The output of the convertion.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionConverter.Load(System.String)">
            <summary>
            Loads the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>An exception converter using the specified definition file.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.ExceptionConverter.Load(System.Xml.XmlDocument)">
            <summary>
            Loads the specified XML document.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>An exception converter using the specified definition document.</returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ExceptionConverter.Bypass">
            <summary>
            Gets the bypass exception converter.
            </summary>
            <value>The bypass exception converter.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ExceptionConverter.Current">
            <summary>
            Gets the current exception converter.
            </summary>
            <value>The current exception converter.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.ExceptionConverter.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>The rules.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.HttpErrorWriter">
            <summary>
            Represents an HTTP error writer.
            </summary>
            <remarks>
            The following parameters are available through the configuration file :
            <list type="bullet">
                <item>
                    <term>url</term>
                    <description>The URL of the web page where the error report is sent.</description>
                </item>
                <item>
                    <term>parameter</term>
                    <description>The url parameter whose value is filled with the error report.</description>
                </item>
                <item>
                    <term>method</term>
                    <description>The HTTP method used to send the error report. The GET and POST methods are supported.</description>
                </item>
                <item>
                    <term>timeout</term>
                    <description>The response timeout, in milliseconds. Default value is <c>5000</c>.</description>
                </item>
            </list>
            The error report is encoded using the <c>application/x-www-form-urlencoded</c> content-type.
            <para>
            Since the error report is written in XML, the URL handler must not validate the request content. 
            Specifically, if the handler is written using ASP.NET, the target <c>Page</c> must have its <c>ValidateRequest</c> property set to <c>false</c>.
            </para>
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="http" type="Siriona.Library.Diagnostics.HttpErrorWriter, Siriona.Library"&gt;
                &lt;settings&gt;
                  &lt;add name="url" value="http://localhost:8080/uploadReport.aspx" /&gt;
                  &lt;add name="timeout" value="2000" /gt;
                &lt;/settings&gt;
              &lt;/add&gt;
            &lt;/writers&gt;
            </code>
            </example>
        </member>
        <member name="T:Siriona.Library.Diagnostics.XmlErrorWriter">
            <summary>
            Represents a base class for XML error writers.
            </summary>
            <remarks>Implementers may inherit this class to create XML error writers.</remarks>
        </member>
        <member name="F:Siriona.Library.Diagnostics.XmlErrorWriter.XmlErrorFormatVersion">
            <summary>
            Gets the current version of XML error file format.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.Begin(System.Guid)">
            <summary>
            Begins an error report.
            </summary>
            <param name="reportId">The report identifier.</param>
            <remarks>
            	<c>ReportType</c> might be of <see cref="T:Siriona.Library.Diagnostics.ErrorEventType"/> type, but other values are allowed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.BeginSection(Siriona.Library.Diagnostics.ErrorWriterSection)">
            <summary>
            Begins a section with the given type.
            </summary>
            <param name="section">The section type.</param>
            <remarks>Any previously opened section must be closed before opening a new section.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.BeginPart(System.String)">
            <summary>
            Begins a part in a section.
            </summary>
            <param name="partName">Name of the part.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.EndPart">
            <summary>
            Ends the currently opened part.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.WriteConfiguration(System.String,System.String)">
            <summary>
            Writes a configuration information.
            </summary>
            <param name="name">The setting name.</param>
            <param name="value">The setting value.</param>
            <remarks>
            Calling this method in the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.EndSection">
            <summary>
            Ends an opened section.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Writes the node.
            </summary>
            <param name="reader">The reader.</param>
            <param name="defattr">if set to <c>true</c> copy the default attributes from the <see cref="T:System.Xml.XmlReader"/>.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.WriteMessage(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Writes a user-defined message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message</param>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.WriteException(System.Exception)">
            <summary>
            Writes information about a given exception.
            </summary>
            <param name="exception">The exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.WriteException(System.Exception,Siriona.Library.Collections.NameValueCollection{System.Object})">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionData">Additional data concerning the exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.BeginInnerException">
            <summary>
            Begins a new level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.EndInnerException">
            <summary>
            Leaves the current level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.End">
            <summary>
            Ends an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.Cancel">
            <summary>
            Cancels an error report.
            </summary>
            <remarks>The <c>Cancel</c> method clears the <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> state without sending the report.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.XmlErrorWriter.Save(System.String)">
            <summary>
            Saves the specified XML string.
            </summary>
            <param name="reportMessageContent">The content of the report, under its XML form.</param>
            <remarks>Implementers have to implement this method.</remarks>
        </member>
        <member name="P:Siriona.Library.Diagnostics.XmlErrorWriter.ErrorCount">
            <summary>
            Gets the number of top-level errors.
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.XmlErrorWriter.MessageCount">
            <summary>
            Gets the message count.
            </summary>
            <value>The message count.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.XmlErrorWriter.CreationDate">
            <summary>
            Gets the error report creation date.
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.XmlErrorWriter.CharacterCheck">
            <summary>
            Gets the character check.
            </summary>
            <value>The character check.</value>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameterName">Name of the HTTP parameter associated with the error report.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameterName">Name of the HTTP parameter associated with the error report.</param>
            <param name="httpMethodName">HTTP method, namely "<c>GET</c>" or "<c>POST</c>".</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameterName">Name of the HTTP parameter associated with the error report.</param>
            <param name="httpMethodName">HTTP method, namely "<c>GET</c>" or "<c>POST</c>".</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameterName">Name of the HTTP parameter associated with the error report.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameterName">Name of the HTTP parameter associated with the error report.</param>
            <param name="httpMethodName">HTTP method, namely "<c>GET</c>" or "<c>POST</c>".</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.#ctor(System.Uri,System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameterName">Name of the HTTP parameter associated with the error report.</param>
            <param name="httpMethodName">HTTP method, namely "<c>GET</c>" or "<c>POST</c>".</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.HttpErrorWriter.Save(System.String)">
            <summary>
            Saves the specified XML string.
            </summary>
            <param name="reportMessageContent">The XML string.</param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.LogFileErrorWriter">
            <summary>
            Represents a log file error writer.
            </summary>
            <remarks>
            The following parameters are available through the configuration file :
            <list type="bullet">
                <item>
                    <term>path</term>
                    <description>
                        The path and file name of the log file.
                        Use of format string, using the form <c>{0:...}</c> with a <see cref="T:System.DateTime"/> format string,
                        is authorized, and enable rollover (that is, splitting the error reports accross multiple files).
                    </description>
                </item>
            </list>
            <para>
            Error reports are enclosed inside a <c>&lt;errorReports /&gt;</c> tag.
            </para>
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.LogFileErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="file" type="Siriona.Library.Diagnostics.LogFileErrorWriter, Siriona.Library"&gt;
                &lt;settings&gt;
                  &lt;add name="path" value="C:\LogFiles\{0:yyyy}\util_web_{0:yyyyMMddhhmm}.xml" /&gt;
                &lt;/settings&gt;
              &lt;/add&gt;
            &lt;/writers&gt;
            </code>
            This example stores error reports in files created on a per-minute basis. A new folder is created each year.
            </example>
        </member>
        <member name="M:Siriona.Library.Diagnostics.LogFileErrorWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.LogFileErrorWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.HttpErrorWriter"/> class.
            </summary>
            <param name="filePathFormat">The URL.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.LogFileErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.LogFileErrorWriter.Save(System.String)">
            <summary>
            Saves the specified XML string.
            </summary>
            <param name="reportMessageContent">The XML string.</param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.MailErrorWriter">
            <summary>
            Represents an email error writer.
            </summary>
            <remarks>
            The following parameters are available through the configuration file :
            <list type="bullet">
                <item>
                    <term>host</term>
                    <description>
                        The e-mail server IP address or domain name. 
                        If not set, the value stored in <c>system.net/mailSettings</c> is used.
                    </description>
                </item>
                <item>
                    <term>port</term>
                    <description>The TCP port used to connect to the e-mail server.</description>
                </item>
                <item>
                    <term>from</term>
                    <description>The sender e-mail address.</description>
                </item>
                <item>
                    <term>to</term>
                    <description>The recipient e-mail address.</description>
                </item>
            </list>
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="mail" type="Siriona.Library.Diagnostics.MailErrorWriter, Siriona.Library"&gt;
                &lt;settings&gt;
                  &lt;add name="from" value="noreply@siriona.com" /&gt;
                  &lt;add name="to" value="bugreport@siriona.com" /&gt;
                &lt;/settings&gt;
              &lt;/add&gt;
            &lt;/writers&gt;
            </code>
            </example>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
            <param name="hostName">The host name of the SMTP server.</param>
            <param name="portNumber">The port number.</param>
            <param name="senderEmailAddress">The sender of the email.</param>
            <param name="recipientEmailAddress">The recipient of the email.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor(System.String,System.Int32,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
            <param name="hostName">The host name of the SMTP server.</param>
            <param name="portNumber">The port number.</param>
            <param name="senderEmailAddress">The sender of the email.</param>
            <param name="recipientEmailAddress">The recipient of the email.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
            <param name="hostName">Host name of the SMTP server.</param>
            <param name="senderEmailAddress">The sender of the email.</param>
            <param name="recipientEmailAddress">The recipient of the email.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor(System.String,System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
            <param name="hostName">The host name of the SMTP server.</param>
            <param name="senderEmailAddress">The sender of the email.</param>
            <param name="receiverEmailAddress">The recipient of the email.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
            <param name="senderEmailAddress">The sender of the email.</param>
            <param name="recipientEmailAddress">The recipient of the email.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MailErrorWriter"/> class.
            </summary>
            <param name="senderEmailAddress">The sender of the email.</param>
            <param name="recipientEmailAddress">The recipient of the email.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MailErrorWriter.Save(System.String)">
            <summary>
            Saves the specified XML string.
            </summary>
            <param name="reportMessageContent">The XML string.</param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.MultipleErrorException">
            <summary>
            Represents an exception that encapsulate multiple inner exceptions.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MultipleErrorException.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.Exception},System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MultipleErrorException"/> class.
            </summary>
            <param name="exceptions">The inner exceptions.</param>
            <param name="message">The message.</param>
            <param name="innerException">The root inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MultipleErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.MultipleErrorException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MultipleErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MultipleErrorException.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MultipleErrorException.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.MultipleErrorException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="P:Siriona.Library.Diagnostics.MultipleErrorException.InnerExceptions">
            <summary>
            Gets the inner exceptions.
            </summary>
            <value>The inner exceptions.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.NullErrorWriter">
            <summary>
            Represents an error writer that does nothing.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.Begin(System.Guid)">
            <summary>
            Begins an error report.
            </summary>
            <param name="reportId">The report identifier.</param>
            <remarks>
            	<c>reportType</c> might be of <see cref="T:Siriona.Library.Diagnostics.ErrorEventType"/> type, but other values are allowed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.BeginSection(Siriona.Library.Diagnostics.ErrorWriterSection)">
            <summary>
            Begins a section with the given type.
            </summary>
            <param name="section">The section type.</param>
            <remarks>Any previously opened section must be closed before opening a new section.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.BeginPart(System.String)">
            <summary>
            Begins a part in a section.
            </summary>
            <param name="partName">Name of the part.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.EndPart">
            <summary>
            Ends the currently opened part.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.WriteConfiguration(System.String,System.String)">
            <summary>
            Writes a configuration information.
            </summary>
            <param name="name">Name of the configuration item.</param>
            <param name="value">The value of the configuration item.</param>
            <remarks>
            Calling this method in the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> or a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.EndSection">
            <summary>
            Ends an opened section.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.WriteMessage(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Writes a user-defined message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message</param>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.WriteException(System.Exception)">
            <summary>
            Writes information about a given exception.
            </summary>
            <param name="exception">The exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.WriteException(System.Exception,Siriona.Library.Collections.NameValueCollection{System.Object})">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionData">Additional data concerning the exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.BeginInnerException">
            <summary>
            Begins a new level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.EndInnerException">
            <summary>
            Leaves the current level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.End">
            <summary>
            Ends an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.NullErrorWriter.Cancel">
            <summary>
            Cancels an error report.
            </summary>
            <remarks>The <c>Cancel</c> method clears the <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> state without sending the report.</remarks>
        </member>
        <member name="P:Siriona.Library.Diagnostics.NullErrorWriter.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.NullExceptionConverterOutput">
            <summary>
            Represents a null exception converter output.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.NullExceptionConverterOutput.IsConverted">
            <summary>
            Gets a value indicating whether this instance is converted.
            </summary>
            <value>
            	<c>true</c> if this instance is converted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.AndOperatorMatchEvaluator">
            <summary>
            Represents a boolean "AND" operator against a set of <see cref="T:Siriona.Library.Diagnostics.Rules.IRuleMatchEvaluator"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.AndOperatorMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.AndOperatorMatchEvaluator.Operands">
            <summary>
            Gets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.ContextMatchEvaluator">
            <summary>
            Represents an evaluator that match a specified item in the current <see cref="T:Siriona.Library.Diagnostics.RunContext"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.ContextMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ContextMatchEvaluator.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ContextMatchEvaluator.Value">
            <summary>
            Gets the regular expression that matches the value.
            </summary>
            <value>The regular expression.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.IOutputFormatArgument">
            <summary>
            Represents a format argument for the output message of a rule.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.IOutputFormatArgument.Evaluate(System.Exception)">
            <summary>
            Evaluates the current argument for the specified <see cref="T:System.Exception"/> and <see cref="T:Siriona.Library.Diagnostics.RunContext"/>.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.IOutputFormatArgument.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.IOutputFormatArgument.Property">
            <summary>
            Gets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.ExceptionConverterRule">
            <summary>
            Represents a rule for converting an <see cref="T:System.Exception"/> into a <see cref="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRule.Output"/>.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRule.Match">
            <summary>
            Gets the match.
            </summary>
            <value>The match.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRule.Output">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput">
            <summary>
            Represents the output of a <see cref="T:Siriona.Library.Diagnostics.Rules.ExceptionConverterRule"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.ApplyTo(System.Exception)">
            <summary>
            Applies the current rule to the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An exception converter output</returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.EventName">
            <summary>
            Gets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.CustomCriticity">
            <summary>
            Gets the custom criticity.
            </summary>
            <value>The custom criticity.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.EventType">
            <summary>
            Gets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.Criticity">
            <summary>
            Gets the criticity.
            </summary>
            <value>The criticity.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.MessageFormat">
            <summary>
            Gets the message format.
            </summary>
            <value>The message format.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.MessageArguments">
            <summary>
            Gets the message arguments.
            </summary>
            <value>The message arguments.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionConverterRuleOutput.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.ExceptionMatchEvaluator">
            <summary>
            Represents an evaluator that match a specified exception type.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.ExceptionMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionMatchEvaluator.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionMatchEvaluator.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
            <value>The expected type.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionMatchEvaluator.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.ExceptionPropertyEvaluator">
            <summary>
            Represents a match evaluator for an exception property.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.ExceptionPropertyEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionPropertyEvaluator.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionPropertyEvaluator.FormatString">
            <summary>
            Gets the property format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.ExceptionPropertyEvaluator.Value">
            <summary>
            Gets the value regex.
            </summary>
            <value>The value regex.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.NotOperatorMatchEvaluator">
            <summary>
            Represents a boolean "NOT" operator against a <see cref="T:Siriona.Library.Diagnostics.Rules.IRuleMatchEvaluator"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.NotOperatorMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.NotOperatorMatchEvaluator.Operand">
            <summary>
            Gets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.OrOperatorEvaluator">
            <summary>
            Represents a boolean "OR" operator against a set of <see cref="T:Siriona.Library.Diagnostics.Rules.IRuleMatchEvaluator"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.OrOperatorEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.OrOperatorEvaluator.Operands">
            <summary>
            Gets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.RulePriorityOrder">
            <summary>
            Represents the priority order of multiple matching rules.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.Rules.RulePriorityOrder.Ascending">
            <summary>
            The first matching rule is applied.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.Rules.RulePriorityOrder.Descending">
            <summary>
            The last matching rule is applied.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.StakeHolderIdentifier">
            <summary>
            Represents an identifier of a stakeholder.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.StakeHolderIdentifier.IsMatch(System.String)">
            <summary>
            Determines whether the specified identifier value is match.
            </summary>
            <param name="identifierValue">The identifier value.</param>
            <returns>
            	<c>true</c> if the specified identifier value is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.StakeHolderIdentifier.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.StakeHolderIdentifier.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.StakeHolderMatchEvaluator">
            <summary>
            Represents a match evaluator for stakeholders.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.StakeHolderMatchEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.StakeHolderMatchEvaluator.Identifiers">
            <summary>
            Gets the identifiers.
            </summary>
            <value>The identifiers.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.Rules.XorOperatorEvaluator">
            <summary>
            Represents a boolean "Exclusive OR" operator against a set of <see cref="T:Siriona.Library.Diagnostics.Rules.IRuleMatchEvaluator"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.Rules.XorOperatorEvaluator.IsMatch(System.Exception)">
            <summary>
            Determines whether the specified exception and current context match the evaluator conditions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            	<c>true</c> if the evaluator conditions are matched; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.Rules.XorOperatorEvaluator.Operands">
            <summary>
            Gets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.RunContextException">
            <summary>
            Represent an exception in RunContext ordering.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.RunContextException.#ctor(System.String,Siriona.Library.Diagnostics.CurrentContext[])">
            <summary>
            Initializes an new instance of the <see cref="T:Siriona.Library.Diagnostics.RunContextException"/> class.
            </summary>
            <param name="message"></param>
            <param name="contexts"></param>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContextException.Contexts">
            <summary>
            Gets the CurrentContext instances involved in the error.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContextException.Message">
            <summary>
            Provides COM objects with version-independent access to the <see cref="P:System.Exception.Message"/> property.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Siriona.Library.Diagnostics.RunContext">
            <summary>
            Represents a trace context for the current stack.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.RunContext.GetAllStakeHolders">
            <summary>
            Gets all stakeholders.
            </summary>
            <returns>All stakeholders.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.RunContext.Save">
            <summary>
            Saves this instance.
            </summary>
            <returns>The saved state</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.RunContext.Restore(Siriona.Library.Diagnostics.RunContextState)">
            <summary>
            Restores the specified previous state.
            </summary>
            <param name="previousState">Previous state.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.RunContext.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContext.Current">
            <summary>
            Gets the current context, for the current thread.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContext.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:Siriona.Library.Diagnostics.RunContext"/> is exists.
            </summary>
            <value><c>true</c> if exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContext.Top">
            <summary>
            Gets the top frame.
            </summary>
            <value>The top frame, if existing; otherwise, <c>null</c>.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContext.AllStakeHolders">
            <summary>
            Gets all stakeholders.
            </summary>
            <value>All stakeholders.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.RunContext.AllData">
            <summary>
            Gets all data.
            </summary>
            <value>All data.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.RunContextState">
            <summary>
            Represents a saved <see cref="T:Siriona.Library.Diagnostics.RunContext"/> state.
            </summary>
        </member>
        <member name="T:Siriona.Library.Diagnostics.SoapErrorWriter">
            <summary>
            Represents a SOAP error writer, an implementation of <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/>
            that send error reports to a Web Service.
            </summary>
            <remarks>
            The following parameters are available through the configuration file :
            <list type="bullet">
                <item>
                    <term>url</term>
                    <description>The URL of the web service page.</description>
                </item>
                <item>
                    <term>namespace</term>
                    <description>The namespace used by the web service. Default is <c>http://library.siriona.com/</c>.</description>
                </item>
                <item>
                    <term>method</term>
                    <description>
                        The name of the method of the web service the writer invoke. Default value is <c>ReportError</c>
                        The method must have the following signature :
                        <code>
                            [WebMethod]
                            public void ReportError(string xmlReport){
                                // error handling
                            }
                        </code>
                    </description>
                </item>
                <item>
                    <term>argument</term>
                    <description>The name of the argument that contains the error report. Default value is <c>xmlReport</c>.</description>
                </item>
                <item>
                    <term>timeout</term>
                    <description>The response timeout, in milliseconds. Default value is <c>5000</c>.</description>
                </item>
            </list>
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="soap" type="Siriona.Library.Diagnostics.SoapErrorWriter, Siriona.Library"&gt;
                &lt;settings&gt;
                  &lt;add name="url" value="http://localhost:8080/Service.asmx" /&gt;
                  &lt;add name="namespace" value="http://sample.domain.org" /&gt;
                  &lt;add name="method" value="SendReport" /&gt;
                  &lt;add name="timeout" value="2000" /gt;
                &lt;/settings&gt;
              &lt;/add&gt;
            &lt;/writers&gt;
            </code>
            </example>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> class.
            </summary>
            <param name="serviceUrl">The web service URL.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="userName">The user name used for authentication.</param>
            <param name="userPassword">The password used for authentication.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.#ctor(System.Uri,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="namespaceName">Name of the Web Service namespace.</param>
            <param name="methodName">Name of the method.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.#ctor(System.Uri,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="namespaceName">Name of the Web Service namespace.</param>
            <param name="methodName">Name of the method.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="userName">The user name used for authentication.</param>
            <param name="userPassword">The password used for authentication.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.#ctor(System.Uri,System.String,System.String,System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.SoapErrorWriter"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="namespaceName">Name of the Web Service namespace.</param>
            <param name="methodName">Name of the method.</param>
            <param name="argumentName">Name of the argument.</param>
            <param name="userName">The user name used for authentication.</param>
            <param name="userPassword">The password used for authentication.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.SoapErrorWriter.Save(System.String)">
            <summary>
            Saves the specified XML string.
            </summary>
            <param name="reportMessageContent">The content of the report, under its XML form.</param>
            <remarks>Implementers have to implement this method.</remarks>
        </member>
        <member name="T:Siriona.Library.Diagnostics.StackFrame">
            <summary>
            Represents a stack frame.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.StackFrame.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.StackFrame"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.StackFrame.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.StackFrame"/> class.
            </summary>
            <param name="stackFrame">The system stack frame.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.StackFrame.#ctor(System.Web.Services.Protocols.LogicalMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.StackFrame"/> class.
            </summary>
            <param name="methodInfo">The logical method info.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.StackFrame.Parse(System.String)">
            <summary>
            Parses the specified signature.
            </summary>
            <param name="signature">The signature.</param>
            <returns>The stack frame information corresponding to the signature.</returns>
        </member>
        <member name="M:Siriona.Library.Diagnostics.StackFrame.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.SourceFileName">
            <summary>
            Gets the name of the source file.
            </summary>
            <value>The name of the source file.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.SourceFileLine">
            <summary>
            Gets the source file line.
            </summary>
            <value>The source file line.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.TypeName">
            <summary>
            Gets the name of the declaring type.
            </summary>
            <value>The name of the declaring type.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.DeclaringTypeName">
            <summary>
            Gets the name of the declaring type.
            </summary>
            <value>The name of the declaring type.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.ReturnTypeName">
            <summary>
            Gets the name of the return type.
            </summary>
            <value>The name of the return type.</value>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.MethodArguments">
            <summary>
            Gets the method arguments.
            </summary>
            <value>The method arguments.</value>
            <remarks>
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> contains the argument name, and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/> contains the argument type.
            </remarks>
        </member>
        <member name="P:Siriona.Library.Diagnostics.StackFrame.Signature">
            <summary>
            Gets the method signature.
            </summary>
            <value>The method signature.</value>
        </member>
        <member name="T:Siriona.Library.Diagnostics.TraceErrorWriter">
            <summary>
            Represents an error writer reporting errors as <see cref="M:System.Diagnostics.Trace.Fail(System.String)"/> alerts.
            </summary>
            <remarks>
            This error writer does not have custom configuration.
            </remarks>
            <example>
            The following configuration is valid for a <see cref="T:Siriona.Library.Diagnostics.TraceErrorWriter"/> :
            <code>
            &lt;writers&gt;
              &lt;add name="trace" type="Siriona.Library.Diagnostics.TraceErrorWriter, Siriona.Library" /&gt;
            &lt;/writers&gt;
            </code>
            </example>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the instance using the specified custom configuration.
            </summary>
            <param name="customConfiguration">The custom configuration.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.Begin(System.Guid)">
            <summary>
            Begins an error report.
            </summary>
            <param name="reportId">The report identifier.</param>
            <remarks>
            	<c>ReportType</c> might be of <see cref="T:Siriona.Library.Diagnostics.ErrorEventType"/> type, but other values are allowed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.BeginSection(Siriona.Library.Diagnostics.ErrorWriterSection)">
            <summary>
            Begins a section with the given type.
            </summary>
            <param name="section">The section type.</param>
            <remarks>Any previously opened section must be closed before opening a new section.</remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.BeginPart(System.String)">
            <summary>
            Begins a part in a section.
            </summary>
            <param name="partName">Name of the part.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.EndPart">
            <summary>
            Ends the currently opened part.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.WriteConfiguration(System.String,System.String)">
            <summary>
            Writes a configuration information.
            </summary>
            <param name="name">The name of the configuration item.</param>
            <param name="value">The value of the configuration item.</param>
            <remarks>
            Calling this method in the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.EndSection">
            <summary>
            Ends an opened section.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.WriteMessage(System.Enum,Siriona.Library.Diagnostics.ErrorEventCriticity,System.String)">
            <summary>
            Writes a user-defined message.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="criticity">The criticity.</param>
            <param name="message">The message</param>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Message"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.WriteException(System.Exception)">
            <summary>
            Writes information about a given exception.
            </summary>
            <param name="exception">The exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.WriteException(System.Exception,Siriona.Library.Collections.NameValueCollection{System.Object})">
            <summary>
            Writes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="exceptionData">Additional data concerning the exception.</param>
            <remarks>Notes to implementers : this method should not serialize inner exceptions.</remarks>
            <remarks>
            Calling this method out of the context of a <see cref="F:Siriona.Library.Diagnostics.ErrorWriterSection.Error"/> is not supported.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.BeginInnerException">
            <summary>
            Begins a new level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.EndInnerException">
            <summary>
            Leaves the current level in the inner exceptions tree.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.End">
            <summary>
            Ends an error report.
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.TraceErrorWriter.Cancel">
            <summary>
            Cancels an error report.
            </summary>
            <remarks>The <c>Cancel</c> method clears the <see cref="T:Siriona.Library.Diagnostics.IErrorWriter"/> state without sending the report.</remarks>
        </member>
        <member name="T:Siriona.Library.Diagnostics.UserState">
            <summary>
            Represents a dictionary user state
            </summary>
        </member>
        <member name="M:Siriona.Library.Diagnostics.UserState.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.UserState"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Diagnostics.UserState.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Diagnostics.UserState"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="T:Siriona.Library.Diagnostics.XmlCharacterCheck">
            <summary>
            Represents the way characters are checked during XML serialization.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.XmlCharacterCheck.Fail">
            <summary>
            Invalid characters are rejected.
            </summary>
        </member>
        <member name="F:Siriona.Library.Diagnostics.XmlCharacterCheck.Bypass">
            <summary>
            Invalid characters are written to the data stream.
            </summary>
        </member>
        <member name="T:Siriona.Library.Duration">
            <summary>
            Represents a duration expressed as a time step count.
            </summary>
        </member>
        <member name="M:Siriona.Library.Duration.#ctor(System.Int64,Siriona.Library.TimeStep)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Duration"/> class.
            </summary>
            <param name="stepCount">The step count.</param>
            <param name="step">The step.</param>
        </member>
        <member name="M:Siriona.Library.Duration.FromMilliseconds(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from millisecondes.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromSeconds(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from secondes.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromMinutes(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from minutes.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromHours(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from hours.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromDays(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from days.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromWeeks(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from weeks.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromMonths(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from months.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.FromYear(System.Int64)">
            <summary>
            Creates a new <see cref="T:Siriona.Library.Duration"/> from year.
            </summary>
            <param name="count">The stepCount.</param>
            <returns>
            The newly created <see cref="T:Siriona.Library.Duration"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.ToTimeSpan(System.DateTime)">
            <summary>
            Converts this instance to a time span using specified start date.
            </summary>
            <param name="startDate">The start date.</param>
            <returns></returns>
            <remarks>The returned time span depends on the specified startDate.
            The duration of a month can be different depending on the start startDate.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Duration.Add(System.DateTime,Siriona.Library.Duration)">
            <summary>
            Adds the specified duration to date.
            </summary>
            <param name="date">The date.</param>
            <param name="duration">The duration.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.Subtract(System.DateTime,Siriona.Library.Duration)">
            <summary>
            Adds the specified duration to date.
            </summary>
            <param name="date">The date.</param>
            <param name="duration">The duration.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.op_Addition(System.DateTime,Siriona.Library.Duration)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="date">The date.</param>
            <param name="duration">The duration.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Duration.op_Subtraction(System.DateTime,Siriona.Library.Duration)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="date">The date.</param>
            <param name="duration">The duration.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Duration.Multiply(Siriona.Library.Duration,System.Int32)">
            <summary>
            Multiplies the specified duration by specified factor.
            </summary>
            <param name="duration">The duration.</param>
            <param name="factor">The factor.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.op_Multiply(Siriona.Library.Duration,System.Int32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="duration">The duration.</param>
            <param name="factor">The factor.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Duration.op_Inequality(Siriona.Library.Duration,Siriona.Library.Duration)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="duration1">The duration1.</param>
            <param name="duration2">The duration2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Duration.op_Equality(Siriona.Library.Duration,Siriona.Library.Duration)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="duration1">The duration1.</param>
            <param name="duration2">The duration2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Duration.Equals(Siriona.Library.Duration)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The duration.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Siriona.Library.Duration.AreSame(Siriona.Library.Duration,Siriona.Library.Duration)">
            <summary>
            Ares the same.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.ConvertTo(Siriona.Library.TimeStep)">
            <summary>
            Converts to specified step.
            </summary>
            <param name="targetStep">The target step.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.TryConvertTo(Siriona.Library.TimeStep,Siriona.Library.Duration@)">
            <summary>
            Converts to specified step.
            </summary>
            <param name="targetStep">The target step.</param>
            <param name="duration">The duration.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Duration.Add(System.DateTime,System.Int64,Siriona.Library.TimeStep)">
            <summary>
            Adds the specified duration to date.
            </summary>
            <param name="date">The date.</param>
            <param name="stepCount">The step count.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Duration.StepCount">
            <summary>
            Gets the duration step count.
            </summary>
            <value>The step count.</value>
        </member>
        <member name="P:Siriona.Library.Duration.Step">
            <summary>
            Gets the duration step.
            </summary>
            <value>The step.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.Repository`1">
            <summary>
            Provides a base class for data repositories.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.#ctor(Siriona.Library.Data.IUnitOfWorkProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.Repository`1"/> class.
            </summary>
            <param name="unitOfWorkProvider">The unit of work provider.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.#ctor(Siriona.Library.EntityModel.IIdentityManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.Repository`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.#ctor(Siriona.Library.EntityModel.IIdentityManager,Siriona.Library.Data.IDataMethodProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.Repository`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.#ctor(Siriona.Library.EntityModel.IDataSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.Repository`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Map``1(Siriona.Library.EntityModel.FieldMapping[])">
            <summary>
            Maps the specified fields.
            </summary>
            <typeparam name="TMapping">The type of the mapping.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Get(System.Object[])">
            <summary>
            Gets the specified keys.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.InternalGet(System.Object[])">
            <summary>
            Internals the get.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Add(`0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Update(`0)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Find(System.Object[])">
            <summary>
            Finds an entity using specified key values.
            </summary>
            <param name="keyValues">The key values.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.FindLike(`0)">
            <summary>
            Finds an entity that has the same key that specified instance or <c>null</c>.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.InsertLookup(`0)">
            <summary>
            Inserts the entity instance if the entity has not yet been added.
            </summary>
            <param name="entity">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.InsertLookup(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the entities instance if the entities have not yet been added.
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.RemoveLike(`0)">
            <summary>
            Removes the entity that has the same key that specified instance.
            </summary>
            <param name="entity">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.Repository`1.Lookup(System.Object[])">
            <summary>
            Lookups the with the specified keys.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.Repository`1.IdentityManager">
            <summary>
            Gets the identity manager.
            </summary>
            <value>The identity manager.</value>
        </member>
        <member name="P:Siriona.Library.EntityModel.Repository`1.DataBuilderProvider">
            <summary>
            Gets the data builder provider.
            </summary>
            <value>The data builder provider.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.SimpleUnitOfWork">
            <summary>
            Represents a simple unit of work to commit changes registered in the 
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.SimpleUnitOfWork.#ctor(Siriona.Library.EntityModel.IEntityTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.SimpleUnitOfWork"/> class.
            </summary>
            <param name="tracker">The tracker.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.SimpleUnitOfWork.Commit">
            <summary>
            Commits the changes to the databas.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.SingleEntityDataSpecification`1">
            <summary>
            Implements the <see cref="T:Siriona.Library.EntityModel.ISingleEntityDataSpecification`1"/> interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.SingleEntityDataSpecification`1.#ctor(System.Boolean,System.Predicate{`0},Siriona.Library.Late{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.SingleEntityDataSpecification`1"/> class.
            </summary>
            <param name="isBound">if set to <c>true</c> [is bound].</param>
            <param name="isMatch">The is match.</param>
            <param name="match">The match.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.SingleEntityDataSpecification`1.IsMatch(`0)">
            <summary>
            Determines whether the specified entity is match.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.SingleEntityDataSpecification`1.GetMatch">
            <summary>
            Gets the match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.SingleEntityDataSpecification`1.GetMatchs">
            <summary>
            Gets the matchs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.SingleEntityDataSpecification`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.SubEntityTracker">
            <summary>
            Represents a sub entity tracker.
            </summary>
        </member>
        <member name="T:Siriona.Library.EntityModel.SubEntityTracker`1">
            <summary>
            Implements the <see cref="T:Siriona.Library.EntityModel.SubEntityTracker"/> class for a specific type.
            </summary>
            <typeparam name="TSubEntity">The type of the sub entity.</typeparam>
        </member>
        <member name="T:Siriona.Library.EntityModel.TrackingRepository`1">
            <summary>
            Provides a base class for tracking repositories.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.EntityModel.TrackingRepository`1.#ctor(Siriona.Library.EntityModel.IEntityTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.TrackingRepository`1"/> class.
            </summary>
            <param name="tracker">The tracker.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.TrackingRepository`1.Track``1(System.Action{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tracks the sub entities of specified type.
            </summary>
            <typeparam name="TSubEntity">The type of the sub entity.</typeparam>
            <param name="add">The method to use when adding a sub entity.</param>
            <param name="update">The method to use when updating a sub entity.</param>
            <param name="delete">The method to use when deleting a sub entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.TrackingRepository`1.Add(`0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.TrackingRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.TrackingRepository`1.Find(System.Object[])">
            <summary>
            Finds an entity using specified key values.
            </summary>
            <param name="keyValues">The key values.</param>
            <returns>The entity or <c>null</c> if the entity could not be found.</returns>
        </member>
        <member name="P:Siriona.Library.EntityModel.TrackingRepository`1.Tracker">
            <summary>
            Gets the tracker.
            </summary>
            <value>The tracker.</value>
        </member>
        <member name="T:Siriona.Library.EntityModel.UnitOfWork">
            <summary>
            implements the base unit of work pattern.
            </summary>
        </member>
        <member name="M:Siriona.Library.EntityModel.UnitOfWork.#ctor(Siriona.Library.Injection.IIocContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.EntityModel.UnitOfWork"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Siriona.Library.EntityModel.UnitOfWork.GetRepository``1">
            <summary>
            Gets the repository.
            </summary>
            <typeparam name="TRepository">The type of the repository.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.UnitOfWork.GetService``1">
            <summary>
            Gets the service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.UnitOfWork.GetService``1(System.String)">
            <summary>
            Gets the service with specified name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EntityModel.UnitOfWork.SubmitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
        <member name="P:Siriona.Library.EntityModel.UnitOfWork.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:Siriona.Library.EnumUtility">
            <summary>
            Provides utility for the enum class.
            </summary>
        </member>
        <member name="M:Siriona.Library.EnumUtility.GetEnumValue(System.String)">
            <summary>
            Gets the enum value.
            </summary>
            <param name="enumName">The fully qualified enum name.</param>
            <returns>The enum value.</returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.Parse``1(System.String)">
            <summary>
            Parses the specified text.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.Parse``1(System.String,System.Boolean)">
            <summary>
            Parses the specified text.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <param name="ignoreCase">if set to <c>true</c>, ignore case.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.TryParse``1(System.String,``0@)">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Tries the parse.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text">The text.</param>
            <param name="ignoreCase">if set to <c>true</c>, ignore case.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.GetValues``1">
            <summary>
            Gets the values of an enum type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.Enumerate``1(``0)">
            <summary>
            Enumerates the specified value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value.</param>
            <returns>An enumeration of values contained by <c>value</c>.</returns>
        </member>
        <member name="M:Siriona.Library.EnumUtility.GetNames``1">
            <summary>
            Gets the names of an enum type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EventModel.Handle`1">
            <summary>
            Provides interfaces to handle events.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.EventModel.Handle`1.All">
            <summary>
            Implemented by handlers that handle all messages of specified type.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.Handle`1.All.Handle(`0)">
            <summary>
            Handles the specified event message.
            </summary>
            <param name="message">The event message</param>
        </member>
        <member name="T:Siriona.Library.EventModel.Handle`1.Selected">
            <summary>
            Implemented by handlers that handle selected messages of specified type.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.Handle`1.Selected.Accept(`0)">
            <summary>
            Accepts or reject the specified event message.
            </summary>
            <param name="message">The event message</param>
            <returns><c>true</c> if the message is accepted, otherwise <c>false</c></returns>
        </member>
        <member name="T:Siriona.Library.EventModel.IPublisher">
            <summary>
            Represents a class that can publish an event to subscribers.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.IPublisher.Publish(Siriona.Library.EventModel.Event)">
            <summary>
            Publish the specified event to subscribers.
            </summary>
            <param name="event">The event to publish.</param>
        </member>
        <member name="T:Siriona.Library.EventModel.ISender">
            <summary>
            Represents a class that can send an event to a handler.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.ISender.Send(Siriona.Library.EventModel.Command)">
            <summary>
            Sends the specified command to handler.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="T:Siriona.Library.EventModel.EventSource">
            <summary>
            Represent a class that can send events on the service bus.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.EventPublisher">
            <summary>
            Provides registration for the current event publisher.
            </summary>
        </member>
        <member name="P:Siriona.Library.EventModel.EventPublisher.Current">
            <summary>
            Gets or sets the current event publisher.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Siriona.Library.EventModel.EventPublisher.Default">
            <summary>
            Gets or sets the default event publisher.
            </summary>
            <value>The default.</value>
        </member>
        <member name="T:Siriona.Library.EventModel.EventSourceExtensions">
            <summary>
            Provides extension methods on <see cref="T:Siriona.Library.EventModel.EventSource"/> to publish events and send commands.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.EventSourceExtensions.Publish``1(Siriona.Library.EventModel.EventSource,``0)">
            <summary>
            Publishes the specified event.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="source">The source.</param>
            <param name="event">The event.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.EventSourceExtensions.Send``1(Siriona.Library.EventModel.EventSource,System.Uri,``0)">
            <summary>
            Sends the specified command to destination.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.EventSourceExtensions.Send``1(Siriona.Library.EventModel.EventSource,System.String,``0)">
            <summary>
            Sends the specified command to destination.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.EventSourceExtensions.RetryLater(Siriona.Library.EventModel.EventSource)">
            <summary>
            Retries later.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.EventSourceExtensions.RetryLater(Siriona.Library.EventModel.EventSource,System.TimeSpan)">
            <summary>
            Retries later with given delay.
            </summary>
            <param name="source">The source.</param>
            <param name="delay">The delay.</param>
        </member>
        <member name="T:Siriona.Library.EventModel.IEventPublisher">
            <summary>
            Represents an event publisher.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.IEventPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified message.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The @event.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.IEventPublisher.Send``1(System.Uri,``0)">
            <summary>
            Sends the message to specified destination.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="destination">The destination.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.IEventPublisher.Request``1(System.Uri,``0,System.Guid)">
            <summary>
            Sends the message to specified destination.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="destination">The destination.</param>
            <param name="command">The command.</param>
            <param name="correlationId">The correlation id.</param>
        </member>
        <member name="M:Siriona.Library.EventModel.IEventPublisher.RetryLater(System.TimeSpan)">
            <summary>
            Retries later with given delay.
            </summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="T:Siriona.Library.EventModel.IRequestCall">
            <summary>
            Represents a request call.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.IRequestCall.Expect``1">
            <summary>
            Specifies expectation of the specified response type.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EventModel.IRequestCall.Expect``1(System.TimeSpan)">
            <summary>
            Specifies expectation of the specified response type.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EventModel.IRequestCall.Expect``1(System.Object)">
            <summary>
            Specifies expectation of the specified response type.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="asyncState">State of the async.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.EventModel.IRequestCall.Expect``1(System.TimeSpan,System.Object)">
            <summary>
            Specifies expectation of the specified response type.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="timeout">The timeout.</param>
            <param name="asyncState">State of the async.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EventModel.Broadcast">
            <summary>
            Represents a broadcasted command.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Event">
            <summary>
            Indicates that the message is an event.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Message">
            <summary>
            Marker interface for messages.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Command">
            <summary>
            Indicates that the message is a command.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Request">
            <summary>
            Indicates that the message is a request.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Response">
            <summary>
            Indicates that the message is a response.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Transient">
            <summary>
            Indicates that the message is transient.
            </summary>
        </member>
        <member name="P:Siriona.Library.EventModel.Transient.TimeToLive">
            <summary>
            Gets the time to live.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="T:Siriona.Library.EventModel.Labeled">
            <summary>
            Indicates that a message has a custom label.
            </summary>
        </member>
        <member name="P:Siriona.Library.EventModel.Labeled.Label">
            <summary>
            Gets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Siriona.Library.EventModel.Sharded">
            <summary>
            Represents a message sharded on given key.
            </summary>
        </member>
        <member name="P:Siriona.Library.EventModel.Sharded.ShardKey">
            <summary>
            Gets the key used to partition messages.
            </summary>
            <value>The shard key.</value>
        </member>
        <member name="T:Siriona.Library.EventModel.PrivateMessage">
            <summary>
            Represents a message that is not advertised on the bus.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.MessageExtensions">
            <summary>
            Provides extension methods for messages.
            </summary>
        </member>
        <member name="M:Siriona.Library.EventModel.MessageExtensions.TimeToLive(Siriona.Library.EventModel.Message)">
            <summary>
            Gets the time to live of the message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.EventModel.ReplyTo`1">
            <summary>
            Provides an interface to reply to request messages.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
        </member>
        <member name="T:Siriona.Library.EventModel.ReplyTo`1.All">
            <summary>
            Provides intefaces for handlers that do not filter messages.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.ReplyTo`1.All.With`1">
            <summary>
            Implemented by handler that reply to specified event message type.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:Siriona.Library.EventModel.ReplyTo`1.All.With`1.Handle(`0)">
            <summary>
            Handles the specified request event message and returns a reply.
            </summary>
            <param name="request">The request.</param>
            <returns>The reply.</returns>
        </member>
        <member name="T:Siriona.Library.EventModel.ReplyTo`1.Selected">
            <summary>
            Provides intefaces for handlers that filter messages.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.ReplyTo`1.Selected.With`1">
            <summary>
            Implemented by handler that reply to specified event message type.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:Siriona.Library.EventModel.ReplyTo`1.Selected.With`1.Accept(`0)">
            <summary>
            Indicates wether the specified request can be handled.
            </summary>
            <param name="request">The request.</param>
            <returns>The reply.</returns>
        </member>
        <member name="T:Siriona.Library.EventModel.Sagas.CorrelatedBy`1">
            <summary>
            Indicates that a saga is correlated by specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Siriona.Library.EventModel.Sagas.CorrelatedBy`1.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Siriona.Library.EventModel.Sagas.Saga">
            <summary>
            Indicates that the class is a saga.
            </summary>
        </member>
        <member name="T:Siriona.Library.EventModel.Sagas.Orchestrate`1">
            <summary>
            Indicates that the saga orchestrates specified message.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.EventModel.Sagas.InitiatedBy`1">
            <summary>
            Indicates that the saga is initiated by specified message.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Enables CallerMemberName attribute from C#5 in previous .Net versions.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>
            Enables CallerMemberName attribute from C#5 in previous .Net versions.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Enables CallerMemberName attribute from C#5 in previous .Net versions.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>
            Enables CallerMemberName attribute from C#5 in previous .Net versions.
            </summary>
        </member>
        <member name="T:Siriona.Library.Globalization.CurrencyInfoFlags">
            <summary>
            Represents flags for a currency.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CurrencyInfoFlags.None">
            <summary>
            No flag is set.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CurrencyInfoFlags.Inactive">
            <summary>
            Currency is no longer active (in use).
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CurrencyInfoFlags.UnitOfAccount">
            <summary>
            Currency is a unit of account and does not correspond to a commonly used currency.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CurrencyInfoFlags.Complementary">
            <summary>
            Currency is a complementary currency.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CurrencyInfoFlags.All">
            <summary>
            All flags are set.
            </summary>
        </member>
        <member name="T:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.Globalization.CurrencyInfoFlags"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.Count(Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.Contains(Siriona.Library.Globalization.CurrencyInfoFlags,Siriona.Library.Globalization.CurrencyInfoFlags[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.AddIf(Siriona.Library.Globalization.CurrencyInfoFlags,System.Boolean,Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.RemoveIf(Siriona.Library.Globalization.CurrencyInfoFlags,System.Boolean,Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.Add(Siriona.Library.Globalization.CurrencyInfoFlags,Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.Remove(Siriona.Library.Globalization.CurrencyInfoFlags,Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoFlagsExtensionMethods.Differences(Siriona.Library.Globalization.CurrencyInfoFlags,Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Retrieves differences between two sets of flags.
            </summary>
            <param name="currentFlags">The current flags.</param>
            <param name="previousFlags">The previous flags.</param>
            <returns>The added and removed flags.</returns>
        </member>
        <member name="T:Siriona.Library.Globalization.CurrencyInfoTypeConverter">
            <summary>
            Represents a converter for <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Siriona.Library.Globalization.GlobalizationPageAttribute">
            <summary>
            Provides a metadata attribute that specifies a page for the globalization.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationPageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationPageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationPageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
            <param name="product">The product.</param>
            <param name="page">The page.</param>
        </member>
        <member name="P:Siriona.Library.Globalization.GlobalizationPageAttribute.Product">
            <summary>
            Gets the product.
            </summary>
            <value>The product.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.GlobalizationPageAttribute.Page">
            <summary>
            Gets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="T:Siriona.Library.Globalization.ILocalizer">
            <summary>
            Provides localization services.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.ILocalizer.GetText(System.Enum,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized text associated with the specified key.
            </summary>
            <param name="messageKey">The message key.</param>
            <param name="culture">The culture.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.ILocalizer.GetText(System.Enum,System.Globalization.CultureInfo,System.Globalization.CultureInfo@)">
            <summary>
            Gets the text.
            </summary>
            <param name="messageKey">The message key.</param>
            <param name="culture">The culture.</param>
            <param name="actualCulture">The actual culture.</param>
            <returns>The text.</returns>
        </member>
        <member name="T:Siriona.Library.Globalization.TextLocale">
            <summary>
            Represent a text for a specific culture.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.TextLocale"/> class.
            </summary>
            <param name="culture">The culture.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.#ctor(System.Globalization.CultureInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.TextLocale"/> class.
            </summary>
            <param name="culture">The culture.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.Equals(Siriona.Library.Globalization.TextLocale)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.op_Equality(Siriona.Library.Globalization.TextLocale,Siriona.Library.Globalization.TextLocale)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.TextLocale.op_Inequality(Siriona.Library.Globalization.TextLocale,Siriona.Library.Globalization.TextLocale)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Siriona.Library.Globalization.TextLocale.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.TextLocale.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Siriona.Library.Globalization.LocalizedText">
            <summary>
            Represents a text with several localizations.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.LocalizedText"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.#ctor(Siriona.Library.Globalization.TextLocale[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.LocalizedText"/> class.
            </summary>
            <param name="locales">The locales.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Globalization.TextLocale})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.LocalizedText"/> class.
            </summary>
            <param name="locales">The locales.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.#ctor(Siriona.Library.Globalization.CultureTree{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.LocalizedText"/> class.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.TryGetValue(System.Globalization.CultureInfo,System.String@,Siriona.Library.Globalization.CultureFallbackType)">
            <summary>
            Tries to get a localization for specified culture.
            </summary>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="fallbackType">Type of the fallback.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.TryGetValue(System.Globalization.CultureInfo,System.String@)">
            <summary>
            Tries to get a localization for specified culture.
            </summary>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.op_Implicit(Siriona.Library.Globalization.LocalizedText)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Globalization.LocalizedText"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="text">The text.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.Equals(Siriona.Library.Globalization.LocalizedText)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.op_Equality(Siriona.Library.Globalization.LocalizedText,Siriona.Library.Globalization.LocalizedText)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.op_Inequality(Siriona.Library.Globalization.LocalizedText,Siriona.Library.Globalization.LocalizedText)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedText.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Siriona.Library.Globalization.LocalizedText.Item(System.Globalization.CultureInfo)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified culture.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Globalization.LocalizedText.Cultures">
            <summary>
            Gets the cultures.
            </summary>
            <value>The cultures.</value>
        </member>
        <member name="T:Siriona.Library.Globalization.LocalizedTextConverter">
            <summary>
            Provides conversion to/from string for <see cref="T:Siriona.Library.Globalization.LocalizedText"/>
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedTextConverter.ConvertTo(Siriona.Library.Globalization.LocalizedText)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.LocalizedTextConverter.ConvertFrom(System.String)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Siriona.Library.Hosting.ConsoleWriter">
            <summary>
            Implements <see cref="T:Siriona.Library.Hosting.IConsoleWriter"/> using the <see cref="T:System.Console"/> class.
            </summary>
        </member>
        <member name="T:Siriona.Library.Hosting.IConsoleWriter">
            <summary>
            Represents a way to output to the console.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.IConsoleWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Write specified formatted text to the console.
            </summary>
            <param name="text">The text format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.ConsoleWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Write specified formatted text to the console.
            </summary>
            <param name="text">The text format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="T:Siriona.Library.Hosting.Host">
            <summary>
            Provides a servic host for service bus.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.Host.Run(Siriona.Library.Hosting.IHostedService,Siriona.Library.Hosting.ServiceDescription,System.String[])">
            <summary>
            Runs the host for specified bus.
            </summary>
            <param name="bus">The bus.</param>
            <param name="description">The description.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.Host.Run(Siriona.Library.Hosting.IHostedService,Siriona.Library.Hosting.IHostedService,Siriona.Library.Hosting.ServiceDescription,System.String[])">
            <summary>
            Runs the host for specified buses.
            </summary>
            <param name="bus1">The bus1.</param>
            <param name="bus2">The bus2.</param>
            <param name="description">The description.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.Host.Run(Siriona.Library.Hosting.IHostedService[],Siriona.Library.Hosting.ServiceDescription,System.String[],Siriona.Library.Hosting.IConsoleWriter)">
            <summary>
            Runs the host for specified buses.
            </summary>
            <param name="services"></param>
            <param name="description"></param>
            <param name="args"></param>
            <param name="consoleWriter"></param>
        </member>
        <member name="M:Siriona.Library.Hosting.Host.Run(Siriona.Library.Hosting.IHostedService)">
            <summary>
            Run specified service.
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Siriona.Library.Hosting.HostedServiceInstaller">
            <summary>
            Provides installation helpers.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.HostedServiceInstaller.Install(System.Object,Siriona.Library.Hosting.ServiceCredential)">
            <summary>
            Installs the specified target if installable.
            </summary>
            <param name="target">The target.</param>
            <param name="credential">The credential.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.HostedServiceInstaller.Install(System.Object,Siriona.Library.Hosting.ServiceCredential,Siriona.Library.Hosting.IConsoleWriter)">
            <summary>
            Installs the specified target if installable.
            </summary>
            <param name="target">The target.</param>
            <param name="credential">The credential.</param>
            <param name="consoleWriter">The console writer.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.HostedServiceInstaller.Uninstall(System.Object,Siriona.Library.Hosting.ServiceCredential)">
            <summary>
            Uninstalls the specified target if uninstallable.
            </summary>
            <param name="target">The target.</param>
            <param name="credential">The credential.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.HostedServiceInstaller.Uninstall(System.Object,Siriona.Library.Hosting.ServiceCredential,Siriona.Library.Hosting.IConsoleWriter)">
            <summary>
            Uninstalls the specified target if uninstallable.
            </summary>
            <param name="target">The target.</param>
            <param name="credential">The credential.</param>
            <param name="consoleWriter">The console writer.</param>
        </member>
        <member name="T:Siriona.Library.Hosting.HostService">
            <summary>
            Implements a service host for service bus.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.HostService.#ctor(System.String,Siriona.Library.Hosting.IHostedService[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Hosting.HostService"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="buses">The buses.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.HostService.OnStart(System.String[])">
            <summary>
            When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.
            </summary>
            <param name="args">Data passed by the start command.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.HostService.OnStop">
            <summary>
            When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.HostService.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase"/>.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Siriona.Library.Hosting.IConnectableHostedService">
            <summary>
            Represents a service hosted by the service host that requires 
            a connection to an external infrastructure.
            </summary>
        </member>
        <member name="T:Siriona.Library.Hosting.IHostedService">
            <summary>
            Represents a service hosted by the service host.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.IHostedService.Start">
            <summary>
            Starts the hosted service.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.IHostedService.Stop">
            <summary>
            Stops the hosted service.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.IConnectableHostedService.Connect">
            <summary>
            Connects the service to the infrastructure.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.IConnectableHostedService.Disconnect">
            <summary>
            Disconnects the service from the infrastructure.
            </summary>
        </member>
        <member name="T:Siriona.Library.Hosting.Installable">
            <summary>
            Defines a method to install bus services.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.Installable.Install(Siriona.Library.Hosting.ServiceCredential,Siriona.Library.Hosting.IConsoleWriter)">
            <summary>
            Installs with the specified credential.
            </summary>
            <param name="credential">The credential.</param>
            <param name="consoleWriter"></param>
        </member>
        <member name="M:Siriona.Library.Hosting.Installable.Uninstall(Siriona.Library.Hosting.ServiceCredential,Siriona.Library.Hosting.IConsoleWriter)">
            <summary>
            Uninstalls with the specified credential.
            </summary>
            <param name="credentials">The credential.</param>
            <param name="consoleWriter"></param>
        </member>
        <member name="T:Siriona.Library.Hosting.IStopNotifiedHostedService">
            <summary>
            Represents a service that needs to be called when the application is stopped without any problem.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.IStopNotifiedHostedService.Stopped(System.Boolean)">
            <summary>
            Called when the service is stopped without any problem.
            </summary>
        </member>
        <member name="T:Siriona.Library.Hosting.NullConsoleWriter">
            <summary>
            Implements a consolewriter thtat does nothing.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.NullConsoleWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Does nothing in this implementation.
            </summary>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="T:Siriona.Library.Hosting.ProjectInstaller">
            <summary>
            Implements a generic host installer.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.ProjectInstaller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Hosting.ProjectInstaller"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.ProjectInstaller.Install(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, performs the installation.
            </summary>
            <param name="stateSaver">An <see cref="T:System.Collections.IDictionary"/> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
            <exception cref="T:System.ArgumentException">
            The <paramref name="stateSaver"/> parameter is null.
            </exception>
            <exception cref="T:System.Exception">
            An exception occurred in the <see cref="E:System.Configuration.Install.Installer.BeforeInstall"/> event handler of one of the installers in the collection.
            -or-
            An exception occurred in the <see cref="E:System.Configuration.Install.Installer.AfterInstall"/> event handler of one of the installers in the collection.
            </exception>
        </member>
        <member name="P:Siriona.Library.Hosting.ProjectInstaller.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Siriona.Library.Hosting.ProjectInstaller.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="T:Siriona.Library.Hosting.ServiceCredential">
            <summary>
            Represents the credentials used to install a service.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.ServiceCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Hosting.ServiceCredential"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Siriona.Library.Hosting.ServiceCredential.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:Siriona.Library.Hosting.ServiceCredential.Password">
            <summary>
            Gets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="T:Siriona.Library.Hosting.ServiceDescription">
            <summary>
            Provides the description needed for host service installation.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.ServiceDescription.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Hosting.ServiceDescription"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.ServiceDescription.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Hosting.ServiceDescription"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="displayName">The display name.</param>
            <param name="description">The description.</param>
            <param name="servicesDependedOn">The dependencies.</param>
        </member>
        <member name="P:Siriona.Library.Hosting.ServiceDescription.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Hosting.ServiceDescription.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Siriona.Library.Hosting.ServiceDescription.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Siriona.Library.Hosting.ServiceDescription.ServicesDependedOn">
            <summary>
            Gets the dependencies.
            </summary>
        </member>
        <member name="T:Siriona.Library.Hosting.StopNotifiedHostedService">
            <summary>
            Implements a service that is notified on host stop.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.StopNotifiedHostedService.#ctor(Siriona.Library.Action,Siriona.Library.Action,System.Action{System.Boolean})">
            <summary>
            Creates a instance of the service with specified callbacks.
            </summary>
            <param name="start">The callback called when the service starts.</param>
            <param name="stop">The callback called when the services stops.</param>
            <param name="stopped">The callback called when the service has finished stopping.</param>
        </member>
        <member name="M:Siriona.Library.Hosting.StopNotifiedHostedService.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.StopNotifiedHostedService.Start">
            <summary>
            Starts the service and call the underlying callback.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.StopNotifiedHostedService.Stop">
            <summary>
            Stopd the service and call the underlying callback.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.StopNotifiedHostedService.Stopped(System.Boolean)">
            <summary>
            Call the underlying callback when the service has stopped running.
            </summary>
            <param name="stoppedWithoutErrors"></param>
        </member>
        <member name="T:Siriona.Library.Hosting.TraceConsoleWriter">
            <summary>
            Implements the <see cref="T:Siriona.Library.Hosting.IConsoleWriter"/> interface using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Hosting.TraceConsoleWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Write specified formatted text to the console.
            </summary>
            <param name="text">The text format.</param>
            <param name="args">The format arguments.</param>
        </member>
        <member name="T:Siriona.Library.FastActivator">
            <summary>
            Like Activator, only much faster. 
            </summary>
        </member>
        <member name="M:Siriona.Library.FastActivator.BuildCtorWrapper(System.Type)">
            <summary>
            This should be used to get a delegate to a function that return a new instance of the provided type.
            </summary>
            <param name="typeToCreate"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.BuildCtorWrapper(System.Reflection.ConstructorInfo)">
            <summary>
            Wrap a ctor in a func.
            </summary>
            <param name="ctorInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.CreateInstance(System.Type)">
            <summary>
            In case we don't need to factor many, or are too lazy, this function can be used too.
            Warning: exclusive dictionary lookup inside... Neglectible compared to the framework's activator bulk.
            But still...
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.GetFactory``1(System.Type)">
            <summary>
            returns a Typed factory to access a constructor matching the delegate arguments
            </summary>
            <typeparam name="TFunc"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.CreateInstance``1(System.Type,``0)">
            <summary>
            Creates type instance.
            </summary>
            <param name="t"></param>
            <param name="arg1"></param>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.CreateInstance``2(System.Type,``0,``1)">
            <summary>
            Creates type instance.
            </summary>
            <param name="t"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.CreateInstance``3(System.Type,``0,``1,``2)">
            <summary>
            Creates type instance.
            </summary>
            <param name="t"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.CreateInstance``4(System.Type,``0,``1,``2,``3)">
            <summary>
            Creates type instance.
            </summary>
            <param name="t"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.FastActivator.CreateInstance``5(System.Type,``0,``1,``2,``3,``4)">
            <summary>
            Creates type instance.
            </summary>
            <param name="t"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Injection.IInstanceManager">
            <summary>
            Manage injection instances in a specific context.
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.IInstanceManager.GetValue(System.Object)">
            <summary>
            Gets an instance by its key.
            </summary>
            <param name="key">The instance key.</param>
            <returns>The instance value.</returns>
        </member>
        <member name="M:Siriona.Library.Injection.IInstanceManager.SetValue(System.Object,System.Object)">
            <summary>
            Sets an instance associated to a key.
            </summary>
            <param name="key">The instance key.</param>
            <param name="value">The instance value.</param>
        </member>
        <member name="M:Siriona.Library.Injection.IInstanceManager.RemoveValue(System.Object)">
            <summary>
            Removes the value associated with the key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Siriona.Library.Injection.RequestIocContext">
            <summary>
            Implements the <see cref="T:Siriona.Library.Injection.IInstanceManager"/> interface for a request.
            </summary>
        </member>
        <member name="F:Siriona.Library.Injection.RequestIocContext.GetCurrent">
            <summary>
            Gets the current instance manager.
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.RequestIocContext.StartRequest">
            <summary>
            Start a request content.
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.RequestIocContext.EndRequest">
            <summary>
            Ends a request context.
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.RequestIocContext.Dispose">
            <summary>
            Dispose any disposable instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.RequestIocContext.GetValue(System.Object)">
            <summary>
            Gets the value from key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.RequestIocContext.SetValue(System.Object,System.Object)">
            <summary>
            Set the value for specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Siriona.Library.Injection.RequestIocContext.RemoveValue(System.Object)">
            <summary>
            Remove value for specified key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Siriona.Library.IO.EnvelopeReader">
            <summary>
            Reads a stream writen with a <see cref="T:Siriona.Library.IO.EnvelopeWriter"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeReader.#ctor(System.Security.Cryptography.HashAlgorithm,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Creates a instance of <see cref="T:Siriona.Library.IO.EnvelopeReader"/>.
            </summary>
            <param name="hasher"></param>
            <param name="stream"></param>
            <param name="reverseHash"></param>
            <param name="liveStream"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeReader.Dispose">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeReader.Read">
            <summary>
            Read a chunk of data.
            </summary>
            <returns>The chunk ok data or null when at the end of the stream.</returns>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeReader.Restart">
            <summary>
            Restart a the stream begining.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.EnvelopeReader.Position">
            <summary>
            Gets / sets the underlying stream position.
            </summary>
        </member>
        <member name="T:Siriona.Library.IO.EnvelopeWriter">
            <summary>
            Writes data using a hashed envelope in a stream.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeWriter.#ctor(System.Security.Cryptography.HashAlgorithm,System.IO.Stream,System.Boolean)">
            <summary>
            Creates an instance of an envelope writer.
            </summary>
            <param name="hasher">The hasher used to check data integrity.</param>
            <param name="stream">The underlying stream to write to.</param>
            <param name="reverseHash"></param>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeWriter.Dispose">
            <summary>
            Closes the underlying stream.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.EnvelopeWriter.Write(System.Byte[])">
            <summary>
            Writes the data with a length prefix and a trailing hash.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Siriona.Library.IO.EnvelopeWriter.Position">
            <summary>
            Gets the position in the underlying stream.
            </summary>
        </member>
        <member name="T:Siriona.Library.IO.ZLibStream">
            <summary>
            Represents a basic ZLib compression stream.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.IO.ZLibStream"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.ZLibStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="P:Siriona.Library.IO.ZLibStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>true if the stream supports reading; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.IO.ZLibStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>true if the stream supports seeking; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.IO.ZLibStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>true if the stream supports writing; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.IO.ZLibStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="P:Siriona.Library.IO.ZLibStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="T:Siriona.Library.Net.BandwidthLimiter">
            <summary>
            Represents a bandwidth limiter for <see cref="T:Siriona.Library.Net.HttpServiceRequest"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.BandwidthLimiter.Wait">
            <summary>
            Waits this instance for bandwidth
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.DnsTools.MXRecord">
            <summary>
            Represents an Mx Record data.
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.DnsTools.MXRecord.Preference">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.DnsTools.MXRecord.Exchange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.DnsTools.MXRecord.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Siriona.Library.Net.DnsTools.MxRecordQuery">
            <summary>
            Represents a Mx record query.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.DnsTools.MxRecordQuery.#ctor(System.String)">
            <summary>
            Create an instance of the <see cref="T:Siriona.Library.Net.DnsTools.MxRecordQuery"/> class.
            </summary>
            <param name="domainQuery"></param>
        </member>
        <member name="M:Siriona.Library.Net.DnsTools.MxRecordQuery.GetMXRecords">
            <summary>
            Get the mx records.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Net.EventBandwidthLimiter">
            <summary>
            Provides a bandwidth limiter for <see cref="T:Siriona.Library.Net.HttpServiceRequest"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.EventBandwidthLimiter.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.BandwidthLimiter"/> class.
            </summary>
            <param name="windowSize">Size of the window.</param>
            <param name="eventCount">The event count.</param>
        </member>
        <member name="M:Siriona.Library.Net.EventBandwidthLimiter.Wait">
            <summary>
            Waits this instance.
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.HttpCallMethod">
            <summary>
            Defines call methods for Http services.
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.HttpCallMethod.Get">
            <summary>
            Use the GET method.
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.HttpCallMethod.Post">
            <summary>
            Use the POST method.
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.HttpServerApi">
            <summary>
            <para>
            Exposes HTTP Server API functionality.  See here for more info: <a href="http://msdn.microsoft.com/en-us/library/aa364510(v=VS.85).aspx">http://msdn.microsoft.com/en-us/library/aa364510(v=VS.85).aspx</a>
            </para>
            </summary>
            <remarks>
            <para>
            The HTTP Server API enables applications to communicate over HTTP without using Microsoft Internet Information Server (IIS).
            Applications can register to receive HTTP requests for particular URLs, receive HTTP requests, and send HTTP responses. The HTTP Server API
            includes SSL support so that applications can exchange data over secure HTTP connections without IIS. It is also designed to work with I/O
            completion ports.
            </para>
            <para>
            The HTTP Server API is supported on Windows Server 2003 operating systems and on Windows XP with Service Pack 2 (SP2). Be aware that
            Microsoft IIS 5 running on Windows XP with SP2 is not able to share port 80 with other HTTP applications running simultaneously.
            </para>
            <para>
            The HTTP Server API provides developers with a low-level interface to the server side of the HTTP functionality as defined in RFC 2616.
            The API enables an application to receive HTTP requests directed to URLs and send HTTP responses. For sending dynamic responses, the ISAPI
            or ASP.NET interfaces are recommended.
            </para>
            <para>
            The HTTP Server API enables multiple applications to coexist on a system, sharing the same TCP port (for example, port 80 for HTTP or
            port 443 for HTTPS) and serving different parts of the URL namespace.
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.Net.HttpServerApi.ModifyNamespaceReservation(System.String,System.String,Siriona.Library.Net.HttpServerApiConfigurationAction)">
            <summary>
            Adds/updates or deletes an http(s) URL namespace reservation for a specified Windows user or group.
            </summary>
            <param name="prefix">The http(s) URL to modify the reservation for.</param>
            <param name="windowsAccountName">The Windows account name (user or group) to modify the reservation for.</param>
            <param name="configurationAction">The configuration action to perform (e.g. add/update or delete).</param>
            <remarks>
            This method must be called under a user context with local administrative privledges.  See
            <a href="http://msdn.microsoft.com/en-us/magazine/cc163531.aspx">http://msdn.microsoft.com/en-us/magazine/cc163531.aspx</a> about why this is necessary.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Net.HttpServerApi.ModifySslCertificateToAddressBinding(System.String,System.Int32,System.Byte[],System.Security.Cryptography.X509Certificates.StoreName,Siriona.Library.Net.HttpServerApiConfigurationAction)">
            <summary>Add/updates or deletes an SSL certificate binding for a specified IP address/port.</summary>
            <remarks>
            The provided SSL certificate data in <paramref name="sslHash"/> is added/updated/deleted in the certificate
            store specified by <paramref name="targetSslCertStoreName"/>.
            </remarks>
            <param name="address">The IP address to bind the SSL certificate to.</param>
            <param name="port">The port to bind the SSL certificate to.</param>
            <param name="sslHash">The hash of the SSL certificate to bind.</param>
            <param name="targetSslCertStoreName">The target certificate store for the SSL certificate.</param>
            <param name="configurationAction">The configuration action to perform (e.g. add/update or delete).</param>
        </member>
        <member name="T:Siriona.Library.Net.HttpServerApiConfigurationAction">
            <summary>Specifies the HTTP Server API configuration action to perform.</summary>
        </member>
        <member name="F:Siriona.Library.Net.HttpServerApiConfigurationAction.AddOrUpdate">
            <summary>Add or update configuration data.</summary>
        </member>
        <member name="F:Siriona.Library.Net.HttpServerApiConfigurationAction.Delete">
            <summary>Delete configuration data.</summary>
        </member>
        <member name="T:Siriona.Library.Net.HttpServiceException">
            <summary>
            Represents an http service webException
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceException.#ctor(System.Net.WebException,Siriona.Library.Net.IHttpServiceResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.HttpServiceException"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="response">The response.</param>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceException.WebException">
            <summary>
            Gets or sets the web exception.
            </summary>
            <value>The web exception.</value>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceException.HttpServiceResponse">
            <summary>
            Gets or sets the HTTP service response.
            </summary>
            <value>The HTTP service response.</value>
        </member>
        <member name="T:Siriona.Library.Net.HttpServiceProvider">
            <summary>
            Represents a factory for <see cref="T:Siriona.Library.Net.IHttpServiceRequest"/>
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.IHttpServiceProvider">
            <summary>
            Represents a Http Service Provider
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.IHttpServiceProvider.GetHttpServiceRequest(System.String,System.String,Siriona.Library.Net.HttpCallMethod)">
            <summary>
            Gets the HTTP service request.
            </summary>
            <param name="url">The URL.</param>
            <param name="postParameter">The post parameter.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.IHttpServiceProvider.GetHttpServiceRequest(System.String,Siriona.Library.Net.HttpCallMethod)">
            <summary>
            Gets the HTTP service request.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceProvider.GetHttpServiceRequest(System.String,System.String,Siriona.Library.Net.HttpCallMethod)">
            <summary>
            Gets the HTTP service request.
            </summary>
            <param name="url">The URL.</param>
            <param name="postParameter">The post parameter.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceProvider.GetHttpServiceRequest(System.String,Siriona.Library.Net.HttpCallMethod)">
            <summary>
            Gets the HTTP service request.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Net.HttpServiceRequest">
            <summary>
            Represents a request to an HttpService
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.IHttpServiceRequest">
            <summary>
            Represents a request to an HttpService
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.IHttpServiceRequest.GetRequestStream">
            <summary>
            Gets the request stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.IHttpServiceRequest.GetResponse">
            <summary>
            Gets the response stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Net.IHttpServiceRequest.ClientCertificates">
            <summary>
            Gets or sets the client certificates.
            </summary>
            <value>The client certificates.</value>
        </member>
        <member name="P:Siriona.Library.Net.IHttpServiceRequest.BandwidthLimiter">
            <summary>
            Gets or sets the bandwidth limiter.
            </summary>
            <value>The bandwidth limiter.</value>
        </member>
        <member name="P:Siriona.Library.Net.IHttpServiceRequest.KeepAlive">
            <summary>
            Gets or sets the keepalive status.
            </summary>
            <value>The keepalive status.</value>
        </member>
        <member name="P:Siriona.Library.Net.IHttpServiceRequest.Credentials">
            <summary>
            Gets or sets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceRequest.#ctor(System.String,Siriona.Library.Net.HttpCallMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.HttpServiceRequest"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceRequest.#ctor(System.String,System.String,Siriona.Library.Net.HttpCallMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.HttpServiceRequest"/> class.
            </summary>
            <param name="url">The service URL.</param>
            <param name="dataParameter">The post parameter.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceRequest.GetRequestStream">
            <summary>
            Gets the request stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceRequest.GetResponse">
            <summary>
            Gets the response stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceRequest.ClientCertificates">
            <summary>
            Gets or sets the client certificates.
            </summary>
            <value>The client certificates.</value>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceRequest.BandwidthLimiter">
            <summary>
            Gets or sets the bandwidth limiter.
            </summary>
            <value>The bandwidth limiter.</value>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceRequest.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceRequest.Credentials">
            <summary>
            Gets or sets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceRequest.KeepAlive">
            <summary>
            Gets or sets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="T:Siriona.Library.Net.HttpServiceRequest.RequestStream">
            <summary>
            Overrides the request stream to avoid disposition.
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.IHttpServiceResponse">
            <summary>
            Represents an http service response
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.IHttpServiceResponse.GetResponseStream">
            <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
            </summary>
            <returns>
            An instance of the <see cref="T:System.IO.Stream"/> class for reading data from the Internet resource.
            </returns>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Siriona.Library.Net.IHttpServiceResponse.SaveResponse(System.String)">
            <summary>
            Saves the response.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceResponse.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.HttpServiceResponse"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceResponse.GetResponseStream">
            <summary>
            When overridden in a descendant class, returns the data stream from the Internet resource.
            </summary>
            <returns>
            An instance of the <see cref="T:System.IO.Stream"/> class for reading data from the Internet resource.
            </returns>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceResponse.Close">
            <summary>
            When overridden by a descendant class, closes the response stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt is made to access the method, when the method is not overridden in a descendant class. </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceResponse.SaveResponse(System.String)">
            <summary>
            Saves the response.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Siriona.Library.Net.HttpServiceResponse.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Siriona.Library.Net.HttpServiceResponse.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:Siriona.Library.Net.IpAddressUtility">
            <summary>
            Provides utilities for IP Addresses.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.IpAddressUtility.IsPrivate(System.Net.IPAddress)">
            <summary>
            Determines whether the specified address is private.
            </summary>
            <param name="address">The address.</param>
            <returns><c>true</c> if the IP address is on a private network; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Siriona.Library.Net.RequestUtility">
            <summary>
            Provide HTTP request utilities.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.RequestUtility.CreateHttpWebRequest(System.String,System.String)">
            <summary>
            Creates an HTTP web request.
            </summary>
            <param name="uri">The URI.</param>
            <param name="hostNameOrAddress">The host name or address the URL is invoked on.</param>
            <returns>The request</returns>
        </member>
        <member name="M:Siriona.Library.Net.RequestUtility.CreateHttpWebRequest(System.Uri,System.String)">
            <summary>
            Creates the HTTP web request.
            </summary>
            <param name="uri">The URI.</param>
            <param name="hostNameOrAddress">The host name or address the URL is invoked on.</param>
            <returns>The request</returns>
        </member>
        <member name="T:Siriona.Library.Reflection.ObjectExtensions">
            <summary>
            Provide extension methods on objects.
            </summary>
        </member>
        <member name="M:Siriona.Library.Reflection.ObjectExtensions.ExtractProperties(System.Object)">
            <summary>
            Transform an object to a dictionary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Scheduling.TransactionMode">
            <summary>
            Represents the transaction context of a <see cref="T:Siriona.Library.Scheduling.IJob"/> processing.
            </summary>
        </member>
        <member name="F:Siriona.Library.Scheduling.TransactionMode.None">
            <summary>
            No transaction is created.
            </summary>
        </member>
        <member name="F:Siriona.Library.Scheduling.TransactionMode.RunInTransaction">
            <summary>
            The job is processed in the context of a transaction.
            </summary>
        </member>
        <member name="T:Siriona.Library.Switch`2">
            <summary>
            Represents a statement of a switch expression.
            </summary>
            <typeparam name="TBase">The type of the base.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Siriona.Library.Switch`2.Case``1(Siriona.Library.Func{``0,`1})">
            <summary>
            Specifies a case base on a subtype.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.Case(Siriona.Library.Func{`0,System.Boolean},Siriona.Library.Func{`1})">
            <summary>
            Specifies a case based on a predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.Case(`0,Siriona.Library.Func{`0,`1})">
            <summary>
            Specifies a case based on a value.
            </summary>
            <param name="compareValue">The compare value.</param>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.Default(Siriona.Library.Func{`0,`1})">
            <summary>
            Specifies the default value of the expression.
            </summary>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.Default(`1)">
            <summary>
            Specifies the default value of the expression.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.Default">
            <summary>
            Specifies the default value of the expression as being the default value of the return type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.ThrowIfDefault">
            <summary>
            Specifies that the expression will throw an exception if no match is found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`2.ThrowIfDefault``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Specifies that the expression will throw an exception if no match is found.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Switch`1">
            <summary>
            Represents the first statement of a switch expression.
            </summary>
            <typeparam name="TBase">The type of the base.</typeparam>
        </member>
        <member name="M:Siriona.Library.Switch`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Switch`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Switch`1.Case``2(Siriona.Library.Func{``0,``1})">
            <summary>
            Specify a case based on a subtype.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`1.Case``1(Siriona.Library.Func{`0,System.Boolean},Siriona.Library.Func{`0,``0})">
            <summary>
            Specifies a cased based on a predicate.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="predicate">The predicate.</param>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`1.Case``1(`0,Siriona.Library.Func{`0,``0})">
            <summary>
            Specifies a case based on a value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="compareValue">The compare value.</param>
            <param name="translator">The translator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Switch`1.Select``1">
            <summary>
            Specifies the expression return type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Switch">
            <summary>
            Represents a functional switch expression.
            </summary>
        </member>
        <member name="M:Siriona.Library.Switch.On``1(``0)">
            <summary>
            Specifies the value on witch switching will occure.
            </summary>
            <typeparam name="TBase">The type of the base.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.DefaultableTemporal`1">
            <summary>
            Represents a defaultable temporal.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Temporality.IDefaultableTemporal`1">
            <summary>
            Provides an interface for defaultable temporals.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.DefaultableTemporal`1.#ctor(Siriona.Library.Temporality.ITemporal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.DefaultableTemporal`1"/> struct.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Siriona.Library.Temporality.DefaultableTemporal`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the temporary values.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Temporality.InvalidTemporalException">
            <summary>
            Raised when a temporal doesn't match prerequistis.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.InvalidTemporalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.InvalidTemporalException"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.InvalidTemporalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.InvalidTemporalException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.InvalidTemporalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.InvalidTemporalException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.InvalidTemporalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.InvalidTemporalException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Siriona.Library.Temporality.ISwitchableTemporal`1">
            <summary>
            Provides an interface for switchable temporal values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Temporality.Stamped`1">
            <summary>
            Represent a value marked with a timestamp.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.#ctor(System.Int64,`0)">
            <summary>
            Creates a stamped value.
            </summary>
            <param name="timestamp">The time stamp.</param>
            <param name="value">The associated value</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.OverwriteWith(Siriona.Library.Temporality.Stamped{`0})">
            <summary>
            Returns other if its timestamp is newer than this one.
            </summary>
            <param name="other">Another stamped value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.Equals(Siriona.Library.Temporality.Stamped{`0})">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.GetHashCode">
            <summary>
            Serves as the default hash function. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.op_Equality(Siriona.Library.Temporality.Stamped{`0},Siriona.Library.Temporality.Stamped{`0})">
            <summary>
            Tests if stamped values are equal (timestamp and value)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.op_Inequality(Siriona.Library.Temporality.Stamped{`0},Siriona.Library.Temporality.Stamped{`0})">
            <summary>
            Tests if stamped values are different (timestamp and value)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Stamped`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Temporality.Stamped`1.Timestamp">
            <summary>
            Gets the time stamp of the value.
            </summary>
        </member>
        <member name="P:Siriona.Library.Temporality.Stamped`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Siriona.Library.Temporality.SwitchableTemporal`1">
            <summary>
            Represents a switchable temporal
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.SwitchableTemporal`1.#ctor(Siriona.Library.Temporality.ITemporal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.SwitchableTemporal`1"/> struct.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Siriona.Library.Temporality.SwitchableTemporal`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the The temporary values.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Temporality.Temporal">
            <summary>
            Provides static methods on <see cref="T:Siriona.Library.Temporality.ITemporal`1"/> interface.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Stamp``1(Siriona.Library.Temporality.ITemporal{``0},System.Int64)">
            <summary>
            Sets specified time stamp to all temporary values.
            </summary>
            <param name="source">The source temporal value.</param>
            <param name="stamp">The time stamp of the values.</param>
            <typeparam name="T">The type of the temporal value.</typeparam>
            <returns>A temporal of stamped values.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Unstamp``1(Siriona.Library.Temporality.ITemporal{Siriona.Library.Temporality.Stamped{``0}})">
            <summary>
            Removes the time stamps from all temporary values
            </summary>
            <param name="source">A stamed temporal value.</param>
            <typeparam name="T">The type of the temporal value.</typeparam>
            <returns>A temporal value without time stamps.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.OverwriteWith``1(Siriona.Library.Temporality.ITemporal{Siriona.Library.Temporality.Stamped{``0}},Siriona.Library.Temporality.ITemporal{Siriona.Library.Temporality.Stamped{``0}})">
            <summary>
            Returns the result with the most uptodate values (highest time stamps).
            </summary>
            <param name="source"></param>
            <param name="other"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.TrimStall``2(Siriona.Library.Temporality.ITemporal{Siriona.Library.Temporality.Stamped{``0}},Siriona.Library.Temporality.ITemporal{Siriona.Library.Temporality.Stamped{``1}})">
            <summary>
            Removes from source all values that are older or same time as comparand.
            </summary>
            <param name="source">The source from which to remove values</param>
            <param name="comparand">The values to compare to.</param>
            <typeparam name="T">The type of source values.</typeparam>
            <typeparam name="TOther">The type of comparand values.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Empty``1">
            <summary>
            Gets an empty temporal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The temporal.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Always``1(``0)">
            <summary>
            Gets an always valid temporal.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="value">The value.</param>
            <returns>The temporal.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.From``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Returns a <see cref="T:Siriona.Library.Temporality.Temporal`1"/> for specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.From``1(Siriona.Library.Collections.ObjectModel.ITemporal{``0})">
            <summary>
            Froms the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.From``1(Siriona.Library.Period,``0)">
            <summary>
            Creates a temporal that has specified values on specified period.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToTemporal``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Converts a ITemporal to a Temporal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.AsTemporal``1(Siriona.Library.Collections.ObjectModel.ITemporal{``0})">
            <summary>
            Converts a ITemporal to a Temporal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.From``1(Siriona.Library.Temporality.Periods,``0)">
            <summary>
            Creates a temporal that has specified values on specified periods.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="periods">The periods.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToTemporal``1(Siriona.Library.Temporality.Periods,``0)">
            <summary>
            Creates a temporal that has specified values on specified periods.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="periods">The periods.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToTemporal``1(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Temporary{``0}})">
            <summary>
            Creates a temporal from temporary values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FromMethod``1(Siriona.Library.Func{Siriona.Library.Period,System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Temporary{``0}}})">
            <summary>
            Froms the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FromWeekly``1(Siriona.Library.Func{Siriona.Library.Period,System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Weekly{``0}}})">
            <summary>
            Froms the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ApplyDays``1(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Weekly{``0}},Siriona.Library.Period)">
            <summary>
            Applies the days.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Values``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Valueses the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.GetValue``1(Siriona.Library.Temporality.ITemporal{``0},System.DateTime,``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="temporal">The temporal.</param>
            <param name="date">The date.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.DefaultTo``1(Siriona.Library.Temporality.ITemporal{``0},``0)">
            <summary>
            Returns a <see cref="T:Siriona.Library.Temporality.ITemporal`1"/> where holes are field with default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Memo``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Memoes the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Memo``1(Siriona.Library.Temporality.ITemporal{``0},System.String)">
            <summary>
            Memoes the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToList``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Converts the temporal to a temporal list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToList``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Period)">
            <summary>
            Converts the temporal to a temporal list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToList``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.Periods)">
            <summary>
            Converts the temporal to a temporal list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="periods">The periods.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Periods``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Gets the periods.
            </summary>
            <value>The periods.</value>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Equals``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Determines whether the specified temporals are equal.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="a">The first temporal.</param>
            <param name="b">The second temporal.</param>
            <returns><c>true</c> if both temporals are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Validate``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Validates the specified source, and throws <see cref="T:Siriona.Library.Temporality.InvalidTemporalException"/> when prerequists are not met.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns>The validated temporal.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Validate``1(Siriona.Library.Temporality.ITemporal{``0},System.String)">
            <summary>
            Validates the specified source, and throws <see cref="T:Siriona.Library.Temporality.InvalidTemporalException"/> when prerequists are not met.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="name">The name.</param>
            <returns>The validated temporal.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.ToEditable``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Converts this <see cref="T:Siriona.Library.Temporality.ITemporal`1"/> to an <see cref="T:Siriona.Library.Collections.ObjectModel.EditableTemporalValue`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Clamp``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Period)">
            <summary>
            Clamps the specified temporal to a given period.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Flatten``3(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Func{``0,``1,``2})">
            <summary>
            Selects two temporals to return one.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FlattenWith``2(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1})">
            <summary>
            Flattens values with specified temporal into a single temporal value.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.SelectMany``3(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Func{Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1}},Siriona.Library.Func{``0,``1,``2})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="projection">The projection.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.SelectMany``3(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,Siriona.Library.Temporality.ITemporal{``1}},Siriona.Library.Func{``0,``1,``2})">
            <summary>
            Performs a multiple source projection to make a sequence of ITemporal from a sequence of object that have ITemporal properties.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="sources">The sources.</param>
            <param name="projection">The projection.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.SelectMany``3(Siriona.Library.Temporality.ISwitchableTemporal{``0},Siriona.Library.Func{``0,Siriona.Library.Temporality.ITemporal{``1}},Siriona.Library.Func{``0,``1,``2})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="projection">The projection.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.SelectMany``2(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Func{Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ISwitchableTemporal{``0}},Siriona.Library.Func{Siriona.Library.Temporality.ITemporal{``0},``0,Siriona.Library.Temporality.ITemporal{``1}})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Select``2(Siriona.Library.Temporality.ISwitchableTemporal{``0},Siriona.Library.Func{``0,Siriona.Library.Temporality.ITemporal{``1}})">
            <summary>
            Performs a switch selection.
            </summary>
            <typeparam name="T">he type of the source data</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.SelectMany``1(Siriona.Library.Temporality.IDefaultableTemporal{``0},Siriona.Library.Func{Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0}},Siriona.Library.Func{``0,``0,``0})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="T">The type of the 1.</typeparam>
            <param name="source">The source1.</param>
            <param name="projection">The projection.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FlattenInto``3(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1})">
            <summary>
            Flattens the into.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Flatten``4(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Temporality.ITemporal{``2},Siriona.Library.Func{``0,``1,``2,``3})">
            <summary>
            Selects two temporals to return one.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FlattenInto``4(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Temporality.ITemporal{``2})">
            <summary>
            Flattens the into.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Flatten``5(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Temporality.ITemporal{``2},Siriona.Library.Temporality.ITemporal{``3},Siriona.Library.Func{``0,``1,``2,``3,``4})">
            <summary>
            Selects two temporals to return one.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="source4">The source4.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Flatten``6(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Temporality.ITemporal{``2},Siriona.Library.Temporality.ITemporal{``3},Siriona.Library.Temporality.ITemporal{``4},Siriona.Library.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Selects two temporals to return one.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="source4">The source4.</param>
            <param name="source5">The source5.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FlattenInto``5(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Temporality.ITemporal{``2},Siriona.Library.Temporality.ITemporal{``3})">
            <summary>
            Flattens the into.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="source4">The source4.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.FlattenInto``6(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1},Siriona.Library.Temporality.ITemporal{``2},Siriona.Library.Temporality.ITemporal{``3},Siriona.Library.Temporality.ITemporal{``4})">
            <summary>
            Flattens the into.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="source4">The source4.</param>
            <param name="source5">The source5.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Add``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Adds x values to y values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Subtract``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Subtracts x values with y values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Multiply``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Multiplies x values by y values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Divide``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Divides the x values by y values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Split``1(Siriona.Library.Temporality.ITemporal{``0},System.TimeSpan)">
            <summary>
            Split Temporal
            </summary>
            <param name="x"></param>
            <param name="length"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Merge``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Merges the consecutive periods with same value from source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.GreaterThan``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Compare x values to y values and returns true when x is greater than y.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.GreaterOrEqual``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Compare x values to y values and returns true when x is greater than y or equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.LessThan``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Compare x values to y values and returns true when x is less than y.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.LessOrEqual``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Compare x values to y values and returns true when x is less than y or equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Aggregate``1(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{``0}},Siriona.Library.Func{``0,``0,``0})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sources">The sources.</param>
            <param name="aggregator">The aggregator.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.All(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{System.Boolean}})">
            <summary>
            Returns a temporal value indicating periods of time where all sources are true.
            </summary>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.All``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,Siriona.Library.Temporality.ITemporal{System.Boolean}})">
            <summary>
            Returns a temporal value indicating periods of time where all sources are true for specified predicate.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="sources">The sources.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Any(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{System.Boolean}})">
            <summary>
            Returns a temporal value indicating periods of time where any sources is true.
            </summary>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Any``1(System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,Siriona.Library.Temporality.ITemporal{System.Boolean}})">
            <summary>
            Returns a temporal value indicating periods of time where any source is true for specified predicate.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="sources">The sources.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Aggregate``3(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{``0}},Siriona.Library.Func{``1},Siriona.Library.Func{``1,``0,``1},Siriona.Library.Func{``1,``2})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulate.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="sources">The sources.</param>
            <param name="seed">The seed.</param>
            <param name="aggregator">The aggregator.</param>
            <param name="resultSelector">The result selector.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.OverwriteWith``1(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Overwrites this instance data with specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Intersect``2(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Temporality.ITemporal{``1})">
            <summary>
            Intersects the specified filter.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <typeparam name="TOther">The type of the other.</typeparam>
            <param name="source">The source.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Switchable``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Creates a switchable view of the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Defaultable``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Gets a defaultable version to perform union of intervals instead of intersection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Max``2(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{``0}},Siriona.Library.Func{``0,``1})">
            <summary>
            Select the maximum value from sources comparing on specified key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="sources">The sources.</param>
            <param name="keyProperty">The key property.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Max``1(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{``0}})">
            <summary>
            Select the maximum value from sources.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Min``2(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{``0}},Siriona.Library.Func{``0,``1})">
            <summary>
            Select the maximum value from sources comparing on specified key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="sources">The sources.</param>
            <param name="keyProperty">The key property.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Min``1(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.ITemporal{``0}})">
            <summary>
            Select the maximum value from sources.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="sources">The sources.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Where``1(Siriona.Library.Temporality.ITemporal{``0},System.Predicate{``0})">
            <summary>
            Selects periods from source where predicate matches.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Select``2(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Func{``0,``1})">
            <summary>
            Selects values for source using specified projection.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal.Switch``2(Siriona.Library.Temporality.ITemporal{``0},Siriona.Library.Func{``0,Siriona.Library.Temporality.ITemporal{``1}})">
            <summary>
            Selects values for source using specified projection.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Weeks">
            <summary>
            Represents a days of week patterns defined on a period.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.Weeks.#ctor(Siriona.Library.Period,Siriona.Library.DaysOfWeek)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Weeks"/> class.
            </summary>
            <param name="definitionPeriod">The definition period.</param>
            <param name="daysOfWeek">The days of week.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Weeks.GetPeriods">
            <summary>
            Gets the periods concerned by the days of week pattern.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Weeks.Intersect(Siriona.Library.Period)">
            <summary>
            Intersects the weeks with specified definition period.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Temporality.Weeks.DefinitionPeriod">
            <summary>
            Gets the definition period.
            </summary>
            <value>The definition period.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Weeks.DaysOfWeek">
            <summary>
            Gets the days of week.
            </summary>
            <value>The days of week.</value>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.AlternativeBuilder`1">
            <summary>
            Provides building of alternatives.
            </summary>
            <typeparam name="TToken">The type of the token.</typeparam>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.#ctor(Siriona.Library.Text.Parsing.RecursiveDescentParser{`0},Siriona.Library.Text.Parsing.ProductionPattern,Siriona.Library.Text.Parsing.ProductionPatternAlternative,Siriona.Library.Text.Parsing.ProductionBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.Parsing.AlternativeBuilder`1"/> class.
            </summary>
            <param name="parser">The parser.</param>
            <param name="pattern">The pattern.</param>
            <param name="alternative">The alternative.</param>
            <param name="parent"></param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.Token(`0)">
            <summary>
            Tokens the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.Token(`0,System.Int32,System.Int32)">
            <summary>
            Tokens the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="minimumCount">The minimum count.</param>
            <param name="maximumCount">The maximum count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.Production(`0)">
            <summary>
            Productions the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.EndAlternative">
            <summary>
            Ends the alternative.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.OptionalProduction(`0)">
            <summary>
            Optionals the production.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.OptionalToken(`0)">
            <summary>
            Optionals the production.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.Production(`0,System.Int32,System.Int32)">
            <summary>
            Productions the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="minimumCount">The minimum count.</param>
            <param name="maximumCount">The maximum count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.AlternativeBuilder`1.StartSubProduction">
            <summary>
            Starts the sub production.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.AlternativeBuilder`1.Parser">
            <summary>
            Gets the parser.
            </summary>
            <value>The parser.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.AlternativeBuilder`1.Alternative">
            <summary>
            Gets the alternative.
            </summary>
            <value>The alternative.</value>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ProductionBuilder`1">
            <summary>
            Represents a production builder.
            </summary>
            <typeparam name="TToken">The type of the token.</typeparam>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionBuilder`1.#ctor(Siriona.Library.Text.Parsing.RecursiveDescentParser{`0},Siriona.Library.Text.Parsing.ProductionPattern,Siriona.Library.Text.Parsing.AlternativeBuilder{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.Parsing.ProductionBuilder`1"/> class.
            </summary>
            <param name="parser">The parser.</param>
            <param name="pattern">The pattern.</param>
            <param name="alternative">The alternative.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionBuilder`1.EndPattern">
            <summary>
            Ends the pattern.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionBuilder`1.EndSubProduction(System.Int32,System.Int32)">
            <summary>
            Ends the sub production.
            </summary>
            <param name="minimumCount">The minimum count.</param>
            <param name="maximumCount">The maximum count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionBuilder`1.StartAlternative">
            <summary>
            Starts the alternative.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionBuilder`1.AlternativeProduction(`0)">
            <summary>
            Alternatives the production.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionBuilder`1.AlternativeToken(`0)">
            <summary>
            Alternatives the token.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Text.StringBuilderExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Text.StringBuilder"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.Join(System.Text.StringBuilder,System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins the specified values using a separator.
            </summary>
            <param name="builder">The builder.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.Join(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins the specified values using a separator.
            </summary>
            <param name="builder">The builder.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.Join``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.String})">
            <summary>
            Joins the specified values using a separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.Join``1(System.Text.StringBuilder,System.Char,System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.String})">
            <summary>
            Joins the specified values using a separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.Join(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins the strings.
            </summary>
            <param name="builder">The builder.</param>
            <param name="separator">The separator.</param>
            <param name="lastSeparator">The last separator.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.Join``1(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IEnumerable{``0},Siriona.Library.Func{``0,System.String})">
            <summary>
            Joins the strings
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder">The builder.</param>
            <param name="separator">The separator.</param>
            <param name="lastSeparator">The last separator.</param>
            <param name="values">The values.</param>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends if.
            </summary>
            <param name="builder">The builder.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <summary>
            Appends the format if.
            </summary>
            <param name="builder">The builder.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="format">The format.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the format if.
            </summary>
            <param name="builder">The builder.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="formatProvider">The format provider.</param>
            <param name="format">The format.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Text.StringFormatExtensionMethods">
            <summary>
            Provides extension methods for named formatting.
            </summary>
            <remarks>
            Based on http://james.newtonking.com/archive/2008/03/29/formatwith-2-0-string-formatting-with-named-variables.
            As stated by http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx/, multiple brackets are not handled correctly and performance is poor.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Text.StringFormatExtensionMethods.FormatWith(System.String,System.Object,System.Boolean)">
            <summary>
            Formats a string with named parameters using the specified object.
            </summary>
            <param name="format">The format.</param>
            <param name="source">The source.</param>
            <param name="isStrict">if set to <c>true</c>, performs a strict validation on parameter names.</param>
            <returns>
            The formatted string
            </returns>
            <remarks>
            Parameter names must match the name of a <c>source</c> object properties.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Text.StringFormatExtensionMethods.FormatWith(System.String,System.IFormatProvider,System.Object,System.Boolean)">
            <summary>
            Formats a string with named parameters using the specified object.
            </summary>
            <param name="format">The format.</param>
            <param name="provider">The provider.</param>
            <param name="source">The source.</param>
            <param name="isStrict">if set to <c>true</c>, performs a strict validation on parameter names.</param>
            <returns>
            The formatted string
            </returns>
            <remarks>
            Parameter names must match the name of a <c>source</c> object properties.
            </remarks>
        </member>
        <member name="T:Siriona.Library.Text.StringUtility">
            <summary>
            Provides string handling and conversion utilities.
            </summary>
            <summary>
            Provides string handling and conversion utilities.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ToBase34(System.Int32)">
            <summary>
            Converts an integer value to its base-34 representation.
            </summary>
            <param name="value">The value.</param>
            <returns>The base-34 representation of the value</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.FromBase34(System.String)">
            <summary>
            Retrieves an integer value from its base-34 representation.
            </summary>
            <param name="value">The base-34 representation.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.TryFromBase34(System.String,System.Int32@)">
            <summary>
            Tries to retrieve an integer value from a base-34 representation.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The base-34 representation.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a list of items to a comma-separated string.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="items">The items.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ToFirstLetterLowercase(System.String)">
            <summary>
            Converts the first letter of the input string to title case.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>A string having its first letter converted into title case.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ToCamlCase(System.String)">
            <summary>
            Converts the input string to CAML casing.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>A CAML cased string (the first word is lower case, the following are pascal-cased.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.SplitWords(System.String)">
            <summary>
            Splits the words.
            </summary>
            <param name="text">The text.</param>
            <returns>The words</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ToFirstLetterTitleCase(System.String)">
            <summary>
            Converts the first letter of the input string to title case.
            </summary>
            <param name="text">The string to convert.</param>
            <returns>A string having its first letter converted into title case.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.Simplify(System.String,Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Simplifies a string.
            </summary>
            <param name="text">The string to simplify.</param>
            <param name="simplifyOptions">The simplification options.</param>
            <returns>The simplified string.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsConvertible(System.String,System.Text.Encoding)">
            <summary>
            Determines whether the specified text is convertible to the specified encoding..
            </summary>
            <param name="text">The text.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            	<c>true</c> if the specified text is convertible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.Compact(System.String,System.Int32)">
            <summary>
            Compacts the specified input string.
            </summary>
            <param name="text">The input string.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>The compacted string.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.GetHashCode(System.String)">
            <summary>
            Returns a platform-independant hash code of the string.
            </summary>
            <param name="text">The string</param>
            <returns>The hashcode</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.CompactNewLines(System.String)">
            <summary>
            Replaces new lines by \n characters.
            </summary>
            <param name="text">The input string.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ExpandNewLines(System.String)">
            <summary>
            Replace \n characters by <see cref="P:System.Environment.NewLine"/> characters.
            </summary>
            <param name="text">The input string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.OffsetTab(System.String,System.Int32,System.StringSplitOptions)">
            <summary>
            Offsets the specified text with the given number of tab characters.
            </summary>
            <param name="text">The input text.</param>
            <param name="tabCount">The count of tab characters.</param>
            <param name="options">The options.</param>
            <returns>A tabbed version of the specified text.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.Trim(System.String,System.String[])">
            <summary>
            Trims the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="trimedValues">The trimed values.</param>
            <returns>The trimed text.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.TrimStart(System.String,System.String[])">
            <summary>
            Trims the start of the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="trimedValues">The trimed values.</param>
            <returns>The trimed text.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.TrimEnd(System.String,System.String[])">
            <summary>
            Trims the end of the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="trimedValues">The trimed values.</param>
            <returns>The trimed text.</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.ToBase10(System.String)">
            <summary>
            Converts a string value to its base-10 value.
            </summary>
            <param name="text">The base-34 representation.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsBoolean(System.String)">
            <summary>
            Determines whether the specified value represents a boolean value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a boolean value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsInt8(System.String)">
            <summary>
            Determines whether the specified value represents a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a <see cref="T:System.Byte"/> value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsInt16(System.String)">
            <summary>
            Determines whether the specified value represents a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a <see cref="T:System.Int16"/> value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsInt32(System.String)">
            <summary>
            Determines whether the specified value represents a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a <see cref="T:System.Int32"/> value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsInt64(System.String)">
            <summary>
            Determines whether the specified value represents a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a <see cref="T:System.Int64"/> value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsDateTime(System.String)">
            <summary>
            Determines whether the specified value represents a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a <see cref="T:System.DateTime"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.IsTimeSpan(System.String)">
            <summary>
            Determines whether the specified value represents a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value represents a <see cref="T:System.TimeSpan"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.StringUtility.NullIfEmpty(System.String)">
            <summary>
            Nulls if empty.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Threading.CancellationToken">
            <summary>
            Represents a cancellation token
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.#ctor(Siriona.Library.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.CancellationToken"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.CancellationToken"/> class.
            </summary>
            <param name="canceled">if set to <c>true</c> [canceled].</param>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Register(Siriona.Library.Threading.ICancelableOperation)">
            <summary>
            Registers the specified cancelable.
            </summary>
            <param name="cancelable">The cancelable.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Register(Siriona.Library.Threading.ICancelableOperation,System.Boolean)">
            <summary>
            Registers the specified cancelable.
            </summary>
            <param name="cancelable">The cancelable.</param>
            <param name="useSynchronizationContext">if set to <c>true</c> [use synchronization context].</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.ActionToActionObjShunt(System.Object)">
            <summary>
            Actions to action obj shunt.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Register(Siriona.Library.Action)">
            <summary>
            Registers the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Register(Siriona.Library.Action,System.Boolean)">
            <summary>
            Registers the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="useSynchronizationContext">if set to <c>true</c> [use synchronization context].</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
            <summary>
            Registers the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Registers the specified callback.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <param name="useSynchronizationContext">if set to <c>true</c> [use synchronization context].</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Equals(Siriona.Library.Threading.CancellationToken)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.Equals(System.Object)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.op_Equality(Siriona.Library.Threading.CancellationToken,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.op_Inequality(Siriona.Library.Threading.CancellationToken,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationToken.ICancelableCallback(System.Object)">
            <summary>
            Is the cancelable callback.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="P:Siriona.Library.Threading.CancellationToken.IsCancellationRequested">
            <summary>
            Gets a value indicating whether this instance is cancellation requested.
            </summary>
            <value>
            	<c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.CancellationToken.CanBeCanceled">
            <summary>
            Gets a value indicating whether this instance can be canceled.
            </summary>
            <value>
            	<c>true</c> if this instance can be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.CancellationToken.WaitHandle">
            <summary>
            Gets the wait handle.
            </summary>
            <value>The wait handle.</value>
        </member>
        <member name="T:Siriona.Library.Threading.CancellationTokenRegistration">
            <summary>
            Represents a cancellation token registration.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.#ctor(Siriona.Library.Threading.CancellationTokenSource,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.CancellationTokenRegistration"/> class.
            </summary>
            <param name="cancellationTokenSource">The cancellation token source.</param>
            <param name="registrationId">The registration ID.</param>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.op_Equality(Siriona.Library.Threading.CancellationTokenRegistration,Siriona.Library.Threading.CancellationTokenRegistration)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.op_Inequality(Siriona.Library.Threading.CancellationTokenRegistration,Siriona.Library.Threading.CancellationTokenRegistration)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.Equals(Siriona.Library.Threading.CancellationTokenRegistration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenRegistration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Siriona.Library.Threading.CancellationTokenSource">
            <summary>
            Signals to a CancellationToken that it should be canceled.
            </summary>
        </member>
        <member name="T:Siriona.Library.Threading.ICancelableOperation">
            <summary>
            Represents a cancelable operation.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ICancelableOperation.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="P:Siriona.Library.Threading.ICancelableOperation.IsCancellationRequested">
            <summary>
            Gets a value indicating whether this instance is cancellation requested.
            </summary>
            <value>
            	<c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.CancellationTokenSource"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.Cancel(System.Boolean)">
            <summary>
            Cancels the specified throw on first exception.
            </summary>
            <param name="throwOnFirstException">if set to <c>true</c> [throw on first exception].</param>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.CreateLinkedTokenSource(Siriona.Library.Threading.CancellationToken[])">
            <summary>
            Creates the linked token source.
            </summary>
            <param name="tokens">The tokens.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.CreateLinkedTokenSource(Siriona.Library.Threading.CancellationToken,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Creates the linked token source.
            </summary>
            <param name="token1">The token1.</param>
            <param name="token2">The token2.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.ExecuteCallbackSynchronously_FastPath(Siriona.Library.Threading.CancellationTokenSource.CallbackInfo)">
            <summary>
            Executes the callback synchronously_ fast path.
            </summary>
            <param name="callbackInfo">The callback info.</param>
        </member>
        <member name="M:Siriona.Library.Threading.CancellationTokenSource.ExecuteCallbackSynchronously_GeneralPath(Siriona.Library.Threading.CancellationTokenSource.CallbackInfo)">
            <summary>
            Executes the callback synchronously_ general path.
            </summary>
            <param name="callbackInfo">The callback info.</param>
        </member>
        <member name="P:Siriona.Library.Threading.CancellationTokenSource.Token">
            <summary>
            Gets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Siriona.Library.Threading.CancellationTokenSource.IsCancellationRequested">
            <summary>
            Gets a value indicating whether this instance is cancellation requested.
            </summary>
            <value>
            	<c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Threading.LazyInitializer">
            <summary>
             Represents a lay initializer
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
            <summary>
            Ensures the initialized.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.LazyInitializer.EnsureInitialized``1(``0@,Siriona.Library.Func{``0})">
            <summary>
            Ensures the initialized.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="valueFactory">The value factory.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
            <summary>
            Ensures the initialized.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="initialized">if set to <c>true</c> [initialized].</param>
            <param name="syncLock">The sync lock.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,Siriona.Library.Func{``0})">
            <summary>
            Ensures the initialized.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="initialized">if set to <c>true</c> [initialized].</param>
            <param name="syncLock">The sync lock.</param>
            <param name="valueFactory">The value factory.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.LazyInitializer.EnsureInitializedCore``1(``0@,Siriona.Library.Func{``0})">
            <summary>
            Ensures the initialized core.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="valueFactory">The value factory.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.LazyInitializer.EnsureInitializedCore``1(``0@,System.Boolean@,System.Object@,Siriona.Library.Func{``0})">
            <summary>
            Ensures the initialized core.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="initialized">if set to <c>true</c> [initialized].</param>
            <param name="syncLock">The sync lock.</param>
            <param name="valueFactory">The value factory.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Threading.LazyInitializer.LazyHelpers`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Siriona.Library.Threading.ManualResetEventSlim">
            <summary>
            Provides a slimmed down version of ManualResetEvent.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.ManualResetEventSlim"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.ManualResetEventSlim"/> class.
            </summary>
            <param name="initialState">if set to <c>true</c> [initial state].</param>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.ManualResetEventSlim"/> class.
            </summary>
            <param name="initialState">if set to <c>true</c> [initial state].</param>
            <param name="spinCount">The spin count.</param>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.CancellationTokenCallback(System.Object)">
            <summary>
            Cancellations the token callback.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Set">
            <summary>
            Sets this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Wait">
            <summary>
            Waits this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Wait(System.Int32)">
            <summary>
            Waits the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Wait(Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits the specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
            <summary>
            Waits the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Wait(System.Int32,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.ManualResetEventSlim.Wait(System.TimeSpan,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.ManualResetEventSlim.IsSet">
            <summary>
            Gets or sets a value indicating whether this instance is set.
            </summary>
            <value><c>true</c> if this instance is set; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Threading.ManualResetEventSlim.SpinCount">
            <summary>
            Gets or sets the spin count.
            </summary>
            <value>The spin count.</value>
        </member>
        <member name="P:Siriona.Library.Threading.ManualResetEventSlim.Waiters">
            <summary>
            Gets or sets the waiters.
            </summary>
            <value>The waiters.</value>
        </member>
        <member name="P:Siriona.Library.Threading.ManualResetEventSlim.WaitHandle">
            <summary>
            Gets the wait handle.
            </summary>
            <value>The wait handle.</value>
        </member>
        <member name="T:Siriona.Library.Threading.SpinWait">
            <summary>
            Provides support for spin-based waiting.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.SpinWait.SpinOnce">
            <summary>
            Spins the once.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.SpinWait.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.SpinWait.SpinUntil(Siriona.Library.Func{System.Boolean})">
            <summary>
            Spins until condition is met.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Siriona.Library.Threading.SpinWait.SpinUntil(Siriona.Library.Func{System.Boolean},System.TimeSpan)">
            <summary>
            Spins until condition is met.
            </summary>
            <param name="condition">The condition.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.SpinWait.SpinUntil(Siriona.Library.Func{System.Boolean},System.Int32)">
            <summary>
            Spins the until.
            </summary>
            <param name="condition">The condition.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.SpinWait.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Siriona.Library.Threading.SpinWait.NextSpinWillYield">
            <summary>
            Gets a value indicating whether [next spin will yield].
            </summary>
            <value><c>true</c> if [next spin will yield]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.AggregateException">
            <summary>
            The exception that is thrown in tasks.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.String,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.#ctor(System.String,System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.AggregateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.Flatten">
            <summary>
            Flattens this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.Handle(Siriona.Library.Func{System.Exception,System.Boolean})">
            <summary>
            Handles the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.AggregateException.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.AggregateException.InnerExceptions">
            <summary>
            Gets the inner exceptions.
            </summary>
            <value>The inner exceptions.</value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskScheduler">
            <summary>
            Represents a task scheduler
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskScheduler"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.BeginBlockingRegion">
            <summary>
            Begins the blocking region.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.EndBlockingRegion">
            <summary>
            Ends the blocking region.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Siriona.Library.Threading.Tasks.TaskScheduler"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
            <summary>
            Creates a task scheduler from the current synchronization context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.QueueTask(Siriona.Library.Threading.Tasks.Task)">
            <summary>
            Queues the task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.TryDequeue(Siriona.Library.Threading.Tasks.Task)">
            <summary>
            Tries to dequeue task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.TryExecuteTask(Siriona.Library.Threading.Tasks.Task)">
            <summary>
            Tries to execute the task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(Siriona.Library.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Tries to execute the task inline.
            </summary>
            <param name="task">The task.</param>
            <param name="taskWasPreviouslyQueued">if set to <c>true</c> [task was previously queued].</param>
            <returns></returns>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskScheduler.UnobservedTaskException">
            <summary>
            Raised when an unobserved task exception occures.
            </summary>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskScheduler.Current">
            <summary>
            Gets the current task scheduler.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskScheduler.Default">
            <summary>
            Gets the default task scheduler.
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskScheduler.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level.
            </summary>
            <value>The maximum concurrency level.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskScheduler.RequiresAtomicStartTransition">
            <summary>
            Gets a value indicating whether [requires atomic start transition].
            </summary>
            <value>
            	<c>true</c> if [requires atomic start transition]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.Task">
            <summary>
            Represetns an asynchronous task.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.#ctor(Siriona.Library.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.#ctor(Siriona.Library.Action,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="creationOptions">The creation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.AcknowledgeCancellation">
            <summary>
            Acknowledges the cancellation.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.AddCompletionAction(System.Action{Siriona.Library.Threading.Tasks.Task})">
            <summary>
            Adds the completion action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.CancelAndWait">
            <summary>
            Cancels the task and wait.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.CancelAndWait(System.Int32)">
            <summary>
            Cancels the task and wait.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.CancelAndWait(Siriona.Library.Threading.CancellationToken)">
            <summary>
            Cancels the task and wait.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.CancelAndWait(System.TimeSpan)">
            <summary>
            Cancels the task and wait.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.CancelAndWait(System.Int32,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Cancels the task and wait.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task})">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0})">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,Siriona.Library.Threading.Tasks.Task{``0}})">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,Siriona.Library.Threading.Tasks.Task{``0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,Siriona.Library.Threading.Tasks.Task{``0}},Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,Siriona.Library.Threading.Tasks.Task{``0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.RunSynchronously">
            <summary>
            Runs the task synchronously.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.RunSynchronously(Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Runs the task synchronously.
            </summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Start(Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts the specified scheduler.
            </summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Wait">
            <summary>
            Waits this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Wait(System.Int32)">
            <summary>
            Waits the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Wait(Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits the specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Wait(System.TimeSpan)">
            <summary>
            Waits the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.Wait(System.Int32,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAll(Siriona.Library.Threading.Tasks.Task[])">
            <summary>
            Waits all taks.
            </summary>
            <param name="tasks">The tasks.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAll(Siriona.Library.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits all tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAll(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits all tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAll(Siriona.Library.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits all tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAll(Siriona.Library.Threading.Tasks.Task[],System.Int32,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits all tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAny(Siriona.Library.Threading.Tasks.Task[])">
            <summary>
            Waits any task.
            </summary>
            <param name="tasks">The tasks.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAny(Siriona.Library.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits any task.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAny(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits any task.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAny(Siriona.Library.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits any task.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task.WaitAny(Siriona.Library.Threading.Tasks.Task[],System.Int32,Siriona.Library.Threading.CancellationToken)">
            <summary>
            Waits any task.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.CancellationToken">
            <summary>
            Gets the cancellation token.
            </summary>
            <value>The cancellation token.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.CreationOptions">
            <summary>
            Gets the creation options.
            </summary>
            <value>The creation options.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.ExceptionRecorded">
            <summary>
            Gets a value indicating whether [exception recorded].
            </summary>
            <value><c>true</c> if [exception recorded]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Factory">
            <summary>
            Gets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.InternalAsyncState">
            <summary>
            Gets the state of the internal async.
            </summary>
            <value>The state of the internal async.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsCanceled">
            <summary>
            Gets a value indicating whether this instance is canceled.
            </summary>
            <value>
            	<c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsCancellationAcknowledged">
            <summary>
            Gets a value indicating whether this instance is cancellation acknowledged.
            </summary>
            <value>
            	<c>true</c> if this instance is cancellation acknowledged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsChildReplica">
            <summary>
            Gets a value indicating whether this instance is child replica.
            </summary>
            <value>
            	<c>true</c> if this instance is child replica; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsFaulted">
            <summary>
            Gets a value indicating whether this instance is faulted.
            </summary>
            <value>
            	<c>true</c> if this instance is faulted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsSelfReplicatingRoot">
            <summary>
            Gets a value indicating whether this instance is self replicating root.
            </summary>
            <value>
            	<c>true</c> if this instance is self replicating root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Options">
            <summary>
            Gets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value></value>
            <returns>
            A user-defined object that qualifies or contains information about an asynchronous operation.
            </returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <value></value>
            <returns>true if the operation is complete; otherwise, false.
            </returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task.IsCancellationRequested">
            <summary>
            Gets a value indicating whether this instance is cancellation requested.
            </summary>
            <value>
            	<c>true</c> if this instance is cancellation requested; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskCanceledException">
            <summary>
            The exception that is thrown when a task is canceled.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCanceledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCanceledException"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCanceledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCanceledException.#ctor(Siriona.Library.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCanceledException"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCanceledException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCanceledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskCanceledException.Task">
            <summary>
            Gets the task.
            </summary>
            <value>The task.</value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskCompletionSource`1">
            <summary>
            Represents a way to complete a task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCompletionSource`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCompletionSource`1"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.#ctor(Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCompletionSource`1"/> class.
            </summary>
            <param name="creationOptions">The creation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskCompletionSource`1"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
            <summary>
            Sets the canceled.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Sets the exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
            <summary>
            Sets the result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
            <summary>
            Tries the set canceled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Tries the set exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Tries the set result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskCompletionSource`1.Task">
            <summary>
            Gets the task.
            </summary>
            <value>The task.</value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskContinuationOptions">
            <summary>
            Represents task continuation options.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.DetachedFromParent">
            <summary>
            The continuation should be detached from parent.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
            <summary>
            The continuation should execute synchronously.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.LongRunning">
            <summary>
            This is a long running continuation.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
            <summary>
            The continuation should not occure on canceled.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
            <summary>
            The continuation should not occure on faulted.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
            <summary>
            The continuation should not occure on competion.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
            <summary>
            The continuation should only occure on canceled.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
            <summary>
            The continuation should only occure on faulted.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
            <summary>
            The continuation should only occure on completion.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.PreferFairness">
            <summary>
            The continuation prefers fairness.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskContinuationOptions.RespectParentCancellation">
            <summary>
            The continuation respects parent cancellation.
            </summary>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskCreationOptions">
            <summary>
            Represents task creation options.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskCreationOptions.DetachedFromParent">
            <summary>
            The task should be detached from parent.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskCreationOptions.LongRunning">
            <summary>
            This is a long running task.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskCreationOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskCreationOptions.PreferFairness">
            <summary>
            The task prefers fairness.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskCreationOptions.RespectParentCancellation">
            <summary>
            The task respects parent cancellation.
            </summary>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskFactory">
            <summary>
            Provides methods to create tasks.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.#ctor(Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory"/> class.
            </summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.#ctor(Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory"/> class.
            </summary>
            <param name="creationOptions">The creation options.</param>
            <param name="continuationOptions">The continuation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.#ctor(Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory"/> class.
            </summary>
            <param name="scheduler">The scheduler.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="continuationOptions">The continuation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task[]})">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task[],``0})">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task[]},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task[],``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task[]},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task[],``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task[]},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task[],``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task})">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0})">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task[],System.Action{Siriona.Library.Threading.Tasks.Task},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task,``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,Siriona.Library.Func{System.IAsyncResult,``0})">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync(Siriona.Library.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(Siriona.Library.Func{System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``0},System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,Siriona.Library.Func{System.IAsyncResult,``0},Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync(Siriona.Library.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(Siriona.Library.Func{System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(Siriona.Library.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``2(Siriona.Library.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``1},``0,System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,Siriona.Library.Func{System.IAsyncResult,``0},Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``1(Siriona.Library.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``2(Siriona.Library.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``1},``0,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``2(Siriona.Library.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``3(Siriona.Library.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``2(Siriona.Library.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``3(Siriona.Library.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``2},``0,``1,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``3(Siriona.Library.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TArg3">The type of the arg3.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``4(Siriona.Library.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TArg3">The type of the arg3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``3(Siriona.Library.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TArg3">The type of the arg3.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.FromAsync``4(Siriona.Library.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new task from a IAsyncResult.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TArg3">The type of the arg3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew``1(Siriona.Library.Func{``0})">
            <summary>
            Starts a new task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(Siriona.Library.Action)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew``1(Siriona.Library.Func{``0},Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts a new task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(Siriona.Library.Action,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew``1(Siriona.Library.Func{System.Object,``0},System.Object)">
            <summary>
            Starts a new task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(Siriona.Library.Action,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew``1(Siriona.Library.Func{``0},Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts a new task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew``1(Siriona.Library.Func{System.Object,``0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts a new task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew(Siriona.Library.Action,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.InternalTaskOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="internalOptions">The internal options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory.StartNew``1(Siriona.Library.Func{System.Object,``0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts a new task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory.ContinuationOptions">
            <summary>
            Gets the continuation options.
            </summary>
            <value>The continuation options.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory.CreationOptions">
            <summary>
            Gets the creation options.
            </summary>
            <value>The creation options.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory.DefaultScheduler">
            <summary>
            Gets the default scheduler.
            </summary>
            <value>The default scheduler.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory.Scheduler">
            <summary>
            Gets the scheduler.
            </summary>
            <value>The scheduler.</value>
        </member>
        <member name="T:Siriona.Library.ExceptionUtility">
            <summary>
            Provides helper functions to handle exceptions.
            </summary>
        </member>
        <member name="M:Siriona.Library.ExceptionUtility.IsCanceled(System.Exception)">
            <summary>
            Indicates whether an exception comes from a ThreadAbortException
            </summary>
            <param name="ex">Exception to be checked</param>
            <returns>True if the thread was canceled, else False</returns>
        </member>
        <member name="M:Siriona.Library.ExceptionUtility.HasInnerType(System.Exception,System.Type)">
            <summary>
            Indicates whether an exception is of or contains an inner exception of given type
            </summary>
            <param name="ex">Exception to be checked</param>
            <param name="type">Type of the exception we are looking for</param>
            <returns>True if an inner exception of the given type has been found</returns>
        </member>
        <member name="M:Siriona.Library.ExceptionUtility.GetInnerException(System.Exception,System.Type)">
            <summary>
            Gets an inner exception having the given type.
            </summary>
            <param name="ex">The exception.</param>
            <param name="type">The type of the exception to find.</param>
            <returns>An exception that have the given type, otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Siriona.Library.Func`1">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func`2">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func`3">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func`4">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func`5">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func`6">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func`7">
            <summary>
            Represents an evaluation delegate
            </summary>
        </member>
        <member name="T:Siriona.Library.Func">
            <summary>
            Represents a curried function.
            </summary>
        </member>
        <member name="M:Siriona.Library.Func.Curry``3(Siriona.Library.Func{``0,``1,``2})">
            <summary>
            Curries the specified function.
            </summary>
            <typeparam name="TArg0">The type of the arg0.</typeparam>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Func.Curry``4(Siriona.Library.Func{``0,``1,``2,``3})">
            <summary>
            Curries the specified function.
            </summary>
            <typeparam name="TArg0">The type of the arg0.</typeparam>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Func.Partial``3(Siriona.Library.Func{``0,``1,``2},``0)">
            <summary>
            Partials the specified function.
            </summary>
            <typeparam name="TArg0">The type of the arg0.</typeparam>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="arg0">The arg0.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Func.Compose``3(Siriona.Library.Func{``0,``1},Siriona.Library.Func{``1,``2})">
            <summary>
            Composes the specified functions.
            </summary>
            <typeparam name="TA">The type of the A.</typeparam>
            <typeparam name="TB">The type of the B.</typeparam>
            <typeparam name="TC">The type of the C.</typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Geography.Ellipsoid">
            <summary>
            Represents an ellipsoid.
            </summary>
            <remarks>
                <see href="http://www.colorado.edu/geography/gcraft/notes/datum/elist.html" /> for a list of reference ellipsoids.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Geography.Ellipsoid.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.Ellipsoid"/> class.
            </summary>
            <param name="majorSemiAxis">The major semi axis, in meters.</param>
            <param name="flattening">The flattening of the ellipsoid.</param>
        </member>
        <member name="M:Siriona.Library.Geography.Ellipsoid.op_Inequality(Siriona.Library.Geography.Ellipsoid,Siriona.Library.Geography.Ellipsoid)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="ellipsoid1">The ellipsoid1.</param>
            <param name="ellipsoid2">The ellipsoid2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.Ellipsoid.op_Equality(Siriona.Library.Geography.Ellipsoid,Siriona.Library.Geography.Ellipsoid)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="ellipsoid1">The ellipsoid1.</param>
            <param name="ellipsoid2">The ellipsoid2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.Ellipsoid.Equals(Siriona.Library.Geography.Ellipsoid)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Geography.Ellipsoid"></see> is equal to the current <see cref="T:Siriona.Library.Geography.Ellipsoid"></see>.
            </summary>
            <param name="ellipsoid">The <see cref="T:Siriona.Library.Geography.Ellipsoid"></see> to compare with the current <see cref="T:Siriona.Library.Geography.Ellipsoid"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Geography.Ellipsoid"></see> is equal to the current <see cref="T:Siriona.Library.Geography.Ellipsoid"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.Ellipsoid.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.Ellipsoid.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.MajorSemiAxis">
            <summary>
            Gets the major semi axis.
            </summary>
            <value>The major semi axis.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.MinorSemiAxis">
            <summary>
            Gets the minor semi axis.
            </summary>
            <value>The minor semi axis.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Flattening">
            <summary>
            Gets the flattening.
            </summary>
            <value>The flattening.</value>
        </member>
        <member name="T:Siriona.Library.Geography.Ellipsoid.Earth">
            <summary>
            Provides various earth ellipsoid representations.
            </summary>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.QuadraticMeanRadius">
            <summary>
            Gets the quadratic mean radius of the earth, in meters.
            </summary>
            <value>The quadratic mean radius.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Airy">
            <summary>
            Gets the Airy ellipsoid.
            </summary>
            <value>The Airy ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.AustralianNational">
            <summary>
            Gets the australian national ellipsoid.
            </summary>
            <value>The australian national ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Bessel1841">
            <summary>
            Gets the 1841 Bessel ellipsoid.
            </summary>
            <value>The 1841 Bessel ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.NambiaBessel1841">
            <summary>
            Gets the 1841 Bessel ellipsoid (Nambia).
            </summary>
            <value>The 1841 Bessel ellipsoid (Nambia).</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Clarke1866">
            <summary>
            Gets the 1866 Clarke ellipsoid.
            </summary>
            <value>The 1866 Clarke ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Clarke1880">
            <summary>
            Gets the 1880 Clarke ellipsoid.
            </summary>
            <value>The 1880 Clarke ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Everest">
            <summary>
            Gets the Everest ellipsoid.
            </summary>
            <value>The Everest ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.MercuryFischer1960">
            <summary>
            Gets the 1960 Fischer ellipsoid (Mercury).
            </summary>
            <value>The 1960 Fischer ellipsoid (Mercury).</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Fischer1968">
            <summary>
            Gets the 1968 Fischer ellipsoid.
            </summary>
            <value>The 1968 Fischer ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.GRS67">
            <summary>
            Gets the 1967 GRS ellipsoid.
            </summary>
            <value>The 1967 GRS ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.GRS80">
            <summary>
            Gets the 1980 GRS ellipsoid.
            </summary>
            <value>The 1980 GRS ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Helmert1906">
            <summary>
            Gets the 1906 Helmert ellipsoid.
            </summary>
            <value>The 1906 Helmert ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Hough">
            <summary>
            Gets the Hough ellipsoid.
            </summary>
            <value>The Hough ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.International1927">
            <summary>
            Gets the 1927 International ellipsoid.
            </summary>
            <value>The 1927 International ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Krassovsky">
            <summary>
            Gets the Krassovsky ellipsoid.
            </summary>
            <value>The Krassovsky ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.ModifiedAiry">
            <summary>
            Gets the modified Airy ellipsoid.
            </summary>
            <value>The modified Airy ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.ModifiedEverest">
            <summary>
            Gets the modified Everest ellipsoid.
            </summary>
            <value>The modified Everest ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.ModifiedFischer1960">
            <summary>
            Gets the 1960 modified Fischer ellipsoid.
            </summary>
            <value>The 1960 modified Fischer ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.SouthAmerican1969">
            <summary>
            Gets the 1969 South-American ellipsoid.
            </summary>
            <value>The 1969 South-American ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.WGS60">
            <summary>
            Gets the 1960 WGS ellipsoid.
            </summary>
            <value>The 1960 WGS ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.WGS66">
            <summary>
            Gets the 1966 WGS ellipsoid.
            </summary>
            <value>The 1966 WGS ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.WGS72">
            <summary>
            Gets the 1972 WGS ellipsoid.
            </summary>
            <value>The 1972 WGS ellipsoid.</value>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.WGS84">
            <summary>
            Gets the 1984 WGS ellipsoid.
            </summary>
            <value>The 1984 WGS ellipsoid.</value>
            <remarks>WGS84 is globally used for the Global Positioning System and thus considered as the <see cref="P:Siriona.Library.Geography.Ellipsoid.Earth.Default"/> earth ellipsoid.</remarks>
        </member>
        <member name="P:Siriona.Library.Geography.Ellipsoid.Earth.Default">
            <summary>
            Gets the default (WGS84) ellipsoid.
            </summary>
            <value>The default ellipsoid.</value>
        </member>
        <member name="T:Siriona.Library.Geography.GpsAxis">
            <summary>
            Represents a Gps Axis.
            </summary>
        </member>
        <member name="F:Siriona.Library.Geography.GpsAxis.Latitude">
            <summary>
            Coordinate is a latitude.
            </summary>
        </member>
        <member name="F:Siriona.Library.Geography.GpsAxis.Longitude">
            <summary>
            Coordinate is a longitude.
            </summary>
        </member>
        <member name="T:Siriona.Library.Geography.GpsCoordinate">
            <summary>
            Represents a Gps coordinate.
            </summary>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.#ctor(System.Double,Siriona.Library.Geography.GpsAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsDistance"/> class.
            </summary>
            <param name="degrees">The position, as a serial value.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.#ctor(System.Int32,System.Int32,System.Single,Siriona.Library.Geography.GpsDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsDistance"/> class.
            </summary>
            <param name="degrees">The degrees.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.Latitude(System.Double)">
            <summary>
            Creates a latitude coordinate from the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The coordinate</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.Longitude(System.Double)">
            <summary>
            Creates a longitude coordinate from the specified angle.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The coordinate</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.ToString(System.String)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.op_Inequality(Siriona.Library.Geography.GpsCoordinate,Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="gpsCoordinate1">The GPS coordinate1.</param>
            <param name="gpsCoordinate2">The GPS coordinate2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.op_Equality(Siriona.Library.Geography.GpsCoordinate,Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="gpsCoordinate1">The GPS coordinate1.</param>
            <param name="gpsCoordinate2">The GPS coordinate2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.op_Implicit(Siriona.Library.Geography.GpsCoordinate)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Geography.GpsCoordinate"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="gpsCoordinate">The GPS coordinate.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.Equals(Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Geography.GpsCoordinate"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsCoordinate"></see>.
            </summary>
            <param name="gpsCoordinateLength">The <see cref="T:Siriona.Library.Geography.GpsCoordinate"></see> to compare with the current <see cref="T:Siriona.Library.Geography.GpsCoordinate"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Geography.GpsCoordinate"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsCoordinate"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.CompareTo(Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsCoordinate.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Angle">
            <summary>
            Gets the angle represented by the coordinate, in degrees and fraction of degrees.
            </summary>
            <value>The angle, in degrees and fraction of degrees.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Direction">
            <summary>
            Gets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Distance">
            <summary>
            Gets the distance.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Axis">
            <summary>
            Gets the axis.
            </summary>
            <value>The axis.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Degrees">
            <summary>
            Gets the degrees.
            </summary>
            <value>The degrees.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Minutes">
            <summary>
            Gets the minutes.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.Seconds">
            <summary>
            Gets the seconds.
            </summary>
            <value>The seconds.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsCoordinate.DirectionSign">
            <summary>
            Gets the direction sign.
            </summary>
            <value>The direction sign.</value>
        </member>
        <member name="T:Siriona.Library.Geography.GpsDirection">
            <summary>
            Represents the direction of a <see cref="T:Siriona.Library.Geography.GpsCoordinate"/>.
            </summary>
        </member>
        <member name="F:Siriona.Library.Geography.GpsDirection.North">
            <summary>
            Coordinate is oriented to the north.
            </summary>
        </member>
        <member name="F:Siriona.Library.Geography.GpsDirection.South">
            <summary>
            Coordinate is oriented to the south.
            </summary>
        </member>
        <member name="F:Siriona.Library.Geography.GpsDirection.East">
            <summary>
            Coordinate is oriented to the east.
            </summary>
        </member>
        <member name="F:Siriona.Library.Geography.GpsDirection.West">
            <summary>
            Coordinate is oriented to the west.
            </summary>
        </member>
        <member name="T:Siriona.Library.Geography.GpsDistance">
            <summary>
            Represents a GPS angular distance between two points, or between a point and equator/meridian.
            </summary>
            <remarks>May be used along with a <see cref="T:Siriona.Library.Geography.GpsDirection"/> to represent a <see cref="T:Siriona.Library.Geography.GpsCoordinate"/>.</remarks>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsDistance"/> class.
            </summary>
            <param name="degrees">The angle, in degrees and fraction of degree.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsDistance"/> class.
            </summary>
            <param name="degrees">The degrees.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.ToString(System.String)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.op_Implicit(Siriona.Library.Geography.GpsDistance)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Geography.GpsDistance"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.op_Inequality(Siriona.Library.Geography.GpsDistance,Siriona.Library.Geography.GpsDistance)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="gpsCoordinate1">The GPS coordinate1.</param>
            <param name="gpsCoordinate2">The GPS coordinate2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.op_Equality(Siriona.Library.Geography.GpsDistance,Siriona.Library.Geography.GpsDistance)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="gpsCoordinate1">The GPS coordinate1.</param>
            <param name="gpsCoordinate2">The GPS coordinate2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.Equals(Siriona.Library.Geography.GpsDistance)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Geography.GpsDistance"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsDistance"></see>.
            </summary>
            <param name="gpsDistance">The <see cref="T:Siriona.Library.Geography.GpsDistance"></see> to compare with the current <see cref="T:Siriona.Library.Geography.GpsDistance"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Geography.GpsDistance"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsDistance"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.CompareTo(Siriona.Library.Geography.GpsDistance)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsDistance.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="P:Siriona.Library.Geography.GpsDistance.Angle">
            <summary>
            Gets the angle represented by the current <c>GpsDistance</c>, in degrees and fraction of degrees.
            </summary>
            <value>The angle, in degrees and fraction of degrees.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsDistance.Degrees">
            <summary>
            Gets the degrees.
            </summary>
            <value>The degrees.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsDistance.Minutes">
            <summary>
            Gets the minutes.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsDistance.Seconds">
            <summary>
            Gets the seconds.
            </summary>
            <value>The seconds.</value>
        </member>
        <member name="T:Siriona.Library.Geography.GpsPosition">
            <summary>
            Represents a position on the surface of the earth.
            </summary>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.#ctor(Siriona.Library.Geography.GpsCoordinate,Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsPosition"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsPosition"/> class.
            </summary>
            <param name="latitudeDegrees">The latitude full value in degrees.</param>
            <param name="longitudeDegrees">The longitude full value in degrees.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.op_Inequality(Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.GpsPosition)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="gpsPosition1">The GPS position1.</param>
            <param name="gpsPosition2">The GPS position2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.op_Equality(Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.GpsPosition)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="gpsPosition1">The GPS position1.</param>
            <param name="gpsPosition2">The GPS position2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.op_Subtraction(Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.GpsPosition)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="gpsPosition1">The GPS position1.</param>
            <param name="gpsPosition2">The GPS position2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.Equals(Siriona.Library.Geography.GpsPosition)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Geography.GpsPosition"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsPosition"></see>.
            </summary>
            <param name="gpsPosition">The <see cref="T:Siriona.Library.Geography.GpsPosition"></see> to compare with the current <see cref="T:Siriona.Library.Geography.GpsPosition"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Geography.GpsPosition"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsPosition"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.ToString(System.String)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsPosition.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="P:Siriona.Library.Geography.GpsPosition.Latitude">
            <summary>
            Gets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsPosition.Longitude">
            <summary>
            Gets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="T:Siriona.Library.Geography.GpsRectangle">
            <summary>
            Represents a Gps rectangle
            </summary>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.#ctor(Siriona.Library.Geography.GpsCoordinate,Siriona.Library.Geography.GpsCoordinate,Siriona.Library.Geography.GpsCoordinate,Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Geography.GpsRectangle"/> class.
            </summary>
            <param name="northCoordinate">The north coordinate.</param>
            <param name="eastCoordinate">The east coordinate.</param>
            <param name="southCoordinate">The south coordinate.</param>
            <param name="westCoordinate">The west coordinate.</param>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.FromCoordinates(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Froms the coordinates.
            </summary>
            <param name="northCoordinate">The north coordinate.</param>
            <param name="eastCoordinate">The east coordinate.</param>
            <param name="southCoordinate">The south coordinate.</param>
            <param name="westCoordinate">The west coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.op_Inequality(Siriona.Library.Geography.GpsRectangle,Siriona.Library.Geography.GpsRectangle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="gpsRectangle1">The GPS rectangle1.</param>
            <param name="gpsRectangle2">The GPS rectangle2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.op_Equality(Siriona.Library.Geography.GpsRectangle,Siriona.Library.Geography.GpsRectangle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="gpsRectangle1">The GPS rectangle1.</param>
            <param name="gpsRectangle2">The GPS rectangle2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.Equals(Siriona.Library.Geography.GpsRectangle)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Geography.GpsRectangle"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsRectangle"></see>.
            </summary>
            <param name="gpsRectangle">The <see cref="T:Siriona.Library.Geography.GpsRectangle"></see> to compare with the current <see cref="T:Siriona.Library.Geography.GpsRectangle"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Geography.GpsRectangle"></see> is equal to the current <see cref="T:Siriona.Library.Geography.GpsRectangle"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsRectangle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.Empty">
            <summary>
            Gets the empty GPS rectangle.
            </summary>
            <value>The empty rectange.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.NorthWest">
            <summary>
            Gets the north west.
            </summary>
            <value>The north west.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.NorthEast">
            <summary>
            Gets the north east.
            </summary>
            <value>The north east.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.SouthWest">
            <summary>
            Gets the south west.
            </summary>
            <value>The south west.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.SouthEast">
            <summary>
            Gets the south east.
            </summary>
            <value>The south east.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.NorthCoordinate">
            <summary>
            Gets the north coordinate.
            </summary>
            <value>The north coordinate.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.EastCoordinate">
            <summary>
            Gets the east coordinate.
            </summary>
            <value>The east coordinate.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.SouthCoordinate">
            <summary>
            Gets the south coordinate.
            </summary>
            <value>The south coordinate.</value>
        </member>
        <member name="P:Siriona.Library.Geography.GpsRectangle.WestCoordinate">
            <summary>
            Gets the west coordinate.
            </summary>
            <value>The west coordinate.</value>
        </member>
        <member name="T:Siriona.Library.Geography.GpsUtility">
            <summary>
            Provides utilities to handle GPS data.
            </summary>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.ToRadians(Siriona.Library.Geography.GpsDistance)">
            <summary>
            Converts an angular distance to radians.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The radians</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.ToRadians(Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Converts an angular coordinate to radians.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The radians</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.ToDistance(Siriona.Library.Geography.GpsCoordinate)">
            <summary>
            Gets the absolute distance value between a coordinate and its reference axis (used for disambiguation).
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.ToDistance(Siriona.Library.Geography.GpsDistance)">
            <summary>
            Gets the distance (used for disambiguation).
            </summary>
            <param name="distance">The distance.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.ToDistance(System.Double)">
            <summary>
            Converts a radian angle to a GPS distance.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.GetDistance(Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.GpsPosition)">
            <summary>
            Gets the distance between two points on the earth.
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The second position.</param>
            <returns>The distance, in meters.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.GetSphereSurfaceDistance(Siriona.Library.Geography.GpsDistance,System.Double)">
            <summary>
            Gets the equivalent distance of a <see cref="T:Siriona.Library.Geography.GpsDistance"/> on the surface of a sphere.
            </summary>
            <param name="distance">The GPS distance.</param>
            <param name="radius">The radius.</param>
            <returns>The distance, in radius unit</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.GetEarthSurfaceDistance(Siriona.Library.Geography.GpsDistance)">
            <summary>
            Gets the earth surface distance, using the quadratic mean radius of the earth.
            </summary>
            <param name="distance">The angular distance.</param>
            <returns>The distance, in meters</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.GetGeodeticDistance(Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.GpsPosition)">
            <summary>
            Gets the geodetic distance between two points on the surface of earth, using the <see cref="P:Siriona.Library.Geography.Ellipsoid.Earth.WGS84"/> reference ellipsoid.
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The second position.</param>
            <returns>The distance between the two points, in meters.</returns>
        </member>
        <member name="M:Siriona.Library.Geography.GpsUtility.GetGeodeticDistance(Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.GpsPosition,Siriona.Library.Geography.Ellipsoid)">
            <summary>
            Gets the geodetic distance between two points.
            </summary>
            <param name="position1">The first position.</param>
            <param name="position2">The second position.</param>
            <param name="ellipsoid">The reference ellipsoid.</param>
            <returns>The distance, in meters.</returns>
            <remarks>
            	<see href="http://www.movable-type.co.uk/scripts/latlong-vincenty.html"/> for more information.
            </remarks>
        </member>
        <member name="T:Siriona.Library.Globalization.CultureFallbackType">
            <summary>
            Defines how the culture fallback is performed.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CultureFallbackType.None">
            <summary>
            The fallback is not performed.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CultureFallbackType.ParentOnly">
            <summary>
            The fallback is performed on the parent culture (retrieved from region if necessary) only.
            </summary>
        </member>
        <member name="F:Siriona.Library.Globalization.CultureFallbackType.ParentThenDefaultOrFirstFound">
            <summary>
            The fallback is performed on the parent culture (retrieved from region if necessary), then on the default culture or the first filled culture found.
            </summary>
        </member>
        <member name="T:Siriona.Library.Globalization.Cultures">
            <summary>
            Provides helper methods to manipulate cultures.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.Cultures.FromIsoCode(System.String)">
            <summary>
            Gets a culture from its 2 or 3 letters ISO code.
            </summary>
            <param name="isoCode">The iso code.</param>
            <returns>The culture, or the invariant culture if not found.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Cultures.FromRegion(System.String)">
            <summary>
            Gets a culture from the TwoLetterISORegionName of a region.
            </summary>
            <param name="twoLetterIsoRegionName">Name of the two letter ISO region.</param>
            <returns>
            The culture or the invariant culture if not found
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Cultures.FromRegion(System.Globalization.RegionInfo)">
            <summary>
            Gets a culture from a specified region.
            </summary>
            <param name="region">The region.</param>
            <returns>The culture or the invariant culture if not found</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Cultures.GetParent(System.Globalization.CultureInfo)">
            <summary>
            Gets the parent culture of a specified culture.
            If the parent culture is invariant, tries to get the culture attached to the region of the specified culture.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The parent culture or the invariant culture if not found</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Cultures.CreateCulture(System.String)">
            <summary>
            Creates the specific culture.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns>The specific culture.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Cultures.CreateSpecificCulture(System.String)">
            <summary>
            Creates the specific culture.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns>The specific culture.</returns>
        </member>
        <member name="T:Siriona.Library.Globalization.CultureTree`1">
            <summary>
            Represents a culture tree that manage culture fallbacks.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Globalization.CultureTree`1.#ctor(Siriona.Library.Collections.TryGetValueDelegate{System.Globalization.CultureInfo,`0},System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.CultureTree`1"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="defaultCulture">The default culture.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.CultureTree`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Globalization.CultureInfo,`0}},System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.CultureTree`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultCulture">The default culture.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.CultureTree`1.TryGetValue(System.Globalization.CultureInfo,`0@,System.Globalization.CultureInfo@,Siriona.Library.Globalization.CultureFallbackType)">
            <summary>
            Tries to get the value for the specified culture applying the specified fallback type.
            </summary>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="actualCulture">The actual culture.</param>
            <param name="fallbackType">Type of the fallback.</param>
            <returns>
              <c>true</c> if a localization was found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CultureTree`1.TryGetValue(System.Globalization.CultureInfo,`0@,Siriona.Library.Globalization.CultureFallbackType)">
            <summary>
            Tries to get the value for the specified culture applying the specified fallback type.
            </summary>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="fallbackType">Type of the fallback.</param>
            <returns>
              <c>true</c> if a localization was found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CultureTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CultureTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Globalization.CultureTree`1.Item(System.Globalization.CultureInfo)">
            <summary>
            Gets or sets the object with the specified culture.
            </summary>
            <value>The object</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CultureTree`1.Cultures">
            <summary>
            Gets the cultures.
            </summary>
            <value>The cultures.</value>
        </member>
        <member name="T:Siriona.Library.Globalization.Currencies">
            <summary>
            Provides access to <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/> definitions.
            </summary>
            <remarks>See http://en.wikipedia.org/wiki/ISO_4217. </remarks>
        </member>
        <member name="M:Siriona.Library.Globalization.Currencies.GetCurrency(System.String)">
            <summary>
            Gets the currency from its ISO code.
            </summary>
            <param name="isoCode">The ISO code.</param>
            <returns>The <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/> corresponding to the ISO code; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Currencies.LoadCurrencies">
            <summary>
            Loads the currencies.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.Euro">
            <summary>
            Gets the Euro <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The Euro <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.UsDollar">
            <summary>
            Gets the US dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The US dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.USDollar">
            <summary>
            Gets the US dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The US dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.Yen">
            <summary>
            Gets the Japan Yen <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The Japan Yen <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.Pound">
            <summary>
            Gets the UK Pound Sterling <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The UK Pound Sterling <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.CanadianDollar">
            <summary>
            Gets the Canadian Dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The Canadian Dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.AustralianDollar">
            <summary>
            Gets the Australian Dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The Australian Dollar <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.SwissFranc">
            <summary>
            Gets the Swiss Franc <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <value>The Swiss Franc <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.Circulating">
            <summary>
            Gets the circulating.
            </summary>
            <value>The circulating.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.ActiveCurrencies">
            <summary>
            Gets the active, used currencies.
            </summary>
            <value>The currencies that are active and used.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.InactiveCurrencies">
            <summary>
            Gets the inactive currencies.
            </summary>
            <value>The inactive currencies.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.All">
            <summary>
            Gets all currencies.
            </summary>
            <returns>The currencies</returns>
        </member>
        <member name="P:Siriona.Library.Globalization.Currencies.AvailproCurrencies">
            <summary>
            Gets all availpro currencies.
            </summary>
            <returns>The currencies</returns>
        </member>
        <member name="T:Siriona.Library.Globalization.CurrencyInfo">
            <summary>
            Represents a currency and its associated info.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/> class.
            </summary>
            <param name="isoCode">The iso currency code.</param>
            <param name="isoNumber">The iso number.</param>
            <param name="englishName">Name of the english.</param>
            <param name="decimalDigitCount">The decimal digits.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.#ctor(System.String,System.Int32,System.String,System.Int32,Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/> class.
            </summary>
            <param name="isoCode">The iso currency code.</param>
            <param name="isoNumber">The iso number.</param>
            <param name="englishName">Name of the english.</param>
            <param name="decimalDigitCount">The decimal digits.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.HasFlags(Siriona.Library.Globalization.CurrencyInfoFlags)">
            <summary>
            Determines whether the specified flags are set.
            </summary>
            <param name="testFlags">The test flags.</param>
            <returns>
            	<c>true</c> if the specified flags are set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.RoundAmount(System.Decimal)">
            <summary>
            Rounds the amount using currency defaults.
            </summary>
            <param name="amount">The amount.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.op_Multiply(System.Decimal,Siriona.Library.Globalization.CurrencyInfo)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="amount">The amount.</param>
            <param name="currency">The currency.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.op_Inequality(Siriona.Library.Globalization.CurrencyInfo,Siriona.Library.Globalization.CurrencyInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="currencyInfo1">The currency info1.</param>
            <param name="currencyInfo2">The currency info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.op_Equality(Siriona.Library.Globalization.CurrencyInfo,Siriona.Library.Globalization.CurrencyInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="currencyInfo1">The currency info1.</param>
            <param name="currencyInfo2">The currency info2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.op_Explicit(System.String)~Siriona.Library.Globalization.CurrencyInfo">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/>.
            </summary>
            <param name="isoCode">The iso code.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.Equals(Siriona.Library.Globalization.CurrencyInfo)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="currencyInfo">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="currencyInfo"/> parameter is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use.
            -or-
            null to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.
            -or-
            null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"/> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.IsoCode">
            <summary>
            Gets the iso code.
            </summary>
            <value>The iso code.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.IsoNumber">
            <summary>
            Gets the iso number.
            </summary>
            <value>The iso number.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.IsoCurrencyCode">
            <summary>
            Gets the iso code.
            </summary>
            <value>The iso code.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.EnglishName">
            <summary>
            Gets the name of the english.
            </summary>
            <value>The name of the english.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.DecimalDigits">
            <summary>
            Gets the number of decimal digits.
            </summary>
            <value>The decimal digits count.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.DecimalDigitCount">
            <summary>
            Gets the decimal digit count.
            </summary>
            <value>The decimal digit count.</value>
        </member>
        <member name="P:Siriona.Library.Globalization.CurrencyInfo.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="T:Siriona.Library.Globalization.CurrencyInfoConverter">
            <summary>
            Converts <see cref="T:Siriona.Library.Globalization.CurrencyInfo"/> to and from underlying <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoConverter.ConvertFrom(System.String)">
            <summary>
            Converts from underlying data type to actual value type..
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.CurrencyInfoConverter.ConvertTo(Siriona.Library.Globalization.CurrencyInfo)">
            <summary>
            Converts actual value type to underlying data type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Globalization.GlobalizationAttribute">
            <summary>
            Provides a metadata attribute that specifies a string resource for the globalization.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Siriona.Library.Globalization.GlobalizationAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Globalization.GlobalizationAttribute"/> class.
            </summary>
            <param name="product">The product.</param>
            <param name="page">The page.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:Siriona.Library.Globalization.GlobalizationAttribute.Tag">
            <summary>
            Gets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Siriona.Library.Globalization.Regions">
            <summary>
            Provide access to supported regions.
            </summary>
        </member>
        <member name="M:Siriona.Library.Globalization.Regions.GetRegions">
            <summary>
            Gets the regions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Regions.GetIsoRegions">
            <summary>
            Gets the regions respecting iso codes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Globalization.Regions.GetRegion(System.String)">
            <summary>
            Gets the region from its two letter iso code.
            </summary>
            <param name="twoLetterIsoCode">The two letter iso code.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.GuidUtility">
            <summary>
            Provides helper methods for handling <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.GuidUtility.TryParse(System.String,System.Guid@)">
            <summary>
            Try to load a <see cref="T:System.Guid"/> from a string.
            </summary>
            <param name="text">The string value.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the string does represent a <see cref="T:System.Guid"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.Parse(System.String)">
            <summary>
            Parses the specified string and returns the <see cref="T:System.Guid"/> it contains.
            </summary>
            <param name="text">The string value.</param>
            <returns>The <see cref="T:System.Guid"/></returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.Equals(System.Guid,System.Guid)">
            <summary>
            Tests if two <see cref="T:System.Guid"/> are equal.
            </summary>
            <param name="first">The first id to compare.</param>
            <param name="second">The second id to compare.</param>
            <returns><c>true</c> if both id represent the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.GetHashCode(System.Guid)">
            <summary>
            Returns a platform independant hash code of a globally unique identifier (GUID).
            </summary>
            <param name="guid">The GUID.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.IsEmpty(System.Guid)">
            <summary>
            Determines whether the specified GUID is empty.
            </summary>
            <param name="guid">The GUID to test.</param>
            <returns>
            	<c>true</c> if the specified GUID is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.Compare(System.Guid,System.Guid)">
            <summary>
            Compares the specified <see cref="T:System.Guid"/> objects.
            </summary>
            <param name="first">The first GUID.</param>
            <param name="second">The second GUID.</param>
            <returns><c>0</c> if <c>first</c> and <c>second</c> are equals, a positive value if <c>first</c> is higher than <c>second</c>, otherwise a negative value.</returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.NewSequentialGuid">
            <summary>
            returns a sequential Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.GuidUtility.ValidateMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Validates that the dashes are missing only if there is no parentheses or curly backets.
            </summary>
            <param name="match">The match.</param>
            <returns><c>true</c> if the match is valid.</returns>
        </member>
        <member name="T:Siriona.Library.IInterval`1">
            <summary>
            Represents an interval.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.IInterval`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified key].
            </summary>
            <param name="key">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.IInterval`1.Contains(Siriona.Library.IInterval{`0})">
            <summary>
            Determines whether [contains] [the specified interval].
            </summary>
            <param name="interval">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified interval]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.IInterval`1.IntersectWith(Siriona.Library.IInterval{`0})">
            <summary>
            Indicates whether the current interval intersects with specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the current instance intersects with the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.IInterval`1.Start">
            <summary>
            Gets the start of the interval.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.IInterval`1.End">
            <summary>
            Gets the end of the interval.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.IInterval`1.IsStartClosed">
            <summary>
            Gets a value indicating whether this interval has its start closed.
            </summary>
            <value>
            	<c>true</c> if interval start is closed; otherwise, <c>false</c>.
            </value> 
        </member>
        <member name="P:Siriona.Library.IInterval`1.IsEndClosed">
            <summary>
            Gets a value indicating whether this interval has its end closed.
            </summary>
            <value>
            	<c>true</c> if interval end is closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Injection.DependencyAttribute">
            <summary>
            This attribute is used to mark properties and parameters as targets for injection
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.DependencyAttribute.#ctor">
            <summary>
            Create an instance of DependencyAttribute with no name
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.DependencyAttribute.#ctor(System.String)">
            <summary>
            Create an instance of DependencyAttribute with name
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Siriona.Library.Injection.DependencyAttribute.Name">
            <summary>
            The name specified in the constructor
            </summary>
        </member>
        <member name="T:Siriona.Library.Injection.IIocContainer">
            <summary>
            Injection container interface (facade pattern)
            </summary>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterInstance(System.Type,System.String,System.Object)">
            <summary>
            Registers an instance with the container.
            </summary>
            <param name="t"></param>
            <param name="name"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance with the container.
            </summary>
            <param name="t"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterInstance``1(System.String,``0)">
            <summary>
            Registers an instance with the container.
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="name"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterInstance``1(``0)">
            <summary>
            Registers an instance with the container.
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType(System.Type,System.Type,System.String)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType(System.Type,System.Type)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType``2(System.String)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType``2">
            <summary>
            Registers a type mapping with the container
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType(System.Type,System.Type,System.String,Siriona.Library.Injection.Lifetime)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="name">The name.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType(System.Type,System.Type,Siriona.Library.Injection.Lifetime)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType``2(System.String,Siriona.Library.Injection.Lifetime)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <param name="name">The name.</param>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RegisterType``2(Siriona.Library.Injection.Lifetime)">
            <summary>
            Registers a type mapping with the container.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <param name="lifetime">The lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.RemoveAllExtensions">
            <summary>
            Removes all installed extensions from this container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.Resolve(System.Type,System.String)">
            <summary>
            Gets an instance of the requested type with the given name from the container
            </summary>
            <param name="t"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.Resolve(System.Type)">
            <summary>
            Gets an instance of the requested type from the container.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.Resolve``1(System.String)">
            <summary>
            Gets an instance of the requested name from the container.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.Resolve``1">
            <summary>
            Gets an instance of the requested type from the container.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.ResolveAll(System.Type)">
            <summary>
            Returns instances of all registered types requested.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.ResolveAll``1">
            <summary>
            Returns instances of all registered types requested.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.CreateChildContainer">
            <summary>
            Creates a child container
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.BuildUp``1(``0)">
            <summary>
            Runs an existing object through the container and perform injection on it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existing">The existing object.</param>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.BuildUp``1(``0,System.String)">
            <summary>
            Runs an existing object through the container and perform injection on it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="existing">The existing object.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.BuildUp(System.Type,System.Object)">
            <summary>
            Runs an existing object through the container and perform injection on it.
            </summary>
            <param name="type">The type.</param>
            <param name="existing">The existing object.</param>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.BuildUp(System.Type,System.Object,System.String)">
            <summary>
            Runs an existing object through the container and perform injection on it.
            </summary>
            <param name="type">The type.</param>
            <param name="existing">The existing object.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.Teardown(System.Object)">
            <summary>
            Runs an existing object through the container, and clean it up.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.CanBuild(System.Type,System.String)">
            <summary>
            Returns whether it knowns the type
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Injection.IIocContainer.CheckBuildAll">
            <summary>
            Checks wether all registered types can be build
            </summary>
        </member>
        <member name="P:Siriona.Library.Injection.IIocContainer.Parent">
            <summary>
            Gets the parent container.
            </summary>
        </member>
        <member name="T:Siriona.Library.Injection.InjectionConstructorAttribute">
            <summary>
            This attribute is used to indicate which constructor to choose when the container attempts to build a type
            </summary>
        </member>
        <member name="T:Siriona.Library.Injection.InjectionMethodAttribute">
            <summary>
            This attribute is used to mark methods that should be called when the container is building an object. 
            </summary>
        </member>
        <member name="T:Siriona.Library.Injection.Lifetime">
            <summary>
            Defines the lifetime of component instance.
            </summary>
        </member>
        <member name="F:Siriona.Library.Injection.Lifetime.Transient">
            <summary>
            The component is instanciated on each call.
            </summary>
        </member>
        <member name="F:Siriona.Library.Injection.Lifetime.Container">
            <summary>
            The component acts as a singleton in the container.
            </summary>
        </member>
        <member name="F:Siriona.Library.Injection.Lifetime.PerResolve">
            <summary>
            The component is instanciated once per resolve.
            </summary>
        </member>
        <member name="F:Siriona.Library.Injection.Lifetime.PerRequest">
            <summary>
            The component is instanciated once per request.
            </summary>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.Month">
            <summary>
            Enumeration of the 12 months of a Gregorian calendar.
            Names are in English and values are from 1 to 12.
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.January">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.February">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.March">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.April">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.May">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.June">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.July">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.August">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.September">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.October">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.November">
            <summary>
            
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.Month.December">
            <summary>
            
            </summary>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.RuleDefinition">
            <summary>
            Logical representation of a RULE field in the tz database.
            </summary>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.#ctor(System.String,System.Int32,System.Int32,Siriona.Library.Interop.TimeZone.Month,System.Int32,System.Nullable{System.DayOfWeek},System.TimeSpan,Siriona.Library.Interop.TimeZone.TimeModifier,System.TimeSpan,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Interop.TimeZone.RuleDefinition"/> class.
            </summary>
            <param name="name">EnglishName of the rule.</param>
            <param name="fromYear">From.</param>
            <param name="toYear">To.</param>
            <param name="startMonth">The start month.</param>
            <param name="startDay">The start day.</param>
            <param name="startDayOfWeek">The start day_day of week.</param>
            <param name="startTime">The start time.</param>
            <param name="startTimeModifier">The start time modifier.</param>
            <param name="saveTime">The save time.</param>
            <param name="modifier">The modifier.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.GetFromDateTime(System.TimeSpan)">
            <summary>
            Gets the start date time.
            </summary>
            <param name="utcOffset">The utc offset.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.GetDateTime(System.Int32,System.TimeSpan)">
            <summary>
            Gets the date time.
            </summary>
            <param name="year">The year.</param>
            <param name="utcOffset">The utc offset.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.GetDateTime(System.Int32,System.TimeSpan,Siriona.Library.Interop.TimeZone.RuleDefinition)">
            <summary>
            Gets the start date time.
            </summary>
            <param name="year">The year.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="rule2">The rule2.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.GetToDateTime(System.TimeSpan)">
            <summary>
            Gets the end date time.
            </summary>
            <param name="utcOffset">The utc offset.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.op_Inequality(Siriona.Library.Interop.TimeZone.RuleDefinition,Siriona.Library.Interop.TimeZone.RuleDefinition)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="rule1">The tz rule1.</param>
            <param name="rule2">The tz rule2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.op_Equality(Siriona.Library.Interop.TimeZone.RuleDefinition,Siriona.Library.Interop.TimeZone.RuleDefinition)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="rule1">The tz rule1.</param>
            <param name="rule2">The tz rule2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.CompareTo(Siriona.Library.Interop.TimeZone.RuleDefinition)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.RuleDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.Name">
            <summary>
            Gives the (arbitrary) name of the set of rules this
            rule is part of.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.FromYear">
            <summary>
            Gives the first year in which the rule applies.  Any
            integer year can be supplied; the Gregorian calendar
            is assumed.  The word minimum (or an abbreviation)
            means the minimum year representable as an integer.
            The word maximum (or an abbreviation) means the
            maximum year representable as an integer.  Rules can
            describe times that are not representable as time
            values, with the unrepresentable times ignored; this
            allows rules to be portable among hosts with
            differing time value types.
            </summary>
            <value>From year.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.ToYear">
            <summary>
            Gives the final year in which the rule applies.  In
            addition to minimum and maximum (as above), the word
            only (or an abbreviation) may be used to repeat the
            value of the FROM field.
            </summary>
            <value>To year.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.StartMonth">
            <summary>
            Names the month in which the rule takes effect.
            January = 1, February = 2, ..., December = 12
            </summary>
            <value>The start month.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.StartDay">
            <summary>
            Gives the day on which the rule takes effect.
            Recognized forms include:
            5        the fifth of the month
            lastSun  the last Sunday in the month
            lastMon  the last Monday in the month
            Sun&gt;=8   first Sunday on or after the eighth
            Sun&lt;=25  last Sunday on or before the 25th
            </summary>
            <value>The start day.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.StartDayOfWeek">
            <summary>
            Gives the day on which the rule takes effect.
            Recognized forms include:
            5        the fifth of the month
            lastSun  the last Sunday in the month
            lastMon  the last Monday in the month
            Sun&gt;=8   first Sunday on or after the eighth
            Sun&lt;=25  last Sunday on or before the 25th
            </summary>
            <value>The start day of week.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.StartTime">
            <summary>
            Gives the time of day at which the rule takes
            effect.  Recognized forms include:
            2        time in hours
            2:00     time in hours and minutes
            15:00    24-hour format time (for times after noon)
            1:28:14  time in hours, minutes, and seconds
            -        equivalent to 0
            where hour 0 is midnight at the start of the day,
            and hour 24 is midnight at the end of the day.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.StartTimeModifier">
            <summary>
            In the absence of an indicator, wall clock time is assumed.
            </summary>
            <value>The start time modifier.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.SaveTime">
            <summary>
            Gives the amount of time to be added to local
            standard time when the rule is in effect.  This
            field has the same format as the AT field (although,
            of course, the w and s suffixes are not used).
            </summary>
            <value>The save time.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.Modifier">
            <summary>
            Gives the "variable part" (for example, the "S" or
            "D" in "EST" or "EDT") of time zone abbreviations to
            be used when this rule is in effect.  If this field
            is -, the variable part is null.
            </summary>
            <value>The modifier.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.RuleDefinition.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.TimeModifier">
            <summary>
            Represents a time modifier.
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeModifier.LocalWallTime">
            <summary>
            Default. Wall clock time; actual local time
            tz modifier: no letter or w
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeModifier.LocalStandardTime">
            <summary>
            Local standard time; winter time
            tz modifier: s
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeModifier.UniversalTime">
            <summary>
            UTC time
            tz modifier: u or g or z
            </summary>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.TimeSpanAssumption">
            <summary>
            Represents assumption for a time span
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeSpanAssumption.None">
            <summary>
            No assumption
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeSpanAssumption.Days">
            <summary>
            Days.
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeSpanAssumption.Hours">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeSpanAssumption.Minutes">
            <summary>
            Minutes.
            </summary>
        </member>
        <member name="F:Siriona.Library.Interop.TimeZone.TimeSpanAssumption.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ValidityPeriodBound.UntilYear">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ValidityPeriodBound.UntilMonth">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ValidityPeriodBound.UntilDay">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ValidityPeriodBound.UntilDayOfWeek">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ValidityPeriodBound.UntilTime">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ValidityPeriodBound.UntilTimeModifier">
            <summary>
            Gets the until time modifier.
            </summary>
            <value>The until time modifier.</value>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.ZoneDefinition">
            <summary>
            Logical representation of a ZONE data field in the tz database.
            </summary>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.FormatModifier(Siriona.Library.Interop.TimeZone.RuleDefinition)">
            <summary>
            Formats the modifier.
            </summary>
            <param name="ruleDefinition">The rule.</param>
            <returns>The formatted modifier.</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.GetEndValidityDateTime">
            <summary>
            Gets the until date time.
            </summary>
            <returns>The end of validity.</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.GetLocalTime(System.DateTime)">
            <summary>
            Gets the local time.
            </summary>
            <param name="date">The date.</param>
            <returns>The local time.</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.GetUniversalTime(System.DateTime)">
            <summary>
            Gets the universal time.
            </summary>
            <param name="date">The date.</param>
            <returns>The date</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.IsAfterEndValidity(System.DateTime)">
            <summary>
            Determines whether the specified date is greater than the end of validity.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if the specified date is greater than the end of validity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.Equals(Siriona.Library.Interop.TimeZone.ZoneDefinition)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Interop.TimeZone.ZoneDefinition"></see> is equal to the current <see cref="T:Siriona.Library.Interop.TimeZone.ZoneDefinition"></see>.
            </summary>
            <param name="zone">The <see cref="T:Siriona.Library.Interop.TimeZone.ZoneDefinition"></see> to compare with the current <see cref="T:Siriona.Library.Interop.TimeZone.ZoneDefinition"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Interop.TimeZone.ZoneDefinition"></see> is equal to the current <see cref="T:Siriona.Library.Interop.TimeZone.ZoneDefinition"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneDefinition.CompareTo(Siriona.Library.Interop.TimeZone.ZoneDefinition)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.Empty">
            <summary>
            Gets an empty zone definition.
            </summary>
            <value>The empty zone definition.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.Name">
            <summary>
            The name of the time zone.  This is the name used in
            creating the time conversion information file for the
            zone.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.UtcOffset">
            <summary>
            The amount of time to add to UTC to get standard time
            in this zone.  This field has the same format as the
            AT and SAVE fields of rule lines; begin the field with
            a minus sign if time must be subtracted from UTC.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.RuleName">
            <summary>
            The name of the rule(s) that apply in the time zone
            or, alternately, an amount of time to add to local
            standard time.  If this field is - then standard time
            always applies in the time zone.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.HasRules">
            <summary>
            Gets a value indicating whether this instance has rules.
            </summary>
            <value><c>true</c> if this instance has rules; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>The rules.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.Format">
            <summary>
            The format for time zone abbreviations in this time
            zone.  The pair of characters %s is used to show where
            the "variable part" of the time zone abbreviation
            goes.  Alternately, a slash (/) separates standard and
            daylight abbreviations.
            </summary>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneDefinition.Validitybound">
            <summary>
            Gets the end validity.
            </summary>
            <value>The end validity.</value>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase">
            <summary>
            Represents a TimeZone database.
            </summary>
            <remarks>
            See http://www.iana.org/time-zones for additional information.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.ReadDatabaseFile(System.IO.Stream,System.Collections.Generic.ICollection{Siriona.Library.Interop.TimeZone.RuleDefinition},System.Collections.Generic.IList{Siriona.Library.Interop.TimeZone.ZoneDefinition},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Reads the database file.
            See zic.txt in tzcode
            </summary>
            <param name="stream">The stream.</param>
            <param name="rules">The rules.</param>
            <param name="zones">The zones.</param>
            <param name="links">The links.</param>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.GetTzDataDay(System.String,System.Int32@,System.Nullable{System.DayOfWeek}@)">
            <summary>
            Gets the tz data day.
            </summary>
            <param name="text">The STR.</param>
            <param name="startDay">The start day.</param>
            <param name="dayOfWeek">The start day_day of week.</param>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.GetTzDataTime(System.String,Siriona.Library.Interop.TimeZone.TimeModifier@)">
            <summary>
            Gets the tz data time.
            </summary>
            <param name="saveTime">The save time.</param>
            <param name="timeModifier">The time modifier.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.ParseRuleDefinition(System.String)">
            <summary>
            Parses the data rule.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.ParseZoneDefinition(System.String)">
            <summary>
            Parses the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The zone</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.ParseZoneDefinition(System.String,Siriona.Library.Interop.TimeZone.ZoneDefinition)">
            <summary>
            Parses the pieces.
            </summary>
            <param name="text">The text.</param>
            <param name="baseZone">The base zone.</param>
            <returns>The new zone definition</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.CloneZoneDefinition(Siriona.Library.Interop.TimeZone.ZoneDefinition,System.String)">
            <summary>
            Clones the specified line.
            </summary>
            <param name="zone">The zone.</param>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.GetDateTime(Siriona.Library.Interop.TimeZone.ValidityPeriodBound,System.DateTimeKind,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the date time.
            </summary>
            <param name="bound">The validity end.</param>
            <param name="inflectionKind">Kind of the inflection.</param>
            <param name="utcOffset">The UTC offset.</param>
            <param name="save">The save.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.GetDateTime(System.Int32,Siriona.Library.Interop.TimeZone.Month,System.Int32,System.Nullable{System.DayOfWeek},System.TimeSpan,Siriona.Library.Interop.TimeZone.TimeModifier,System.DateTimeKind,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the date time.
            </summary>
            <param name="pieceYear">The piece year.</param>
            <param name="pieceMonth">The piece month.</param>
            <param name="pieceDay">The piece day.</param>
            <param name="pieceDayOfWeek">The piece day of week.</param>
            <param name="pieceTime">The piece time.</param>
            <param name="timeModifier">The time modifier.</param>
            <param name="inflectionKind">Kind of the inflection.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="save">The save.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.ApplyTimeModifier(Siriona.Library.Interop.TimeZone.TimeModifier,System.DateTimeKind,System.TimeSpan@,System.TimeSpan@,System.DateTime@)">
            <summary>
            Applies the time modifier.
            </summary>
            <param name="timeModifier">The time modifier.</param>
            <param name="inflectionKind">Kind of the inflection.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="save">The save.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.ParseTimeModifier(System.String)">
            <summary>
            Parses the time modifier.
            </summary>
            <param name="timeModifier">The time modifier.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Interop.TimeZone.ZoneInfoDatabase.Current">
            <summary>
            Gets the current database.
            </summary>
            <value>The current database.</value>
        </member>
        <member name="T:Siriona.Library.Interop.TimeZone.ZoneInfoUtility">
            <summary>
            String manipulation and generation methods, as well as string array manipulation.
            </summary>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.SplitQuoteSensitive(System.String,System.Boolean,System.Char[])">
            <summary>
            Splits the string based on whitespace, being sensitive to
            quotes. Always returns a non-null array, possibly zero-length.
            </summary>
            <param name="line">The line.</param>
            <param name="retainDivider">if set to <c>true</c> [retain divider].</param>
            <param name="dividerChars">The divider chars.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.RemoveEmptyPieces(System.String[])">
            <summary>
            Removes the empty pieces.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.IndexOfEmptyPiece(System.String[],System.Int32)">
            <summary>
            Indexes the of empty piece.
            </summary>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.ParseMonth(System.String)">
            <summary>
            Parses the month.
            </summary>
            <param name="value">The value.</param>
            <returns>The month</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.ParseDayOfWeek(System.String)">
            <summary>
            Parses the day of week.
            </summary>
            <param name="value">The value.</param>
            <returns>The day of week.</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.GetLastDay(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets the last day.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The day of week.</param>
            <returns>The last day</returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.TryParseTimeSpan(System.String,Siriona.Library.Interop.TimeZone.TimeSpanAssumption,System.TimeSpan@)">
            <summary>
            Parses the time span. TimeSpan.Parse does not accept
            a plus (+) designator, only minus (-). This parse method
            accepts both. Does not throw any exceptions, but returns
            false on failure. Return true on success.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="noColonAssumption">The no colon assumption.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interop.TimeZone.ZoneInfoUtility.ParseTimeSpan(System.String,Siriona.Library.Interop.TimeZone.TimeSpanAssumption)">
            <summary>
            Parses the time span. TimeSpan.Parse does not accept
            a plus (+) designator, only minus (-). This parse method
            accepts both.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="noColonAssumption">The no colon assumption.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Interval">
            <summary>
            Provides interval utilities.
            </summary>
        </member>
        <member name="M:Siriona.Library.Interval.Closed``1(``0,``0)">
            <summary>
            Creates a closed interval.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interval.Opened``1(``0,``0)">
            <summary>
            Creates an opened interval.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interval.HalfClosed``1(``0,``0)">
            <summary>
            Creates a half closed interval, closed on left, opened on right.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Interval`1">
            <summary>
            Represents an interval.
            </summary>
            <typeparam name="T">The type of the interval bounds.</typeparam>
        </member>
        <member name="M:Siriona.Library.Interval`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Interval"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Siriona.Library.Interval`1.#ctor(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Interval"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isStartClosed">if set to <c>true</c>, start is closed.</param>
            <param name="isEndClosed">if set to <c>true</c> end is closed.</param>
        </member>
        <member name="M:Siriona.Library.Interval`1.Contains(`0)">
            <summary>
            Determines whether the interval contains the specified key.
            </summary>
            <param name="key">The value.</param>
            <returns>
            	<c>true</c> if the interval contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Contains(Siriona.Library.Interval{`0})">
            <summary>
            Determines whether the current interval contains the specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the current instance contains the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.IntersectWith(Siriona.Library.Interval{`0})">
            <summary>
            Indicates whether the current interval intersects with specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the current instance intersects with the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.IsBefore(`0)">
            <summary>
            Determines whether the specified value is before.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is before; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.IsBefore(Siriona.Library.Interval{`0})">
            <summary>
            Determines whether the specified interval is before.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the specified interval is before; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.IsAfter(`0)">
            <summary>
            Determines whether the specified value is after.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is after; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.IsAfter(Siriona.Library.Interval{`0})">
            <summary>
            Determines whether the specified interval is after.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the specified interval is after; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Meets(Siriona.Library.Interval{`0})">
            <summary>
            Determines whether the interval mets the specified interval on its start.
            </summary>
            <param name="interval">The interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Overlaps(Siriona.Library.Interval{`0})">
            <summary>
            Determines whether the interval overlaps the specified interval on its start.
            </summary>
            <param name="interval">The interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Starts(Siriona.Library.Interval{`0})">
            <summary>
            Indicates whether the interval start the specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Ends(Siriona.Library.Interval{`0})">
            <summary>
            Indicates whether the interval ends the specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_LessThan(Siriona.Library.Interval{`0},`0)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_GreaterThan(Siriona.Library.Interval{`0},`0)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_LessThan(`0,Siriona.Library.Interval{`0})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="value">The value.</param>
            <param name="interval">The interval.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_GreaterThan(`0,Siriona.Library.Interval{`0})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="value">The value.</param>
            <param name="interval">The interval.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_LessThan(Siriona.Library.Interval{`0},Siriona.Library.Interval{`0})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="interval1">The interval1.</param>
            <param name="interval2">The interval2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_GreaterThan(Siriona.Library.Interval{`0},Siriona.Library.Interval{`0})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="interval1">The interval1.</param>
            <param name="interval2">The interval2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Equals(Siriona.Library.Interval{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_Equality(Siriona.Library.Interval{`0},Siriona.Library.Interval{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.op_Inequality(Siriona.Library.Interval{`0},Siriona.Library.Interval{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.Equals(Siriona.Library.IInterval{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Interval`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Interval`1.Start">
            <summary>
            Gets the start of the interval.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Interval`1.End">
            <summary>
            Gets the end of the interval.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Interval`1.IsStartClosed">
            <summary>
            Gets a value indicating whether this interval has its start closed.
            </summary>
            <value>
            	<c>true</c> if interval start is closed; otherwise, <c>false</c>.
            </value> 
        </member>
        <member name="P:Siriona.Library.Interval`1.IsEndClosed">
            <summary>
            Gets a value indicating whether this interval has its end closed.
            </summary>
            <value>
            	<c>true</c> if interval end is closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.IntervalValuePair`2">
            <summary>
            Represents an interval with its associated value.
            </summary>
            <typeparam name="TInterval">The type of the interval.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.IntervalValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.IntervalValuePair`2"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.IntervalValuePair`2.Equals(Siriona.Library.IntervalValuePair{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.IntervalValuePair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.IntervalValuePair`2.Interval">
            <summary>
            Gets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Siriona.Library.IntervalValuePair`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.IO.CachedFileManager">
            <summary>
            Represents a manager of file whose content is cached.
            </summary>
            <remarks>
            Subscribers are notified whenever a change 
            as been made on the folder that contains the registered file.
            </remarks>
        </member>
        <member name="M:Siriona.Library.IO.CachedFileManager.Register(System.String,System.EventHandler)">
            <summary>
            Registers the specified file to the manager.
            </summary>
            <param name="filePath">The file or directory path.</param>
            <param name="invalidateCallback">An event handler to a method called when the cache is invalidated.</param>
        </member>
        <member name="M:Siriona.Library.IO.CachedFileManager.IsRegistered(System.String)">
            <summary>
            Determines whether the specified file is registered to the manager.
            </summary>
            <param name="filePath">The file or directory path.</param>
            <returns>
            	<c>true</c> if the specified file is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.IO.CachedFileManager.Unregister(System.String,System.EventHandler)">
            <summary>
            Unregisters a file from the cache manager.
            </summary>
            <param name="filePath">The file or directory path.</param>
            <param name="invalidateCallback">The event handler to a method called when the cache is invalidated.</param>
        </member>
        <member name="T:Siriona.Library.IO.CsvSplitter">
            <summary>
            Splits Csv files.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.CsvSplitter.Split(System.String)">
            <summary>
            Splits the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.IO.CsvSplitter.Split(System.IO.TextReader)">
            <summary>
            Splits the text from specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.IO.CsvWriter">
            <summary>
            Provides methods to write a Csv stream.
            </summary>
            <remarks>
            Create a stream writer using an existing stream,
            add values using the <c>Write</c> methods, each value
            will be sperarated using the <see cref="P:Siriona.Library.IO.CsvWriter.Separator"/> character.
            When all the value of a record have been written, call the <see cref="M:Siriona.Library.IO.CsvWriter.EndRecord"/>
            to end the line and begin a new one.
            <see href="http://www.creativyst.com/Doc/Articles/CSV/CSV01.htm"/>
            </remarks>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.IO.CsvWriter"/> class.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The encoding of characters in the stream.</param>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(Siriona.Library.Data.IDataValue)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer to the text stream.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"/> is at the end the stream.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer to the text stream.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer to the text stream.
            </summary>
            <param name="value">The 8-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer to the text stream.
            </summary>
            <param name="value">The 8-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value to the text stream.
            </summary>
            <param name="value">The 4-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Double)">
            <summary>
            Writes the text representation of an 8-byte floating-point value to the text stream.
            </summary>
            <param name="value">The 8-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Decimal)">
            <summary>
            Writes the text representation of a decimal value to the text stream.
            </summary>
            <param name="value">The decimal value to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.String,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <param name="arg1">An object to write into the formatted string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">An object to write into the formatted string.</param>
            <param name="arg1">An object to write into the formatted string.</param>
            <param name="arg2">An object to write into the formatted string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg">The object array to write into the formatted string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> or <paramref name="arg"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to <paramref name="arg"/>. Length.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write. If <paramref name="buffer"/> is null, nothing is written.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"/> is at the end the stream.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write.</param>
            <param name="index">The index into <paramref name="buffer"/> at which to begin writing.</param>
            <param name="count">The number of characters to read from <paramref name="buffer"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"/> is at the end the stream.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text stream by calling ToString on that object.
            </summary>
            <param name="value">The object to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">The string to write to the stream. If <paramref name="value"/> is null, nothing is written.</param>
            <exception cref="T:System.ObjectDisposedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and current writer is closed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="P:System.IO.StreamWriter.AutoFlush"/> is true or the <see cref="T:System.IO.StreamWriter"/> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <see cref="T:System.IO.StreamWriter"/> is at the end the stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.DateTime)">
            <summary>
            Writes the specified date.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteRecord(System.Object[])">
            <summary>
            Writes the record.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.Write(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value to the text stream.
            </summary>
            <param name="value">The Boolean to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Char)">
            <summary>
            Writes a character followed by a line terminator to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Char[])">
            <summary>
            Writes an array of characters followed by a line terminator to the text stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters followed by a line terminator to the text stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
            <param name="index">The index into <paramref name="buffer"/> at which to begin reading.</param>
            <param name="count">The maximum number of characters to write.</param>
            <exception cref="T:System.ArgumentException">
            The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="buffer"/> parameter is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean followed by a line terminator to the text stream.
            </summary>
            <param name="value">The Boolean to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte signed integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte unsigned integer to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Double)">
            <summary>
            Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte floating-point value to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Decimal)">
            <summary>
            Writes the text representation of a decimal value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The decimal value to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value"/> is null, only the line termination characters are written.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object by calling ToString on this object, followed by a line terminator to the text stream.
            </summary>
            <param name="value">The object to write. If <paramref name="value"/> is null, only the line termination characters are written.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatted string.</param>
            <param name="arg0">The object to write into the formatted string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the format string.</param>
            <param name="arg1">The object to write into the format string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the format string.</param>
            <param name="arg1">The object to write into the format string.</param>
            <param name="arg2">The object to write into the format string.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="format"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg">The object array to write into format string.</param>
            <exception cref="T:System.ArgumentNullException">
            A string or object is passed in as null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.FormatException">
            The format specification in format is invalid.
            -or-
            The number indicating an argument to be formatted is less than zero, or larger than or equal to arg.Length.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.WriteLine">
            <summary>
            Writes a line terminator to the text stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:System.IO.TextWriter"/> is closed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:Siriona.Library.IO.CsvWriter.EndRecord">
            <summary>
            Ends the record and begins a new line.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.CsvWriter.Separator">
            <summary>
            Gets or sets the separator character.
            </summary>
            <value>The separator character. The default separator is ';'.</value>
        </member>
        <member name="P:Siriona.Library.IO.CsvWriter.TrueString">
            <summary>
            Gets or sets the true string.
            </summary>
            <value>The true string.</value>
        </member>
        <member name="P:Siriona.Library.IO.CsvWriter.FalseString">
            <summary>
            Gets or sets the false string.
            </summary>
            <value>The false string.</value>
        </member>
        <member name="P:Siriona.Library.IO.CsvWriter.Culture">
            <summary>
            Gets or sets the culture used to serialize values.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:Siriona.Library.IO.CsvWriter.PreserveWhitespaces">
            <summary>
            Gets or sets a value indicating whether to preserve whitespaces.
            </summary>
            <value><c>true</c> if whitespaces must be preserved; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.IO.FileMapping">
            <summary>
            Represents a file mapping.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.OpenRead(System.String)">
            <summary>
            Opens a file mapping in readonly mode.
            </summary>
            <param name="filename">The name of the file to map.</param>
            <returns>A FileMapping object representing the file mapping.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.OpenWrite(System.String)">
            <summary>
            Opens a file mapping in read/write mode.
            </summary>
            <param name="filename">The name of the file to map.</param>
            <returns>A FileMapping object representing the file mapping.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.Create(System.String,System.Int64)">
            <summary>
            Creates a file mapping in read/write mode.
            </summary>
            <param name="filename">The name of the file to map.</param>
            <param name="length">The length of the file to create.</param>
            <returns>A FileMapping object representing the file mapping.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.Finalize">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.Close">
            <summary>
            Closes the file mapping and the underlying file.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.CreateView(System.Int64,System.Int32,Siriona.Library.IO.FileMappingViewAccess)">
            <summary>
            Creates a view of the file mapping.
            </summary>
            <param name="offset">The offset of the mapped area relative to the begining of the file. Must be a multiple of
            system allocation granularity.</param>
            <param name="length">The length of the mapped area.</param>
            <param name="desiredAccess">The kind of read/write access for the view.</param>
            <returns>A FileMappingView object representing the mapped view.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.SetSize(System.Int64)">
            <summary>
            Sets the filemapping underlying file size to a new value.
            </summary>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:Siriona.Library.IO.FileMapping.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Siriona.Library.IO.FileMapping.AllocationGranularity">
            <summary>
            Gets the system allocation granularity.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMapping.PageSize">
            <summary>
            Gets the system file page size.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMapping.Size">
            <summary>
            Gets the size of the file.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMapping.Handle">
            <summary>
            Gets the system handle of the filemapping object.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMapping.Views">
            <summary>
            Gets a collection of views.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMapping.Writable">
            <summary>
            Gets a value indicating whether it is possible to write into the filemapping.
            </summary>
        </member>
        <member name="T:Siriona.Library.IO.FileMappingView">
            <summary>
            Represents a view of a file mapping.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingView.Finalize">
            <summary>
            Finalizer for the FileMappingViewObject. Releases internal resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingView.Dispose">
            <summary>
            Releases the internal resources of the view.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingView.GetStream">
            <summary>
            Gets a stream to read or write the data in the view.
            </summary>
            <returns>A reference on a <see cref="T:System.IO.Stream"/> object that can be used to read and/or write to the file mapping.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingView.Flush(System.Int32,System.Int32)">
            <summary>
            Flushes specified range of the view to disk.
            </summary>
            <param name="flushOffset">Offset of data (relative to the view base address).</param>
            <param name="flushLength">The length of the data to flush.</param>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingView.Dispose(System.Boolean)">
            <summary>
            Handles internally the releasing of resources.
            </summary>
            <param name="disposing">A <c>bool</c> value indicating whether the method is through the <see cref="T:System.IDisposable"/> interface or by the object finalizer.</param>
        </member>
        <member name="P:Siriona.Library.IO.FileMappingView.Offset">
            <summary>
            Gets the offset of the view relative to the begining of the file. This is a multiple of system allocation granularity.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMappingView.Length">
            <summary>
            Gets the length of the view.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMappingView.BaseAddress">
            <summary>
            Gets the base address of the view in local memory.
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.FileMappingView.FileMapping">
            <summary>
            Gets the filemapping object.
            </summary>
        </member>
        <member name="T:Siriona.Library.IO.FileMappingViewAccessExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.IO.FileMappingViewAccess"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewAccessExtensionMethods.Count(Siriona.Library.IO.FileMappingViewAccess)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewAccessExtensionMethods.Contains(Siriona.Library.IO.FileMappingViewAccess,Siriona.Library.IO.FileMappingViewAccess[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewAccessExtensionMethods.AddIf(Siriona.Library.IO.FileMappingViewAccess,System.Boolean,Siriona.Library.IO.FileMappingViewAccess)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewAccessExtensionMethods.RemoveIf(Siriona.Library.IO.FileMappingViewAccess,System.Boolean,Siriona.Library.IO.FileMappingViewAccess)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewAccessExtensionMethods.Add(Siriona.Library.IO.FileMappingViewAccess,Siriona.Library.IO.FileMappingViewAccess)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewAccessExtensionMethods.Remove(Siriona.Library.IO.FileMappingViewAccess,Siriona.Library.IO.FileMappingViewAccess)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Siriona.Library.IO.FileMappingViewAccess">
            <summary>
            FileMappingViewAccess flags.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.FileMappingViewAccess.None">
            <summary>
            No access.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.FileMappingViewAccess.Copy">
            <summary>
            Copy-on-write access.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.FileMappingViewAccess.Write">
            <summary>
            Read/write access.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.FileMappingViewAccess.Read">
            <summary>
            Read-only access.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.FileMappingViewAccess.Execute">
            <summary>
            Execute access.
            </summary>
        </member>
        <member name="T:Siriona.Library.IO.FileMappingViewCollection">
            <summary>
            Represents a collection of FileMappingView objects.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.FileMappingViewCollection.CopyTo(Siriona.Library.IO.FileMappingView[],System.Int32)">
            <summary>
            Copies the content of the collection to an array of <see cref="T:Siriona.Library.IO.FileMappingView"/> objects.
            </summary>
            <param name="array">The target array.</param>
            <param name="index">The target position of the first item.</param>
        </member>
        <member name="P:Siriona.Library.IO.FileMappingViewCollection.Item(System.Int32)">
            <summary>
            Gets a FileMappingView object by its index in collection.
            </summary>
            <param name="index">The position of the view in the collection.</param>
        </member>
        <member name="T:Siriona.Library.IO.LogFile">
            <summary>
            Represents a log file.
            </summary>
            <remarks>
            A log file is a group of text files that may, or may not, have the following properties :
            <list>
            		<item>A name based on date or time (rollover).</item>
            		<item>A maximum size.</item>
            		<item>A maximum number of files in the group, or</item>
            		<item>A maximum size for all the files in the group.</item>
            		<item>A header and/or a footer.</item>
            	</list>
            A log file is used to store information about one or more events.
            Log files typically have a ".log" extension.
            </remarks>
        </member>
        <member name="F:Siriona.Library.IO.LogFile.DefaultMaximumFileSize">
            <summary>
            Gets the default maximum file size for a log file whose rollover is <see cref="F:Siriona.Library.IO.LogFileRolloverType.Index"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.LogFile.#ctor(Siriona.Library.IO.LogFileRolloverType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.IO.LogFile"/> class.
            </summary>
            <param name="rolloverType">Type of the rollover.</param>
            <param name="filenameFormat">The file format string.</param>
        </member>
        <member name="M:Siriona.Library.IO.LogFile.#ctor(Siriona.Library.IO.LogFileRolloverType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.IO.LogFile"/> class.
            </summary>
            <param name="rolloverType">Type of the rollover.</param>
            <param name="filenameFormat">The file format string.</param>
            <param name="headerText">The file header text.</param>
            <param name="footerText">The file footer text.</param>
            <remarks>
            The file format string is a standard .Net format string that contains a single parameter ({0}),
            representing the rollover part of the file name (index or date/time).
            </remarks>
        </member>
        <member name="M:Siriona.Library.IO.LogFile.#ctor(Siriona.Library.IO.LogFileRolloverType,System.String,System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.IO.LogFile"/> class.
            </summary>
            <param name="rolloverType">Type of the rollover.</param>
            <param name="fileNameFormat">The file format string.</param>
            <param name="headerText">The file header text.</param>
            <param name="footerText">The file footer text.</param>
            <param name="maximumSize">Maximum size of the log file group, in bytes.</param>
            <param name="maximumFileSize">Maximum size of each file in the group, in bytes. Used only if <c>rolloverType</c> is <see cref="F:Siriona.Library.IO.LogFileRolloverType.None"/> or <see cref="F:Siriona.Library.IO.LogFileRolloverType.Index"/>.</param>
            <remarks>
            The file format string is a standard .Net format string that contains a single parameter ({0}),
            representing the rollover part of the file name (index or date/time).
            </remarks>
        </member>
        <member name="M:Siriona.Library.IO.LogFile.Close">
            <summary>
            Closes the log file.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.LogFile.WriteLine(System.String)">
            <summary>
            Writes an event, plus an end of line character, to the log file.
            </summary>
            <param name="eventText">The text of the event</param>
        </member>
        <member name="M:Siriona.Library.IO.LogFile.Write(System.String)">
            <summary>
            Writes an event to the log file.
            </summary>
            <param name="eventText">The text of the event</param>
        </member>
        <member name="P:Siriona.Library.IO.LogFile.FileFormatString">
            <summary>
            Gets the file format string.
            </summary>
            <value>The file format string.</value>
        </member>
        <member name="P:Siriona.Library.IO.LogFile.RolloverType">
            <summary>
            Gets the type of the rollover.
            </summary>
            <value>The type of the rollover.</value>
        </member>
        <member name="P:Siriona.Library.IO.LogFile.FooterText">
            <summary>
            Gets or sets the footer text.
            </summary>
            <value>The footer text.</value>
        </member>
        <member name="P:Siriona.Library.IO.LogFile.HeaderText">
            <summary>
            Gets or sets the header text.
            </summary>
            <value>The header text.</value>
        </member>
        <member name="P:Siriona.Library.IO.LogFile.MaximumSize">
            <summary>
            Gets or sets the maximum size.
            </summary>
            <value>The maximum size.</value>
        </member>
        <member name="P:Siriona.Library.IO.LogFile.MaximumFileSize">
            <summary>
            Gets or sets the maximum size of each file in the group.
            </summary>
            <value>The maximum size of the file.</value>
        </member>
        <member name="T:Siriona.Library.IO.LogFileRolloverType">
            <summary>
            Represents the type of rollover that applies to a <see cref="T:Siriona.Library.IO.LogFile"/>.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.LogFileRolloverType.None">
            <summary>
            The log file does not use rollover.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.LogFileRolloverType.Index">
            <summary>
            The file name is based on an integer index.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.LogFileRolloverType.Date">
            <summary>
            The file name is based on the current date.
            </summary>
        </member>
        <member name="T:Siriona.Library.IO.MimeType">
            <summary>
            Represents a MimeType
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.MimeType.FromFile(System.String)">
            <summary>
            Gets a MIME type from a file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>The MIME type.</returns>
        </member>
        <member name="M:Siriona.Library.IO.MimeType.FromExtension(System.String)">
            <summary>
            Get a MIME type from a file extension.
            </summary>
            <param name="fileExtension">The file extension.</param>
            <returns>The MIME type.</returns>
        </member>
        <member name="M:Siriona.Library.IO.MimeType.FromContentType(System.String)">
            <summary>
            Gets a MIME type from a content-type.
            </summary>
            <param name="contentType">Content-type.</param>
            <returns>The MIME type.</returns>
        </member>
        <member name="P:Siriona.Library.IO.MimeType.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Siriona.Library.IO.MimeType.DefaultExtension">
            <summary>
            Gets the default extension.
            </summary>
            <value>The default extension.</value>
        </member>
        <member name="T:Siriona.Library.IO.PathUtility">
            <summary>
            Provides helpers for handling path.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.PathUtility.Combine(System.String,System.String[])">
            <summary>
            Combines the specified path parts.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="pathParts">The additional path parts.</param>
            <returns>The resulting path.</returns>
        </member>
        <member name="T:Siriona.Library.IO.StreamUtility">
            <summary>
            Provides helper methods for handling <see cref="T:System.IO.Stream"/> objects.
            </summary>
        </member>
        <member name="F:Siriona.Library.IO.StreamUtility.DefaultBufferLength">
            <summary>
            Gets the default copy buffer length, in bytes.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.StreamUtility.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies data from a stream to another stream.
            </summary>
            <param name="targetStream">The target stream.</param>
            <param name="sourceStream">The source stream.</param>
            <remarks>Read stream from current position. When the stream is seekable,
            the input stream is reset to its original position.</remarks>
        </member>
        <member name="M:Siriona.Library.IO.StreamUtility.Clone(System.IO.Stream)">
            <summary>
            Creates an in-memory copy of a stream.
            </summary>
            <param name="stream">The source stream.</param>
            <returns>The copy of the stream in memory.</returns>
            <remarks>The stream is read from current location.</remarks>
        </member>
        <member name="M:Siriona.Library.IO.StreamUtility.MakeSeekable(System.IO.Stream)">
            <summary>
            Clones the stream to a memory stream when not seekable, or returns the original stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamUtility.Save(System.IO.Stream,System.String)">
            <summary>
            Saves the content of a stream to a file.
            </summary>
            <param name="stream">The stream to save.</param>
            <param name="path">The path of the file.</param>
            <remarks>Read stream from current position. When the stream is seekable,
            the input stream is reset to its original position.</remarks>
        </member>
        <member name="T:Siriona.Library.IO.StreamView">
            <summary>
            Represents a seekable view in a seekable stream.
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates an instance of StreamView
            </summary>
            <param name="baseStream">Base stream</param>
            <param name="offset">Offset of the view in the stream</param>
            <param name="length">Length of the view</param>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begin a read operation
            </summary>
            <param name="buffer">Output buffer</param>
            <param name="offset">Offset in the buffer</param>
            <param name="count">Number of bytes to read</param>
            <param name="callback">Completion callback</param>
            <param name="state">Parameter for the completion callback</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begin a write operation
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Offset in the buffer</param>
            <param name="count">Nuber of bytes to write</param>
            <param name="callback">Completion callback</param>
            <param name="state">Parameter for the completion callback</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.Close">
            <summary>
            Closes the stream view
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.EndRead(System.IAsyncResult)">
            <summary>
            End a read operation
            </summary>
            <param name="asyncResult">Result of the asynchronous operation</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.EndWrite(System.IAsyncResult)">
            <summary>
            End a write operation
            </summary>
            <param name="asyncResult">Result of the asynchronous operation</param>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.Flush">
            <summary>
            Flushes pending operations
            </summary>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data in the stream view
            </summary>
            <param name="buffer">Output buffer</param>
            <param name="offset">Offset in the buffer</param>
            <param name="count">Number of bytes to read</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.ReadByte">
            <summary>
            Read a byte in the stream view
            </summary>
            <returns>Byte read</returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to a given position in the stream view
            </summary>
            <param name="offset">New position</param>
            <param name="origin">Origin</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream view (not supported)
            </summary>
            <param name="value">Length of the stream view</param>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data in the stream view
            </summary>
            <param name="buffer">The array of <see cref="T:System.Byte"/> to write into the stream.</param>
            <param name="offset">Buffer to write</param>
            <param name="count">Number of bytes to be written</param>
        </member>
        <member name="M:Siriona.Library.IO.StreamView.WriteByte(System.Byte)">
            <summary>
            Write a byte
            </summary>
            <param name="value">Byte to be written</param>
        </member>
        <member name="P:Siriona.Library.IO.StreamView.CanRead">
            <summary>
            Indicates if stream view can be read
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.StreamView.CanWrite">
            <summary>
            Indicates if stream view can be written
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.StreamView.CanSeek">
            <summary>
            Indicates if one can seek in the stream view
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.StreamView.Length">
            <summary>
            Gets the length of the stream view
            </summary>
        </member>
        <member name="P:Siriona.Library.IO.StreamView.Position">
            <summary>
            Gets/Sets the position in the stream view
            </summary>
        </member>
        <member name="T:Siriona.Library.ITransactionable">
            <summary>
            Represents the ability of an object to be part of a transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.ITransactionable.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.ITransactionable.CommitTransaction">
            <summary>
            Validates the operations done during the transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.ITransactionable.RollbackTransaction">
            <summary>
            Cancels any modification done during the transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.ITransactionable.EndTransaction">
            <summary>
            Ends the transaction.
            </summary>
            <remarks>Invoked by caller whatever the result of the transaction.</remarks>
        </member>
        <member name="P:Siriona.Library.ITransactionable.IsInTransaction">
            <summary>
            Indicates whether the object is running in the context of a transaction.
            </summary>
            <value>
            	<c>true</c> if this instance is in transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Late`1">
            <summary>
            Represents a late binding of an object from a <see cref="T:Siriona.Library.Func`1"/> delegate.
            </summary>
            <typeparam name="T">The type of the bound object.</typeparam>
            <remarks>
                Late-binding is intended to delay obtention of non-critical information.
                Data associated with the bound object are isLoaded from the data source only when needed.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Late`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Late`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Late`1.#ctor(Siriona.Library.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Late`1"/> class.
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:Siriona.Library.Late`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Late`1.op_Implicit(Siriona.Library.Late{`0})~`0">
            <summary>
            Implicitly convert the specified late binding to its value.
            </summary>
            <param name="late">The late binding.</param>
            <returns>The bound object.</returns>
        </member>
        <member name="M:Siriona.Library.Late`1.op_Implicit(`0)~Siriona.Library.Late{`0}">
            <summary>
            Performs an implicit conversion from a value to a late binding to this value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Late`1.op_Implicit(Siriona.Library.Func{`0})~Siriona.Library.Late{`0}">
            <summary>
            Performs an implicit conversion from a value to a late binding to this value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Late`1.op_Inequality(Siriona.Library.Late{`0},Siriona.Library.Late{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="late1">The late1.</param>
            <param name="late2">The late2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Late`1.op_Equality(Siriona.Library.Late{`0},Siriona.Library.Late{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="late1">The late1.</param>
            <param name="late2">The late2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Late`1.Equals(Siriona.Library.Late{`0})">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Late`1"></see> is equal to the current <see cref="T:Siriona.Library.Late`1"></see>.
            </summary>
            <param name="late">The <see cref="T:Siriona.Library.Late`1"></see> to compare with the current <see cref="T:Siriona.Library.Late`1"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Late`1"></see> is equal to the current <see cref="T:Siriona.Library.Late`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="P:Siriona.Library.Late`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
            <returns>The value of the object</returns>
        </member>
        <member name="P:Siriona.Library.Late`1.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound to its data.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Late">
            <summary>
            Represents a late-binding
            </summary>
        </member>
        <member name="M:Siriona.Library.Late.Create``1(Siriona.Library.Func{``0})">
            <summary>
            Creates a late-binding using the specified loader.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="loader">The loader.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Late.GetUnderlyingType(System.Type)">
            <summary>
            Gets the underlying type of the Late&lt;&gt; type.
            </summary>
            <param name="lateType">Type of the late value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Late.Enumerate``1(Siriona.Library.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Delays evaluation of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> value.
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="evaluator">The evaluator of the value.</param>
            <returns>The enumerable value.</returns>
        </member>
        <member name="T:Siriona.Library.Late`2">
            <summary>
            Represents an object whose value is associated with an id and dynamically loaded.
            </summary>
            <typeparam name="TId">The type of the id.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Late`2.#ctor(`0,Siriona.Library.Func{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Late`2"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:Siriona.Library.Late`2.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Late`2.op_Implicit(Siriona.Library.Late{`0,`1})~`1">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Late`2"/> to <c>TValue</c>.
            </summary>
            <param name="late">The late.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Late`2.op_Implicit(Siriona.Library.Late{`0,`1})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Late`2"/> to <c>TValue</c>.
            </summary>
            <param name="late">The late.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Late`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`2.op_Inequality(Siriona.Library.Late{`0,`1},Siriona.Library.Late{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="late1">The late1.</param>
            <param name="late2">The late2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Late`2.op_Equality(Siriona.Library.Late{`0,`1},Siriona.Library.Late{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="late1">The late1.</param>
            <param name="late2">The late2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Late`2.Equals(`0)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Late`2"></see> is equal to the current <c>TId</c>.
            </summary>
            <param name="otherId">The <see cref="T:Siriona.Library.Late`2"></see> to compare with the current <c>TId</c>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Late`2"></see> is equal to the current <c>TId</c>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`2.Equals(`1)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Late`2"></see> is equal to the current <c>TValue</c>.
            </summary>
            <param name="otherValue">The <see cref="T:Siriona.Library.Late`2"></see> to compare with the current <c>TValue</c>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Late`2"></see> is equal to the current <c>TValue</c>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`2.Equals(Siriona.Library.Late{`0,`1})">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Late`2"></see> is equal to the current <see cref="T:Siriona.Library.Late`2"></see>.
            </summary>
            <param name="other">The <see cref="T:Siriona.Library.Late`2"></see> to compare with the current <see cref="T:Siriona.Library.Late`2"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Late`2"></see> is equal to the current <see cref="T:Siriona.Library.Late`2"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Late`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="P:Siriona.Library.Late`2.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Siriona.Library.Late`2.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Late`2.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.BufferMaskLength">
            <summary>
              Looks up a localized string similar to Buffer and mask lengths must be equal..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.CachedFileManagerFileNotFound">
            <summary>
              Looks up a localized string similar to File or directory does not exist..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.CommitError">
            <summary>
              Looks up a localized string similar to Cannot call SqlDataAccessBase.Commit when no transaction is pending..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ConnectionSettingsNotFoundError">
            <summary>
              Looks up a localized string similar to Could not find the &apos;{0}&apos; connection settings in the configuration file..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.EmailFormat">
            <summary>
              Looks up a localized string similar to {0} &lt;{1}&gt;.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.EmptyEnumerationError">
            <summary>
              Looks up a localized string similar to The collection should contain at least one item..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorReportNoReportedException">
            <summary>
              Looks up a localized string similar to There is no exception to report..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorReportNoReportedMessage">
            <summary>
              Looks up a localized string similar to There is no message to report..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterBeginAlreadyInvoked">
            <summary>
              Looks up a localized string similar to Begin() has already been called..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterBeginNotInvoked">
            <summary>
              Looks up a localized string similar to Begin() has not been called..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterInvalidFileFormat">
            <summary>
              Looks up a localized string similar to The specified file is not a log report file..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotClosedPart">
            <summary>
              Looks up a localized string similar to Previous part has not been closed..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotClosedSection">
            <summary>
              Looks up a localized string similar to Previous section has not been closed..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotOpenedPart">
            <summary>
              Looks up a localized string similar to No part has been opened..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotOpenedSection">
            <summary>
              Looks up a localized string similar to No section has been opened..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotSupportedInErrorOrMessage">
            <summary>
              Looks up a localized string similar to Calling this method is not supported in the context of an Error or Message section..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotSupportedOutsideError">
            <summary>
              Looks up a localized string similar to Calling this method is not supported outside the context of an Error section..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ErrorWriterNotSupportedOutsideMessage">
            <summary>
              Looks up a localized string similar to Calling this method is not supported outside the context of a Message section..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ExcludedPeriod">
            <summary>
              Looks up a localized string similar to Between {0} and {1}.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.HebrewClendarIsNotSupported">
            <summary>
              Looks up a localized string similar to Hebrew Clendar is not supported.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run__0__connected">
            <summary>
              Looks up a localized string similar to {0} connected.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run__0__connecting">
            <summary>
              Looks up a localized string similar to {0} connecting.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run__0__started">
            <summary>
              Looks up a localized string similar to {0} started.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run__0__starting">
            <summary>
              Looks up a localized string similar to {0} starting.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run_Disconnected">
            <summary>
              Looks up a localized string similar to Disconnected.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run_Stopped">
            <summary>
              Looks up a localized string similar to Stopped.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.Host_Run_Stopping">
            <summary>
              Looks up a localized string similar to Stopping.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.IncludedPeriod">
            <summary>
              Looks up a localized string similar to From {0} to {1}.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.IntervalsShouldBeClosedOnTheLeft">
            <summary>
              Looks up a localized string similar to Intervals used in {0} should be closed on the left.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.IntervalsShouldBeOpenOnTheRight">
            <summary>
              Looks up a localized string similar to Intervals used in {0} should be open on the right.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidBlockSize">
            <summary>
              Looks up a localized string similar to The source buffer does not contain an integer number of blocks.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidBodyEncodingError">
            <summary>
              Looks up a localized string similar to The body encoding is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidDefaultEncodingError">
            <summary>
              Looks up a localized string similar to The default encoding is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidDeliveryNotificationOptionError">
            <summary>
              Looks up a localized string similar to The delivery notification option is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidDisplayNameError">
            <summary>
              Looks up a localized string similar to The display name contains invalid characters..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidEmailError">
            <summary>
              Looks up a localized string similar to The parameter is not a valid email address..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidHexChar">
            <summary>
              Looks up a localized string similar to Invalid character found in hexadecimal string..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidMailTemplateCultureError">
            <summary>
              Looks up a localized string similar to The mail template culture is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidMoneyArgumentError">
            <summary>
              Looks up a localized string similar to The argument should be a Money..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidMultipartWriterEncodingError">
            <summary>
              Looks up a localized string similar to The encoding should be Ascii or Utf8..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidPriorityError">
            <summary>
              Looks up a localized string similar to The priority is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvalidSubjectEncodingError">
            <summary>
              Looks up a localized string similar to The subject encoding is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.InvariantMailTemplateNotFoundError">
            <summary>
              Looks up a localized string similar to The invariant culture mail template &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.JobNotInTransaction">
            <summary>
              Looks up a localized string similar to Instance is not part of a transaction.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.MailTemplateExceptionMessage">
            <summary>
              Looks up a localized string similar to An error occurred while parsing MailTemplate {0} ({1}) : {2}..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.MailTemplateOpeningError">
            <summary>
              Looks up a localized string similar to An error occurred while opening mail template..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.MailTemplateReadingError">
            <summary>
              Looks up a localized string similar to An error occurred while reading mail template..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.MoneyCurrencyShouldMatchError">
            <summary>
              Looks up a localized string similar to Money currency should match..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.MultipartWriterBaseStreamError">
            <summary>
              Looks up a localized string similar to BaseStream cannot be set twice..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.MultipleErrorExceptionMessage">
            <summary>
              Looks up a localized string similar to Multiple errors occurred..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.NegativeItemCountError">
            <summary>
              Looks up a localized string similar to The item count should be greater or equal to 0..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.PropertyNotFoundError">
            <summary>
              Looks up a localized string similar to Property cannot be found..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ReportOneOrMoreErrorsOccurred">
            <summary>
              Looks up a localized string similar to Report {0}, One or more errors occurred.
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOCannotCreateFileMappingView">
            <summary>
              Looks up a localized string similar to Unable to create a view on the file mapping..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOCannotModifyUrlShortcut">
            <summary>
              Looks up a localized string similar to Unable to modify Url shortcut file..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOCannotOpenFileMapping">
            <summary>
              Looks up a localized string similar to Unable to open the file mapping..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIODefaultAndCurrentValue">
            <summary>
              Looks up a localized string similar to Cannot search for default value and current value at the same time..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOFileAlreadyOpened">
            <summary>
              Looks up a localized string similar to The file has already been created or opened..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOFileDoesNotExist">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOFileMappingInUse">
            <summary>
              Looks up a localized string similar to The file mapping is currently used. Close all views before calling this method..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOFileMappingOutOfBoundsAccess">
            <summary>
              Looks up a localized string similar to Unable to access data out of the file mapping view bounds..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOFileMappingSizeNotAvailable">
            <summary>
              Looks up a localized string similar to The size of the file mapping cannot be retrieved..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOInvalidDriveName">
            <summary>
              Looks up a localized string similar to Drive name is not valid..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOInvalidFileName">
            <summary>
              Looks up a localized string similar to Invalid file name..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOOutOfRangeOffset">
            <summary>
              Looks up a localized string similar to The offset is out of range..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOOutOfRangeSize">
            <summary>
              Looks up a localized string similar to The data size is out of range..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOReadOnlyStream">
            <summary>
              Looks up a localized string similar to This stream is read-only..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOShortcutFileNotFound">
            <summary>
              Looks up a localized string similar to Shortcut file not found..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ResIOWriteOnlyStream">
            <summary>
              Looks up a localized string similar to This stream is write-only..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.RollbackError">
            <summary>
              Looks up a localized string similar to Cannot call SqlDataAccessBase.Rollback when no transaction is pending..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.SeveralItemEnumerationError">
            <summary>
              Looks up a localized string similar to The collection should not contain more than one item..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.SpecifiedKeyIsNotDefinedInTheCollection">
            <summary>
              Looks up a localized string similar to The specified key is not defined in the collection..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.StoredProcedureCouldNotBeLoaded">
            <summary>
              Looks up a localized string similar to The stored procedure resource &apos;{0}&apos; could not be loaded. Check that the name is correct and the file is defined as Embedded Resource..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.UnnamedReturnValueError">
            <summary>
              Looks up a localized string similar to Unnamed return value should be an integer. Change the type of the return value or use a named parameter..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.UnspecifiedMailTemplateNameError">
            <summary>
              Looks up a localized string similar to The template name is not specified..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.UnsupportedIsoCodeError">
            <summary>
              Looks up a localized string similar to The money iso code &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Siriona.Library.Messages.ValueTooHigh">
            <summary>
              Looks up a localized string similar to The value must be lower than 0x10..
            </summary>
        </member>
        <member name="T:Siriona.Library.Money">
            <summary>
            Represents a money, including an amount and a currency.
            </summary>
        </member>
        <member name="F:Siriona.Library.Money.Empty">
            <summary>
            Represents an empty money entry.
            </summary>
        </member>
        <member name="M:Siriona.Library.Money.#ctor(System.Decimal,Siriona.Library.Globalization.CurrencyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Money"/> class.
            </summary>
            <param name="amount">The amount.</param>
            <param name="currencyInfo">The currency info.</param>
        </member>
        <member name="M:Siriona.Library.Money.#ctor(System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Money"/> class.
            </summary>
            <param name="amount">The amount.</param>
            <param name="isoCode">The iso code.</param>
        </member>
        <member name="M:Siriona.Library.Money.op_Equality(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.op_Inequality(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.op_LessThan(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.op_GreaterThan(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.op_LessThanOrEqual(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.op_GreaterThanOrEqual(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.op_Addition(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.Add(Siriona.Library.Money,Siriona.Library.Money)">
            <summary>
            Adds the specified money values.
            </summary>
            <param name="firstMoney">The first money.</param>
            <param name="secondMoney">The second money.</param>
            <returns>The sum of the money values.</returns>
            <exception cref="T:System.InvalidOperationException">If the two money don't have the same currency.</exception>
        </member>
        <member name="M:Siriona.Library.Money.op_Subtraction(Siriona.Library.Money,Siriona.Library.Money)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.Subtract(Siriona.Library.Money,Siriona.Library.Money)">
            <summary>
            Subtracts the specified money values.
            </summary>
            <param name="firstMoney">The first money.</param>
            <param name="secondMoney">The second money.</param>
            <returns>The difference of the money values.</returns>
            <exception cref="T:System.InvalidOperationException">If the two money don't have the same currency.</exception>
        </member>
        <member name="M:Siriona.Library.Money.op_Multiply(Siriona.Library.Money,System.Decimal)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.Multiply(Siriona.Library.Money,System.Decimal)">
            <summary>
            Multiplies the specified money value by a factor.
            </summary>
            <param name="money">The money.</param>
            <param name="value">The value.</param>
            <returns>The multiplication result.</returns>
        </member>
        <member name="M:Siriona.Library.Money.op_Division(Siriona.Library.Money,System.Decimal)">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Money.Divide(Siriona.Library.Money,System.Decimal)">
            <summary>
            Divides the specified money value by a factor.
            </summary>
            <param name="money">The money.</param>
            <param name="value">The value.</param>
            <returns>The division result.</returns>
        </member>
        <member name="M:Siriona.Library.Money.Round(Siriona.Library.Money)">
             <summary>
             Rounds the specified value.
             </summary>
             <param name="value">The value.</param>
             <returns>The rounded money amount.</returns>
             <remarks>
             <para>
             The method uses the currency info to get the decimal digit count.
             </para>
             <para>
             The method uses an AwayFromZero algorithm. This means that a mid value (ex 0.005 with a rouding to two digits)
             is always resolved up when positive, and down when negative. This way [x;x+0.5[ are rounded to x, and [x+0.5;x+1[
             are rounded to x+1 when x >= 0. This gives a balanced partioning of the [x;x+1[ segment.
             </para>
             </remarks>
             <example>
             The following example shows the rounded values with 2 decimal digits :
             <code>
            		0.031  -> 0.03
            		0.0345 -> 0.03
            		0.035  -> 0.04
            		0.0399 -> 0.04
            
            		-0.031  -> -0.03
            		-0.0345 -> -0.03
            		-0.035  -> -0.04
            		-0.0399 -> -0.04
             </code>
             </example>
        </member>
        <member name="M:Siriona.Library.Money.Round(Siriona.Library.Money,System.Int32)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="decimalDigits">The decimal digits.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Money.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
            <remarks>
            <para>The format provider is not used since the currency info is given by the internal <see cref="T:System.Globalization.CultureInfo"/> object.</para>
            <para>The format can be "g" for default format, or "i" to force the use of iso currency symbols.</para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.Money.GetMoneyFormat(System.Globalization.NumberFormatInfo)">
            <summary>
            Gets the money format depending on amount sign.
            </summary>
            <param name="numberFormatInfo">The number format info.</param>
            <returns>A money format string</returns>
        </member>
        <member name="M:Siriona.Library.Money.WriteAmount(System.Text.StringBuilder,System.Globalization.NumberFormatInfo,System.Int32)">
            <summary>
            Writes the amount to string builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="numberFormatInfo">The number format info.</param>
            <param name="decimalDigits">The decimal digits.</param>
        </member>
        <member name="M:Siriona.Library.Money.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the specified string representation of a money value to its <see cref="T:Siriona.Library.Money"/> equivalent
            using a culture-specific format information.
            </summary>
            <param name="text">The text.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Siriona.Library.Money.Parse(System.String,System.IFormatProvider,Siriona.Library.MoneyStyles)">
            <summary>
            Converts the specified string representation of a money value to its <see cref="T:Siriona.Library.Money"/> equivalent
            using a culture-specific format information.
            </summary>
            <param name="text">The text.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="styles">The styles.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Siriona.Library.Money.TryParse(System.String,System.IFormatProvider,Siriona.Library.Money@)">
            <summary>
            Converts the specified string representation of a money value to its <see cref="T:Siriona.Library.Money"/> equivalent
            using a culture-specific format information.
            </summary>
            <param name="text">The text.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="money">The money.</param>
            <returns>
            	<c>true</c> if the text could be parsed, ortherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.TryParse(System.String,System.IFormatProvider,Siriona.Library.MoneyStyles,Siriona.Library.Money@)">
            <summary>
            Converts the specified string representation of a money value to its <see cref="T:Siriona.Library.Money"/> equivalent
            using a culture-specific format information.
            </summary>
            <param name="text">The text.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="styles">The styles.</param>
            <param name="money">The money.</param>
            <returns>
            	<c>true</c> if the text could be parsed, ortherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.Equals(Siriona.Library.Money)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.RoundAmount(System.Decimal,System.Int32)">
            <summary>
            Rounds an amount.
            </summary>
            <param name="value">The value.</param>
            <param name="decimals">The decimals.</param>
            <returns>The rounded amount.</returns>
        </member>
        <member name="M:Siriona.Library.Money.AssertSameCurrency(Siriona.Library.Money,Siriona.Library.Money)">
            <summary>
            Asserts that money objects have the same currency.
            </summary>
            <param name="firstMoney">The first money object.</param>
            <param name="secondMoney">The second money object.</param>
        </member>
        <member name="M:Siriona.Library.Money.AssertIsMoney(System.Object,System.String)">
            <summary>
            Asserts that money objects have the same currency.
            </summary>
            <param name="value">The value.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:Siriona.Library.Money.CompareTo(Siriona.Library.Money)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:Siriona.Library.Money.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="M:Siriona.Library.Money.Add(System.Nullable{Siriona.Library.Money},System.Nullable{Siriona.Library.Money})">
            <summary>
            Adds the specified money values.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Money.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Siriona.Library.Money.Amount">
            <summary>
            Gets the amount.
            </summary>
            <value>The amount.</value>
        </member>
        <member name="P:Siriona.Library.Money.CurrencyEnglishName">
            <summary>
            Gets the english name of the currency.
            </summary>
            <value>The english name of the currency.</value>
        </member>
        <member name="P:Siriona.Library.Money.IsoCurrencySymbol">
            <summary>
            Gets the ISO currency symbol.
            </summary>
            <value>The ISO currency symbol.</value>
        </member>
        <member name="P:Siriona.Library.Money.DecimalDigitCount">
            <summary>
            Gets the number of decimal digits used by specified money.
            </summary>
            <value>The decimal digit count.</value>
        </member>
        <member name="P:Siriona.Library.Money.DecimalDigits">
            <summary>
            Gets the number of decimal digits used by specified money.
            </summary>
            <value>The decimal digits count.</value>
        </member>
        <member name="P:Siriona.Library.Money.Currency">
            <summary>
            Gets the currency info.
            </summary>
            <value>The currency info.</value>
        </member>
        <member name="P:Siriona.Library.Money.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.MoneyAmountTokenizer">
            <summary>
            Represents a text tokenizer helper for money amount parsing.
            </summary>
            <remarks>
            The caller should use the <see cref="M:Siriona.Library.MoneyAmountTokenizer.Read"/> method.
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneyAmountTokenizer.#ctor(System.String,System.Int32,System.Globalization.NumberFormatInfo,Siriona.Library.MoneyStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.MoneyAmountTokenizer"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position.</param>
            <param name="numberFormatInfo">The number format info.</param>
            <param name="styles">The styles.</param>
        </member>
        <member name="M:Siriona.Library.MoneyAmountTokenizer.Read">
            <summary>
            Reads the text string.
            </summary>
        </member>
        <member name="M:Siriona.Library.MoneyAmountTokenizer.ReadChar">
            <summary>
            Reads a character.
            </summary>
            <returns><c>true</c> if the amount parsing should continue, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyAmountTokenizer.ReadDecimalPart">
            <summary>
            Reads a decimal part character.
            </summary>
            <returns><c>true</c> if the amount parsing should continue, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyAmountTokenizer.ReadIntegerPart">
            <summary>
            Reads the integer part.
            </summary>
            <returns><c>true</c> if the amount parsing should continue, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Siriona.Library.MoneyAmountTokenizer.CurrentPosition">
            <summary>
            Gets the current parsing position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:Siriona.Library.MoneyAmountTokenizer.Value">
            <summary>
            Gets the amount value.
            </summary>
            <value>The amount value.</value>
        </member>
        <member name="P:Siriona.Library.MoneyAmountTokenizer.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Siriona.Library.MoneyAmountTokenizer.DecimalDigitCount">
            <summary>
            Gets the parsed decimal digit count.
            </summary>
            <value>The decimal digit count.</value>
        </member>
        <member name="P:Siriona.Library.MoneyAmountTokenizer.IsGroupPatternMatch">
            <summary>
            Gets a value indicating whether the amount digit groups matched the culture grouping pattern.
            </summary>
            <value>
            	<c>true</c> if the amount digit groups matched the culture grouping pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.MoneyGroupSizeMatcher">
            <summary>
            Provides helper methods to match digit grouping patterns during money parsing.
            </summary>
            <remarks>
            <para>
            The caller can register the grouping pattern by calling <see cref="M:Siriona.Library.MoneyGroupSizeMatcher.AddDigit"/>
            when it encounters a digit in the integer part, and <see cref="M:Siriona.Library.MoneyGroupSizeMatcher.CloseGroup"/>
            when finding a group separator.
            </para>
            <para>
            When done, call the <see cref="M:Siriona.Library.MoneyGroupSizeMatcher.CheckPattern(System.Int32[])"/> method to verify the the pattern
            matches the specified one.
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneyGroupSizeMatcher.AddDigit">
            <summary>
            Adds a digit to the current group.
            </summary>
        </member>
        <member name="M:Siriona.Library.MoneyGroupSizeMatcher.CloseGroup">
            <summary>
            Closes the current group and starts a new one.
            </summary>
        </member>
        <member name="M:Siriona.Library.MoneyGroupSizeMatcher.EndIntegerPart">
            <summary>
            Called at the end of the integer part to check no 0 size group were begun.
            </summary>
            <returns><c>true</c> if no invalid 0-size group were begun; otherwize <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyGroupSizeMatcher.CheckPattern(System.Int32[])">
            <summary>
            Checks the pattern.
            </summary>
            <param name="groupSizes">The group sizes as defined in the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes"/> documentation.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.MoneyGroupSizeMatcher.CheckLoosePattern">
            <summary>
            Check the validity of loose pattern (at least that there is no 0 size groups)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.MoneyIsoSymbolMatcher">
            <summary>
            Provides helper methods to parse money iso symbols.
            </summary>
            <remarks>
            <para>
            The caller can check if the parsed string matches an iso symbol at specified location
            by calling the <see cref="M:Siriona.Library.MoneyIsoSymbolMatcher.Match(System.String,System.Int32)"/> method.
            </para>
            <para>
            If the check succeeded, the parser can get the ISO symbol by calling the <see cref="P:Siriona.Library.MoneyIsoSymbolMatcher.IsoSymbol"/> property
            and the number of matched characters by calling the 
            <see cref="P:Siriona.Library.MoneyIsoSymbolMatcher.Length"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneyIsoSymbolMatcher.Match(System.String,System.Int32)">
            <summary>
            Matches the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="startPosition">The start position for the match.</param>
            <returns><c>true</c> if the text matches a 3 letter money ISO code, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Siriona.Library.MoneyIsoSymbolMatcher.Length">
            <summary>
            Gets the length of the match.
            </summary>
            <value>The length of the match.</value>
        </member>
        <member name="P:Siriona.Library.MoneyIsoSymbolMatcher.IsoSymbol">
            <summary>
            Gets the matched ISO symbol.
            </summary>
            <value>The matched ISO symbol.</value>
        </member>
        <member name="T:Siriona.Library.MoneyParser">
            <summary>
            Performs high level money parsing.
            </summary>
        </member>
        <member name="M:Siriona.Library.MoneyParser.#ctor(System.String,System.Globalization.NumberFormatInfo,Siriona.Library.MoneyStyles,System.Globalization.RegionInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.MoneyParser"/> class.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="numberFormatInfo">The number format info.</param>
            <param name="styles">The styles.</param>
            <param name="regionInfo">The region info.</param>
        </member>
        <member name="M:Siriona.Library.MoneyParser.Read">
            <summary>
            Read next token.
            </summary>
            <returns><c>true</c> if the parsing should continue; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyParser.TryGetAmountValue(System.Decimal@)">
            <summary>
            Tries to get the amount value.
            </summary>
            <param name="amountValue">The amount value.</param>
            <returns><c>true</c> if the amount value could be read; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Siriona.Library.MoneyParser.AmountTokenizer">
            <summary>
            Gets the amount info.
            </summary>
            <value>The amount tokenizer.</value>
        </member>
        <member name="P:Siriona.Library.MoneyParser.CurrencyInfo">
            <summary>
            Gets the currency info.
            </summary>
            <value>The currency info.</value>
        </member>
        <member name="P:Siriona.Library.MoneyParser.HasReachedEnd">
            <summary>
            Gets a value indicating whether the parser has reached the end of the text.
            </summary>
            <value>
            	<c>true</c> if the parser has reached the end of the text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyParser.IsValid">
            <summary>
            Gets a value indicating whether the text is a valid money format.
            </summary>
            <value><c>true</c> if the text is a valid money format; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.MoneyParser.IsValidDecimalDigitCount">
            <summary>
            Gets a value indicating whether this instance has a valid decimal digit count.
            </summary>
            <value>
            	<c>true</c> if this instance is valid decimal digit count; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.MoneyPatternMatcher">
            <summary>
            Provides helper methods to match money patterns.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Siriona.Library.Money.TryParse(System.String,System.IFormatProvider,Siriona.Library.MoneyStyles,Siriona.Library.Money@)"/> method uses this class to validate
            both positive and negative patterns.
            </para>
            <para>
            Those patterns are defined in the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/>
            and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/> documentation and look like
            '$ n', '$n', 'n $', 'n$', '(n$)', '-n $' where '$' is the currency symbol,
            'n' is the amount, ' ' a white space, '-' the negative sign and '(' and ')'
            the left and right parenthesis.
            </para>
            <para>
            The caller initializes an instance with patterns and styles and feed the
            matcher with the 'n', '$', ' ', '-', '(' and ')' characters with
            the <see cref="M:Siriona.Library.MoneyPatternMatcher.AddItem(System.Char)"/> methods when it encounters
            this elements during the parsing. 
            </para>
            <para>
            When adding '-', '(' and ')', the caller should call <see cref="P:Siriona.Library.MoneyPatternMatcher.CanAddNegativeSign"/>,
            <see cref="P:Siriona.Library.MoneyPatternMatcher.CanAddLeftParenthesis"/> and <see cref="P:Siriona.Library.MoneyPatternMatcher.CanAddRightParenthesis"/> to check
            that the pattern is still valid, otherwise, the parsing should fail.
            </para>
            <para>
            When done, the caller should call <see cref="P:Siriona.Library.MoneyPatternMatcher.IsPositive"/> and <see cref="P:Siriona.Library.MoneyPatternMatcher.IsNegative"/>
            to check if patterns specified to the contructor are matched. If both fail, no exact
            matching could be done. If <see cref="P:Siriona.Library.MoneyPatternMatcher.IsValidLoosePattern"/> is <c>true</c>, the caller
            can consider that a loose parsing has been done and is valid, otherwhise, the pattern
            is not valid. The caller can the call <see cref="P:Siriona.Library.MoneyPatternMatcher.IsNegativeLoosePattern"/> the check
            wether the loose pattern is a negative pattern.
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneyPatternMatcher.#ctor(System.String,System.String,Siriona.Library.MoneyStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.MoneyPatternMatcher"/> class.
            </summary>
            <param name="positivePattern">The positive pattern.</param>
            <param name="negativePattern">The negative pattern.</param>
            <param name="styles">The money styles.</param>
        </member>
        <member name="M:Siriona.Library.MoneyPatternMatcher.AddItem(System.Char)">
            <summary>
            Adds the item to the pattern matcher.
            </summary>
            <param name="character">The character. Should be ' ', '(', ')', '-', '$' or 'n'.</param>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.CanAddNegativeSign">
            <summary>
            Gets a value indicating whether adding a negative sign keeps the pattern valid.
            </summary>
            <value>
            	<c>true</c> if adding a negative sign keeps the pattern valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.CanAddLeftParenthesis">
            <summary>
            Gets a value indicating whether adding a left parenthesis keeps the pattern valid.
            </summary>
            <value>
            	<c>true</c> if adding a left parenthesis keeps the pattern valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.CanAddRightParenthesis">
            <summary>
            Gets a value indicating whether adding a right parenthesis keeps the pattern valid.
            </summary>
            <value>
            	<c>true</c> if adding a right parenthesis keeps the pattern valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.IsPositive">
            <summary>
            Gets a value indicating whether the parsed pattern matches the positive pattern.
            </summary>
            <value>
            	<c>true</c> if the parsed pattern matches the positive pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.IsNegative">
            <summary>
            Gets a value indicating whether the parsed pattern matches the negative pattern.
            </summary>
            <value>
            	<c>true</c> if the parsed pattern matches the negative pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.IsValidLoosePattern">
            <summary>
            Gets a value indicating whether the parsed pattern is a valid loose pattern.
            </summary>
            <value>
            	<c>true</c> if the parsed pattern is a valid loose pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.MoneyPatternMatcher.IsNegativeLoosePattern">
            <summary>
            Gets a value indicating whether the lose pattern is a negative pattern.
            </summary>
            <value>
            	<c>true</c> if the lose pattern is a negative pattern; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.MoneyStrictPatternMatcher">
            <summary>
            Provides helper methods to match a money patterns.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Siriona.Library.MoneyPatternMatcher"/> uses this class to validate culture patterns.
            </para>
            <para>
            Those patterns are defined in the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/>
            and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/> documentation and look like
            '$ n', '$n', 'n $', 'n$', '(n$)', '-n $' where '$' is the currency symbol,
            'n' is the amount, ' ' a white space, '-' the negative sign and '(' and ')'
            the left and right parenthesis.
            </para>
            <para>
            The caller initializes an instance with a pattern and styles and feeds the
            matcher with the 'n', '$', ' ', '-', '(' and ')' characters with
            the <see cref="M:Siriona.Library.MoneyStrictPatternMatcher.AddItem(System.Char)"/> methods when it encounters
            this elements during the parsing. 
            </para>
            <para>
            When done, the caller uses <see cref="P:Siriona.Library.MoneyStrictPatternMatcher.IsMatch"/> to check wether the 
            the parsed pattern matches the provided pattern.
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneyStrictPatternMatcher.#ctor(System.String,Siriona.Library.MoneyStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.MoneyStrictPatternMatcher"/> class.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="styles">The styles.</param>
        </member>
        <member name="M:Siriona.Library.MoneyStrictPatternMatcher.AddItem(System.Char)">
            <summary>
            Adds the item to the pattern.
            </summary>
            <param name="character">The character. Should be ' ', '(', ')', '-', '$' or 'n'.</param>
        </member>
        <member name="P:Siriona.Library.MoneyStrictPatternMatcher.IsMatch">
            <summary>
            Gets a value indicating whether the parsed pattern matched the culture pattern.
            </summary>
            <value><c>true</c> if the parsed pattern matched the culture pattern; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.MoneyStrictPatternMatcher.AllowLeadingWhite">
            <summary>
            Gets a value indicating whether style allows leading white.
            </summary>
            <value><c>true</c> if style allows leading white; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.MoneyStrictPatternMatcher.AllowTrailingWhite">
            <summary>
            Gets a value indicating whether style allows trailing white.
            </summary>
            <value><c>true</c> if style allows trailing white; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.MoneyStrictPatternMatcher.AllowInnerWhite">
            <summary>
            Gets a value indicating whether style allows inner white.
            </summary>
            <value><c>true</c> if style allows inner white; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.MoneyStrictPatternMatcher.AllowLooseFormat">
            <summary>
            Gets a value indicating whether style allows loose format.
            </summary>
            <value><c>true</c> if [allow loose format]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.MoneyStylesExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.MoneyStyles"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.MoneyStylesExtensionMethods.Count(Siriona.Library.MoneyStyles)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyStylesExtensionMethods.Contains(Siriona.Library.MoneyStyles,Siriona.Library.MoneyStyles[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.MoneyStylesExtensionMethods.AddIf(Siriona.Library.MoneyStyles,System.Boolean,Siriona.Library.MoneyStyles)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyStylesExtensionMethods.RemoveIf(Siriona.Library.MoneyStyles,System.Boolean,Siriona.Library.MoneyStyles)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyStylesExtensionMethods.Add(Siriona.Library.MoneyStyles,Siriona.Library.MoneyStyles)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyStylesExtensionMethods.Remove(Siriona.Library.MoneyStyles,Siriona.Library.MoneyStyles)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:Siriona.Library.MoneyStyles">
            <summary>
            Defines the formatting options that customize how the <see cref="M:Siriona.Library.Money.Parse(System.String,System.IFormatProvider,Siriona.Library.MoneyStyles)"/> and <see cref="M:Siriona.Library.Money.TryParse(System.String,System.IFormatProvider,Siriona.Library.MoneyStyles,Siriona.Library.Money@)"/>.
            methods parse a string.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.None">
            <summary>
             Indicates the default formatting options should be used.
             The string must exactly follow the currency rules defined by the culture in use.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowLeadingWhite">
            <summary>
            Indicates that the string can contain leading whitespaces.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowTrailingWhite">
            <summary>
            Indicates that the string can contain trailing whitespaces.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowInnerWhite">
            <summary>
            Indicates that whitespace count is not revelent inside the string. The pattern order is preserved.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowDecimalsMismatch">
            <summary>
            Indicates that the string can contain a different number of decimal digits that defined in the culture in use.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowLooseGrouping">
            <summary>
            Indicates that the string can contain a grouping pattern that differ from the one defined in the culture in use.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowLooseFormat">
            <summary>
            Indicates that the order of elements in the string can differ from the one defined in the culture in use.
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowAnyWhiteSpace">
            <summary>
            Indicates that whitespace can use any white space caracter (eg: you can use a simple white space instead of a non breakable space).
            </summary>
        </member>
        <member name="F:Siriona.Library.MoneyStyles.AllowWhiteSpaces">
            <summary>
            Indicates that whitespace count is not revelent. It equivalent to <c>AllowLeadingWhite | AllowTrailingWhite | AllowInnerWhite | AllowAnyWhiteSpace</c>.
            </summary>
        </member>
        <member name="T:Siriona.Library.MoneySymbolMatcher">
            <summary>
            Provides helper methods to parse money symbols.
            </summary>
            <remarks>
            <para>
            The caller builds an instance of the struct with the symbol and styles.
            The symbol is usually <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator"/>, or
            any other localized symbol.
            </para>
            <para>
            The caller can then check if the parsed string matches the symbol at specified location
            by calling the <see cref="M:Siriona.Library.MoneySymbolMatcher.Match(System.String,System.Int32)"/> method.
            </para>
            <para>
            The caller can check wether the symbol is any space when using the <see cref="F:Siriona.Library.MoneyStyles.AllowAnyWhiteSpace"/>
            style by calling the <see cref="P:Siriona.Library.MoneySymbolMatcher.IsSpace"/> property.
            </para>
            <para>
            If the check succeeded, the parser can get the number of matched characteres by calling the 
            <see cref="P:Siriona.Library.MoneySymbolMatcher.Length"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneySymbolMatcher.#ctor(System.String,Siriona.Library.MoneyStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.MoneySymbolMatcher"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="styles">The styles.</param>
        </member>
        <member name="M:Siriona.Library.MoneySymbolMatcher.Match(System.String,System.Int32)">
            <summary>
            Matches the specified text.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The position.</param>
            <returns><c>true</c> if the text matches the symbol.</returns>
        </member>
        <member name="P:Siriona.Library.MoneySymbolMatcher.IsSpace">
            <summary>
            Gets a value indicating whether the last match is a white space character.
            </summary>
            <value><c>true</c> if last match is any white space character; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.MoneySymbolMatcher.Length">
            <summary>
            Gets the length of the match.
            </summary>
            <value>The length of the match.</value>
        </member>
        <member name="T:Siriona.Library.MoneyTokenizer">
            <summary>
            Represents a text tokenizer for money parsing.
            </summary>
            <remarks>
            The caller should use the <see cref="M:Siriona.Library.MoneyTokenizer.Read"/> method to
            find tokens in the string, then call the properties
            to check witch kind of token was found.
            Then the token value can be accessed through specific
            properties.
            </remarks>
        </member>
        <member name="M:Siriona.Library.MoneyTokenizer.#ctor(System.String,Siriona.Library.MoneyStyles,System.Globalization.NumberFormatInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.MoneyTokenizer"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="styles">The styles.</param>
            <param name="numberFormatInfo">The number format info.</param>
        </member>
        <member name="M:Siriona.Library.MoneyTokenizer.Read">
            <summary>
            Reads the next token and return <c>true</c> if a token could be read.
            </summary>
            <returns><c>true</c> if a token was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.MoneyTokenizer.ReadWhiteSpaces">
            <summary>
            Reads the consecutive white spaces.
            </summary>
            <returns>The white space <see cref="P:Siriona.Library.MoneyTokenizer.TokenType"/>.</returns>
        </member>
        <member name="P:Siriona.Library.MoneyTokenizer.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:Siriona.Library.MoneyTokenizer.AmountInfo">
            <summary>
            Gets the amount info.
            </summary>
            <value>The amount info.</value>
            <remarks>
            Call this method only when the current token is an amount token.
            </remarks>
        </member>
        <member name="P:Siriona.Library.MoneyTokenizer.CurrencyIsoCode">
            <summary>
            Gets the currency iso code.
            </summary>
            <value>The currency iso code.</value>
            <remarks>
            Call this method only when the current token is an iso currency code.
            </remarks>
        </member>
        <member name="P:Siriona.Library.MoneyTokenizer.HasReachedEnd">
            <summary>
            Gets a value indicating whether the tokenizer has reached end of text.
            </summary>
            <value>
            	<c>true</c> if the tokenizer has reached end of text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Net.EmailUtility">
            <summary>
            Provides email parsing utilities.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.EmailUtility.IsEmailValid(System.String)">
            <summary>
            Validates an e-mail address.
            </summary>
            <param name="emailAddress">The e-mail address to validate.</param>
            <returns><c>true</c> if the e-mail address is valid.</returns>
        </member>
        <member name="M:Siriona.Library.Net.EmailUtility.FormatEmailAddress(System.String,System.String)">
            <summary>
            Formats an e-mail address using the format "<c>displayName</c> &lt;<c>emailAddress</c>&gt;".
            </summary>
            <param name="displayName">The display name of the recipient.</param>
            <param name="emailAddress">The e-mail address of the recipient.</param>
            <returns>The formatted e-mail address.</returns>
        </member>
        <member name="M:Siriona.Library.Net.EmailUtility.GetEmailAddress(System.String)">
            <summary>
            Retrieves the e-mail address contained in a RFC2822 address.
            </summary>
            <param name="emailAddress">The RFC2822 string to parse.</param>
            <returns>The e-mail address contained in the input string, if available, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Net.EmailUtility.GetEmailDisplayName(System.String)">
            <summary>
            Retrieves the display name contained in a RFC2822 address.
            </summary>
            <param name="emailAddress">The RFC2822 string to parse.</param>
            <returns>The display name contained in the input string, if available, otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Siriona.Library.Net.LocalizedMailTemplate">
            <summary>
            Represents a localized mail template.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.LocalizedMailTemplate.#ctor(Siriona.Library.Net.MailTemplate,System.Globalization.CultureInfo,System.String,System.Text.Encoding,System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.LocalizedMailTemplate"/> class.
            </summary>
            <param name="mailTemplate">The mail template.</param>
            <param name="culture">The culture info.</param>
            <param name="subjectText">The subject.</param>
            <param name="subjectEncoding">The subject encoding.</param>
            <param name="plainBodyText">The plain body.</param>
            <param name="htmlBodyText">The HTML body.</param>
            <param name="bodyEncoding">The body encoding.</param>
        </member>
        <member name="M:Siriona.Library.Net.LocalizedMailTemplate.CreateMailMessage(System.Collections.Specialized.StringDictionary)">
            <summary>
            Creates the mail message using specified replacements.
            </summary>
            <param name="replacements">The replacements.</param>
            <returns>A <see cref="T:System.Net.Mail.MailMessage"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Net.LocalizedMailTemplate.HtmlEncode(System.String)">
            <summary>
            Encodes the specified value into HTML.
            </summary>
            <param name="text">The input string value.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="P:Siriona.Library.Net.LocalizedMailTemplate.Culture">
            <summary>
            Gets the mail template culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="T:Siriona.Library.Net.MailBase">
            <summary>
            Represents the base class for a templated mail.
            </summary>
            <example>
            To implement a templated email, derive from <see cref="T:Siriona.Library.Net.MailBase"/>
            and expose properties that will add entries the <see cref="P:Siriona.Library.Net.MailBase.Replacements"/>
            dictionary.
            <code>
            public class SampleMail : MailBase
            {
            
            	public string Text
            	{
            		get { return Replacements["text"]; }
            		set { Replacements["text"] = value; }
            	}
            }
            </code>
            You can then use the mail :
            <code>
            	SampleMail mail = new SampleMail();
            	// select the mail template culture
            	mail.Culture = new CultureInfo("fr-FR");
            
            	// set the replacement for $text$
            	mail.Text = "Texte de remplacement";
            
            	// set mail addresses
            	mail.From = fromAddress;
            	mail.To.Add(toAddress);
            
            	// send the mail using the default SMTP client
            	mail.Send();
            </code>
            </example>
        </member>
        <member name="M:Siriona.Library.Net.MailBase.Send(System.Net.Mail.SmtpClient)">
            <summary>
            Sends the email using specified SMTP smtpClient.
            </summary>
            <param name="smtpClient">The smtpClient.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailBase.Send">
            <summary>
            Sends the email using default SMTP client.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailBase.CreateMailMessage">
            <summary>
            Creates the mail message from template.
            </summary>
            <returns>The mail message.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailBase.GetMailTemplate">
            <summary>
            Gets the mail template associated to derived type.
            </summary>
            <returns>The mail template.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailBase.PrepareMailMessage(System.Net.Mail.MailMessage)">
            <summary>
            Prepares the mail message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.Replacements">
            <summary>
            Gets the replacements dictionary.
            </summary>
            <value>The replacements dictionary.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.Culture">
            <summary>
            Gets or sets the mail culture.
            </summary>
            <value>The mail culture.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.From">
            <summary>
            Gets or sets from mail address field.
            </summary>
            <value>From mail address field.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.Bcc">
            <summary>
            Gets the BCC mail address collection.
            </summary>
            <value>The BCC mail address collection.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.CC">
            <summary>
            Gets the CC mail address collection.
            </summary>
            <value>The CC mail address collection.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>The attachments.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.Headers">
            <summary>
            Gets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.ReplyTo">
            <summary>
            Gets or sets the reply to mail address field.
            </summary>
            <value>The reply to mail address field.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.Sender">
            <summary>
            Gets or sets the sender mail address field.
            </summary>
            <value>The sender mail address field.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailBase.To">
            <summary>
            Gets to mail address field.
            </summary>
            <value>To mail address field.</value>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplate">
            <summary>
            Represents a mail template with its localizations.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplate.#ctor(System.String,System.Net.Mail.MailPriority,System.Net.Mail.DeliveryNotificationOptions,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="priority">The priority.</param>
            <param name="deliveryNotificationOptions">The delivery notification options.</param>
            <param name="defaultEncoding">The default encoding.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplate.GetLocalizedTemplate(System.Globalization.CultureInfo)">
            <summary>
            Gets the culture specific template or the invariant culture template if not found.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The localized template for the given culture.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplate.AddLocalizedMailTemplate(Siriona.Library.Net.LocalizedMailTemplate)">
            <summary>
            Adds the template.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplate.Name">
            <summary>
            Gets the template name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplate.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplate.DeliveryNotificationOptions">
            <summary>
            Gets the delivery notification options.
            </summary>
            <value>The delivery notification options.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplate.DefaultEncoding">
            <summary>
            Gets the default encoding.
            </summary>
            <value>The default encoding.</value>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplate.LanguageNode">
            <summary>
            Manages the template fallback for fix language.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplate.LanguageNode.GetRegionSpecificTemplate(System.Globalization.CultureInfo)">
            <summary>
            Gets the region specific template or the language neutral template if not found.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The <see cref="T:Siriona.Library.Net.LocalizedMailTemplate"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplate.LanguageNode.AddTemplate(Siriona.Library.Net.LocalizedMailTemplate)">
            <summary>
            Adds the template.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplateDictionary">
            <summary>
            Represents a collection of <see cref="T:Siriona.Library.Net.MailTemplate"/> objects indexed by name.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.Add(Siriona.Library.Net.MailTemplate)">
            <summary>
            Adds the specified template.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#IDictionary{System#String@Siriona#Library#Net#MailTemplate}#Add(System.String,Siriona.Library.Net.MailTemplate)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#IDictionary{System#String@Siriona#Library#Net#MailTemplate}#Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.TryGetValue(System.String,Siriona.Library.Net.MailTemplate@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the key has been found in the dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Siriona#Library#Net#MailTemplate}}#Add(System.Collections.Generic.KeyValuePair{System.String,Siriona.Library.Net.MailTemplate})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Siriona#Library#Net#MailTemplate}}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Siriona#Library#Net#MailTemplate}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Siriona.Library.Net.MailTemplate})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Siriona#Library#Net#MailTemplate}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Siriona.Library.Net.MailTemplate}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Siriona#Library#Net#MailTemplate}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Siriona.Library.Net.MailTemplate})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@Siriona#Library#Net#MailTemplate}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Siriona.Library.Net.MailTemplate"/> with the specified key.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </value>
            <returns>A <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplateException">
            <summary>
            Represents an exception during MailTemplate loading.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateException"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateException"/> class.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="templateName">Name of the template.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateException"/> class.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="templateName">Name of the template.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateException.FileName">
            <summary>
            Gets the fileName.
            </summary>
            <value>The fileName.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateException.TemplateName">
            <summary>
            Gets the name of the template.
            </summary>
            <value>The name of the template or <c>null</c> if the name was not specified.</value>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplateLoader">
            <summary>
            Provides mail template loading logic.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateLoader"/> class.
            </summary>
            <param name="fileName">The fileName.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.LoadInvariantTemplate">
            <summary>
            Loads a culture invariant template from the xml file.
            </summary>
            <returns>The newly created <see cref="T:Siriona.Library.Net.MailTemplate"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.LoadLocalizedTemplate(Siriona.Library.Net.MailTemplate)">
            <summary>
            Loads the localized template from xml file and adds localization info to the base template.
            </summary>
            <param name="baseTemplate">The base template.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.LoadTemplates">
            <summary>
            Loads the templates from the mail template directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.CreateInvariantTemplate">
            <summary>
            Creates the invariant template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.LoadLocalizedInfo">
            <summary>
            Loads the localized info.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.ExtractTemplateCulture">
            <summary>
            Extracts the template culture from fileName.
            </summary>
            <returns>The culture info</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.GetDefaultEncoding">
            <summary>
            Gets the default encoding from xml.
            </summary>
            <returns>The specified <see cref="T:System.Text.Encoding"/>, or <see cref="P:System.Text.Encoding.UTF8"/>.</returns>
            <exception cref="T:Siriona.Library.Net.MailTemplateException">When the encoding name is not valid.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.GetBodyEncoding">
            <summary>
            Gets the body encoding.
            </summary>
            <returns>The <see cref="T:System.Text.Encoding"/> or <c>null</c>.</returns>
            <exception cref="T:Siriona.Library.Net.MailTemplateException">When the encoding name is not valid.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.GetSubjectEncoding">
            <summary>
            Gets the subject encoding.
            </summary>
            <returns>The <see cref="T:System.Text.Encoding"/> or <c>null</c></returns>
            <exception cref="T:Siriona.Library.Net.MailTemplateException">When the encoding name is not valid.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.GetEncoding(System.String,System.String)">
            <summary>
            Gets the encoding.
            </summary>
            <param name="xpath">The xpath path.</param>
            <param name="errorMessage">The error message.</param>
            <returns>The <see cref="T:System.Text.Encoding"/> object or <c>null</c>.</returns>
            <exception cref="T:Siriona.Library.Net.MailTemplateException">When the encoding name is not valid.</exception>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.GetDeliveryNotificationOptions">
            <summary>
            Gets the delivery notification options from xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.GetPriority">
            <summary>
            Gets the mail priority from xml.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateLoader.IsLocalized">
            <summary>
            Gets a value indicating whether this instance is localized.
            </summary>
            <value>
            	<c>true</c> if this instance is localized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateLoader.Name">
            <summary>
            Gets the template name.
            </summary>
            <value>The template name.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateLoader.FileName">
            <summary>
            Gets the fileName.
            </summary>
            <value>The fileName.</value>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplateLoader.XPathHelper">
            <summary>
            Provides a minimal acces to find values using xpath.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.XPathHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MailTemplateLoader.XPathHelper"/> class.
            </summary>
            <param name="fileName">The fileName.</param>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.XPathHelper.GetValue(System.String)">
            <summary>
            Gets value of the node specified by its xpath.
            </summary>
            <param name="xpath">The xpath.</param>
            <returns>The string value corresponding to the xpath.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateLoader.XPathHelper.GetXml(System.String)">
            <summary>
            Gets the XML content of the node specified by its xpath.
            </summary>
            <param name="xpath">The xpath.</param>
            <returns>The xml string corresponding to the xpath.</returns>
        </member>
        <member name="T:Siriona.Library.Net.MailTemplateManager">
            <summary>
            Manages the mail templates with culture fallbacks.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateManager.IsDefined(System.String)">
            <summary>
            Determines whether the specified name is defined.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the specified name is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateManager.StartWatcher">
            <summary>
            Launches the file system watcher.
            </summary>
            <returns>The <see cref="T:System.IO.FileSystemWatcher"/> object.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MailTemplateManager.Watcher_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handles the OnChanged event of the Watcher control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.FileSystemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateManager.Templates">
            <summary>
            Gets the templates.
            </summary>
            <value>The templates.</value>
        </member>
        <member name="P:Siriona.Library.Net.MailTemplateManager.Watcher">
            <summary>
            Gets the watcher.
            </summary>
            <value>The watcher.</value>
        </member>
        <member name="T:Siriona.Library.Net.MultipartWriter">
            <summary>
            Represents a writer for multipart MIME messages.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MultipartWriter"/> class.
            </summary>
            <param name="stream">The stream the writer serializes data to.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.MultipartWriter"/> class.
            </summary>
            <param name="stream">The stream the writer serializes data to.</param>
            <param name="defaultEncoding">The default encoding used for serializing text data.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">if set to <c>true</c> if disposing.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.IO.Stream)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.IO.Stream,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
            <param name="additionalValues">Additional values to add as a header for the part.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.IO.Stream,System.String)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
            <param name="contentType">The content-type of the part</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.IO.Stream,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
            <param name="additionalValues">Additional values to add as a header for the part.</param>
            <param name="contentType">The content-type of the part</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.GetPartLength(System.String,System.Int64,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets the length of the part.
            </summary>
            <param name="partName">Name of the part.</param>
            <param name="streamLength">Length of the stream.</param>
            <param name="additionalValues">The additional values.</param>
            <param name="contentType">Type of the content.</param>
            <returns>The length of the part.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.String)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.GetPartLength(System.String,System.String)">
            <summary>
            Computes the length of the part.
            </summary>
            <param name="partName">Name of the part.</param>
            <param name="value">The value.</param>
            <returns>The length of the part.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
            <param name="encoding">The encoding of the data in the part.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.GetPartLength(System.String,System.String,System.Text.Encoding)">
            <summary>
            Computes the length of the part.
            </summary>
            <param name="partName">Name of the part.</param>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <returns>The length of the part.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WritePart(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
            <summary>
            Writes a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
            <param name="additionalValues">Additional values to add as a header for the part.</param>
            <param name="encoding">The encoding of the data in the part.</param>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.GetPartLength(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
            <summary>
            Computes the length of a part in a multipart message.
            </summary>
            <param name="partName">The name of the part.</param>
            <param name="value">The value of the part.</param>
            <param name="additionalValues">Additional values to add as a header for the part.</param>
            <param name="encoding">The encoding of the data in the part.</param>
            <returns>The length of the part.</returns>
        </member>
        <member name="M:Siriona.Library.Net.MultipartWriter.WriteTail">
            <summary>
            Writes the end of a multipart message
            </summary>
        </member>
        <member name="P:Siriona.Library.Net.MultipartWriter.Boundary">
            <summary>
            Gets/sets the boundary used to separate the various parts of the message.
            </summary>
            <value>The boundary.</value>
        </member>
        <member name="P:Siriona.Library.Net.MultipartWriter.BaseStream">
            <summary>
            Gets/sets the base writer stream.
            </summary>
            <value>The base stream.</value>
        </member>
        <member name="P:Siriona.Library.Net.MultipartWriter.TailLength">
            <summary>
            Computes the end length.
            </summary>
            <value>The length of the tail.</value>
        </member>
        <member name="T:Siriona.Library.Net.QueryBuilder">
            <summary>
            Provides a manipulator to change or build an url query.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.QueryBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.QueryBuilder"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Siriona.Library.Net.QueryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Net.QueryBuilder.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
            <value>The base URL.</value>
        </member>
        <member name="P:Siriona.Library.Net.QueryBuilder.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="T:Siriona.Library.Net.SoapException">
            <summary>
            Represents a SOAP error.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.SoapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Siriona.Library.Net.SoapMethodArgument">
            <summary>
            Represents an argument of a SOAP method.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.SoapMethodArgument.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapMethodArgument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Siriona.Library.Net.SoapMethodArgument.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapMethodArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.Net.SoapProtocolVersion">
            <summary>
            Represents a version of the SOAP protocol.
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.SoapProtocolVersion.Soap11">
            <summary>
            The version 1.1 of the SOAP protocol.
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.SoapProtocolVersion.Soap12">
            <summary>
            The version 1.2 of the SOAP protocol.
            </summary>
        </member>
        <member name="T:Siriona.Library.Net.SoapRequest">
            <summary>
            Represents a SOAP request.
            </summary>
        </member>
        <member name="F:Siriona.Library.Net.SoapRequest.SoapNamespaceName">
            <summary>
            The SOAP namespace name.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.#ctor(System.Uri,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapRequest"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="serviceNamespaceName">Name of the service namespace.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.#ctor(System.Uri,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapRequest"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="serviceNamespaceName">Name of the service namespace.</param>
            <param name="methodName">Name of the method.</param>
            <param name="replyMethodName">Name of the reply method.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.#ctor(System.Uri,System.String,System.String,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapRequest"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="serviceNamespaceName">Name of the service namespace.</param>
            <param name="methodName">Name of the method.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.#ctor(System.Uri,System.String,System.String,System.String,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Net.SoapRequest"/> class.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="serviceNamespaceName">Name of the service namespace.</param>
            <param name="methodName">Name of the method.</param>
            <param name="replyMethodName">Name of the reply method.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.AddArgument(System.String,System.String)">
            <summary>
            Adds the argument.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.GetContentStream">
            <summary>
            Sets the content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.GetResponse">
            <summary>
            Gets the response.
            </summary>
            <returns>The response to the request.</returns>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.GetResponseStream">
            <summary>
            Gets the response stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to a SOAP Web Service.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>The asynchronous result.</returns>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to a SOAP Web Service.
            </summary>
            <param name="result">The result.</param>
            <returns>The SOAP response.</returns>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.WriteStartSubEnvelope(System.Xml.XmlWriter)">
            <summary>
            When overriden, called between the start of the envelope and the message.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Siriona.Library.Net.SoapRequest.WriteEndSubEnvelope(System.Xml.XmlWriter)">
            <summary>
            When overriden, called between the message and the end of the envelope.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.ServiceNamespaceName">
            <summary>
            Gets or sets the name of the service namespace.
            </summary>
            <value>The name of the service namespace.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.ProtocolVersion">
            <summary>
            Gets or sets the protocol version.
            </summary>
            <value>The protocol version.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.isRawMode">
            <summary>
            Gets a value indicating whether this instance is in raw mode.
            </summary>
            <value>
            	<c>true</c> if this instance is raw mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.IsRawMode">
            <summary>
            Gets a value indicating whether this instance is in raw mode.
            </summary>
            <value>
            	<c>true</c> if this instance is raw mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.isArgumentMode">
            <summary>
            Gets a value indicating whether this instance is in argument mode.
            </summary>
            <value>
            	<c>true</c> if this instance is argument mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Net.SoapRequest.IsArgumentMode">
            <summary>
            Gets a value indicating whether this instance is in argument mode.
            </summary>
            <value>
            	<c>true</c> if this instance is argument mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.Net.SoapResponse">
            <summary>
            Represents a response to a <see cref="T:Siriona.Library.Net.SoapRequest"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Net.SoapResponse.GetOutputValue(System.String)">
            <summary>
            Gets the result.
            </summary>
            <param name="name">The name.</param>
            <returns>the result having the specified name.</returns>
        </member>
        <member name="P:Siriona.Library.Net.SoapResponse.OutputValues">
            <summary>
            Gets the results.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:Siriona.Library.Net.SoapResponse.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Siriona.Library.Triple`3">
            <summary>
            Represents a pair on values.
            </summary>
            <typeparam name="TFirst">The type of the first.</typeparam>
            <typeparam name="TSecond">The type of the second.</typeparam>
            <typeparam name="TThird">The type of the third.</typeparam>
        </member>
        <member name="M:Siriona.Library.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Pair`2"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="third">The third.</param>
        </member>
        <member name="M:Siriona.Library.Triple`3.Equals(Siriona.Library.Triple{`0,`1,`2})">
            <summary>
            Equalses the specified triple.
            </summary>
            <param name="triple">The pair.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Triple`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Triple`3.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Triple`3.First">
            <summary>
            Gets the first element in pair.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Siriona.Library.Triple`3.Second">
            <summary>
            Gets the second element in pair.
            </summary>
            <value>The second.</value>
        </member>
        <member name="P:Siriona.Library.Triple`3.Third">
            <summary>
            Gets the third.
            </summary>
            <value>The third.</value>
        </member>
        <member name="T:Siriona.Library.Pair`2">
            <summary>
            Represents a pair on values.
            </summary>
            <typeparam name="TFirst">The type of the first.</typeparam>
            <typeparam name="TSecond">The type of the second.</typeparam>
        </member>
        <member name="M:Siriona.Library.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Pair`2"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
        </member>
        <member name="M:Siriona.Library.Pair`2.Equals(Siriona.Library.Pair{`0,`1})">
            <summary>
            Equalses the specified pair.
            </summary>
            <param name="pair">The pair.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Pair`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Pair`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Pair`2.First">
            <summary>
            Gets the first element in pair.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Siriona.Library.Pair`2.Second">
            <summary>
            Gets the second element in pair.
            </summary>
            <value>The second.</value>
        </member>
        <member name="T:Siriona.Library.Period">
            <summary>
            Represents a period of time.
            </summary>
        </member>
        <member name="F:Siriona.Library.Period.Empty">
            <summary>
            Represents	an empty period.
            </summary>
        </member>
        <member name="F:Siriona.Library.Period.Always">
            <summary>
            Represents	a period encompassing the whole representable time.
            </summary>
        </member>
        <member name="M:Siriona.Library.Period.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Period"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Siriona.Library.Period.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Period"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="length">The period length.</param>
        </member>
        <member name="M:Siriona.Library.Period.OneDay(System.DateTime)">
            <summary>
            Creates a new one day period starting at specified date.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.From(System.DateTime)">
            <summary>
            Creates a new period starting at specified date to Maximum value.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.FromDayCount(System.DateTime,System.Int32)">
            <summary>
            Creates a new period starting at specified date.
            </summary>
            <param name="date">The date.</param>
            <param name="dayCount">The day count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.Contains(System.DateTime)">
            <summary>
            Determines whether the period contains the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if the current period contains the specified date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the current period contains the specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the current instance contains the specified period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.Siriona#Library#IInterval{System#DateTime}#Contains(Siriona.Library.IInterval{System.DateTime})">
            <summary>
            Determines whether the current period contains the specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the current period contains the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.IsDuring(Siriona.Library.Period)">
            <summary>
            Determines whether the current period occurs during the specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the current period occurs during the specified period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.IntersectWith(Siriona.Library.Period)">
            <summary>
            Indicates whether the current period intersects with specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the current instance intersects with the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.Siriona#Library#IInterval{System#DateTime}#IntersectWith(Siriona.Library.IInterval{System.DateTime})">
            <summary>
            Indicates whether the current interval intersects with specified interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>
            	<c>true</c> if the current instance intersects with the specified interval; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.IsBefore(Siriona.Library.Period)">
            <summary>
            Determines whether the current period ends before the specified period starts.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the current period ends before the specified period starts; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.IsAfter(Siriona.Library.Period)">
            <summary>
            Determines whether the current period starts after the specified period ends.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if the current period starts after the specified period ends; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.Meets(Siriona.Library.Period)">
            <summary>
            Determines whether the interval meets the specified interval on its start.
            </summary>
            <param name="period">The period.</param>
            <returns><c>true</c> if both periods are contiguous.</returns>
        </member>
        <member name="M:Siriona.Library.Period.Overlaps(Siriona.Library.Period)">
            <summary>
            Determines whether the interval overlaps the specified interval on its start.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.Starts(Siriona.Library.Period)">
            <summary>
            Indicates whether the interval start the specified interval.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.Ends(Siriona.Library.Period)">
            <summary>
            Indicates whether the interval ends the specified interval.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.Extend(Siriona.Library.Period)">
            <summary>
            Extends the specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>The extension of the two periods.</returns>
        </member>
        <member name="M:Siriona.Library.Period.Intersect(Siriona.Library.Period)">
            <summary>
            Intersects this instance with specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>The interesction period or Empty.</returns>
        </member>
        <member name="M:Siriona.Library.Period.op_Inequality(Siriona.Library.Period,Siriona.Library.Period)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="period1">The period1.</param>
            <param name="period2">The period2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Period.op_Equality(Siriona.Library.Period,Siriona.Library.Period)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="period1">The period1.</param>
            <param name="period2">The period2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Period.Equals(Siriona.Library.Period)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Period.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.Equals(Siriona.Library.IInterval{System.DateTime})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.op_LessThan(Siriona.Library.Period,Siriona.Library.Period)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Period.op_GreaterThan(Siriona.Library.Period,Siriona.Library.Period)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Period.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Period.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use.
            -or-
            null to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.
            -or-
            null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"/> containing the value of the current instance in the specified format.
            </returns>
            <remarks>
            The format parameter can have the following patterns
            <list type="">
            <listheader><term>Pattern</term><description>Format</description></listheader>
            <item>
            <term>i#</term>
            <description>[start;end]</description>
            </item>
            <item>
            <term>I#</term>
            <description>From start to end</description>
            </item>
            <item>
            <term>e#</term>
            <description>[start;end[ </description>
            </item>
            <item>
            <term>E#</term>
            <description>Between start and end</description>
            </item>
            </list>
            <para>
            The # char represents a format date. When using the 'g' date format, dates representing days
            are formatted without time information.
            </para>
            <para>
            When no prefix (i or e) is specified, the whole format string is used for dates formating and
            a 'e' prefix is assumed.
            <example>"dd MM yyyy" is equivalent to "edd MM yyyy".
            </example>
            </para>
            <para>End inclusion is only applied when both start and end dates represent days.</para>
            </remarks>
        </member>
        <member name="M:Siriona.Library.Period.IsDay(System.DateTime)">
            <summary>
            Determines whether the specified date is day.
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if the specified date is day; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Period.Start">
            <summary>
            Gets the period start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Period.End">
            <summary>
            Gets the period end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Period.IsStartClosed">
            <summary>
            Gets a value indicating whether this instance is start closed.
            </summary>
            <value>
            	<c>true</c> if this instance is start closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Period.IsEndClosed">
            <summary>
            Gets a value indicating whether this instance is end closed.
            </summary>
            <value>
            	<c>true</c> if this instance is end closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Period.Length">
            <summary>
            Gets the period length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Siriona.Library.Period.DayLength">
            <summary>
            Gets the integral day length of the interval.
            </summary>
            <value>The length of the day.</value>
            <remarks>This value is rounded down.</remarks>
        </member>
        <member name="P:Siriona.Library.Period.Siriona#Library#Collections#ObjectModel#ITemporal#Periods">
            <summary>
            Gets the intervals.
            </summary>
            <value>The intervals.</value>
        </member>
        <member name="P:Siriona.Library.Period.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Period.Siriona#Library#Collections#ObjectModel#ITemporal#Period">
            <summary>
            Gets the range in which all intervals are defined.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Siriona.Library.Progress">
            <summary>
            Represents a progression indicator
            </summary>
        </member>
        <member name="M:Siriona.Library.Progress.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Progress"/> class.
            </summary>
            <param name="end">The end.</param>
        </member>
        <member name="M:Siriona.Library.Progress.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Progress"/> class.
            </summary>
            <param name="current">The current position.</param>
            <param name="end">The end position.</param>
        </member>
        <member name="M:Siriona.Library.Progress.op_Implicit(Siriona.Library.Progress)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Progress"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="progress">The progress.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Siriona.Library.Progress.op_Inequality(Siriona.Library.Progress,Siriona.Library.Progress)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="progress1">The first progress.</param>
            <param name="progress2">The second progress.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Progress.op_Equality(Siriona.Library.Progress,Siriona.Library.Progress)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="progress1">The first progress.</param>
            <param name="progress2">The second progress.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Progress.Equals(Siriona.Library.Progress)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.Progress"></see> is equal to the current <see cref="T:Siriona.Library.Progress"></see>.
            </summary>
            <param name="progress">The <see cref="T:Siriona.Library.Progress"></see> to compare with the current <see cref="T:Siriona.Library.Progress"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.Progress"></see> is equal to the current <see cref="T:Siriona.Library.Progress"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Progress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Progress.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Progress.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Progress.ToString(System.String)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Progress.ToString(System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="M:Siriona.Library.Progress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <param name="format">The <see cref="T:System.String"></see> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"></see> implementation.</param>
            <param name="formatProvider">The <see cref="T:System.IFormatProvider"></see> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>
            A <see cref="T:System.String"></see> containing the value of the current instance in the specified format.
            </returns>
        </member>
        <member name="P:Siriona.Library.Progress.Current">
            <summary>
            Gets current position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:Siriona.Library.Progress.Remaining">
            <summary>
            Gets the remaining.
            </summary>
            <value>The remaining.</value>
        </member>
        <member name="P:Siriona.Library.Progress.Value">
            <summary>
            Gets the floating-point value of the progress.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Progress.RemainingValue">
            <summary>
            Gets the floating-point remaining value of the progress.
            </summary>
            <value>The remaining value.</value>
        </member>
        <member name="P:Siriona.Library.Progress.End">
            <summary>
            Gets or sets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="T:Siriona.Library.Rational">
            <summary>
            Represents a signed rational number.
            </summary>
        </member>
        <member name="M:Siriona.Library.Rational.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Rational"/> class.
            </summary>
            <param name="value">The float value.</param>
            <param name="precision">The precision, in digits.</param>
        </member>
        <member name="M:Siriona.Library.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Rational"/> class.
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
        </member>
        <member name="M:Siriona.Library.Rational.Simplify">
            <summary>
            Returns the simplified value of the current rational number.
            </summary>
            <returns>The simplified value of the rational number.</returns>
        </member>
        <member name="M:Siriona.Library.Rational.ToString">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.Rational.ToString(System.String)">
            <summary>
            Returns a string representation of the rational number.
            </summary>
            <param name="format">The format of the string representation.</param>
            <returns>A string value representing the rational number.</returns>
        </member>
        <member name="M:Siriona.Library.Rational.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the rational number.
            </summary>
            <param name="formatProvider">The format provider for the string localization.</param>
            <returns>A string value representing the rational number.</returns>
        </member>
        <member name="M:Siriona.Library.Rational.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the rational number.
            </summary>
            <param name="format">The format of the string representation.</param>
            <param name="formatProvider">The format provider for the string localization.</param>
            <returns>A string value representing the rational number.</returns>
            <remarks>
            The following values are supported : 
            <list type="bullet">
            	<listheader>
            		<term>Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"<c>g</c>", "<c>G</c>"</term>
            		<description>A full (rational and floating-point) representation of the rational number. A precision specifier can be used. This is the default value.</description>
            	</item>
            	<item>
            		<term>"<c>f</c>", "<c>F</c>"</term>
            		<description>A full (floating-point and rational) representation of the rational number. A precision specifier can be used.</description>
            	</item>
            	<item>
            		<term>"<c>v</c>", "<c>V</c>"</term>
            		<description>A floating-point representation of the rational number. A precision specifier can be used.</description>
            	</item>
            	<item>
            		<term>"<c>r</c>", "<c>R</c>"</term>
            		<description>A rational representation of the number.</description>
            	</item>
            	<item>
            		<term>"<c>n</c>", "<c>N</c>"</term>
            		<description>The numerator of the number.</description>
            	</item>
            	<item>
            		<term>"<c>d</c>", "<c>D</c>"</term>
            		<description>The denominator of the number.</description>
            	</item>
            </list>
            
            Upper case values uses the simplified value of the rational number.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Rational.Equals(Siriona.Library.Rational)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The rational.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Rational.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Rational.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Siriona.Library.Rational.op_Equality(Siriona.Library.Rational,Siriona.Library.Rational)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Rational.op_Inequality(Siriona.Library.Rational,Siriona.Library.Rational)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Siriona.Library.Rational.IsDefined">
            <summary>
            Gets a <c>bool</c> value indicating whether the rational represents a defined value.
            </summary>
        </member>
        <member name="P:Siriona.Library.Rational.IsFinite">
            <summary>
            Gets a <c>bool</c> value indicating whether the rational represents a finite value.
            </summary>
        </member>
        <member name="P:Siriona.Library.Rational.Sign">
            <summary>
            Gets the sign of the rational value.
            </summary>
        </member>
        <member name="P:Siriona.Library.Rational.Numerator">
            <summary>
            Gets the numerator of the rational number.
            </summary>
        </member>
        <member name="P:Siriona.Library.Rational.Denominator">
            <summary>
            Gets the denominator of the rational number.
            </summary>
        </member>
        <member name="P:Siriona.Library.Rational.Value">
            <summary>
            Gets the floating-point value of the rational number.
            </summary>
        </member>
        <member name="T:Siriona.Library.Runtime.Remoting.RemoteActivator">
            <summary>
            Provides methods to activate remote objets by interface
            </summary>
        </member>
        <member name="M:Siriona.Library.Runtime.Remoting.RemoteActivator.GetObject``1">
            <summary>
            Gets the object corresponding to specified type using configuration.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Scheduling.BatchCollection">
            <summary>
            Represents a collection of <see cref="T:Siriona.Library.Scheduling.IBatch"/> objects.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.#ctor(Siriona.Library.Scheduling.IBatch[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.BatchCollection"/> class.
            </summary>
            <param name="batches">The batches.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Scheduling.IBatch})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.BatchCollection"/> class.
            </summary>
            <param name="batches">The batches.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.Start">
            <summary>
            Starts all batches.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.Stop">
            <summary>
            Stops all batches.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.Pause">
            <summary>
            Pauses all batches.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.Continue">
            <summary>
            Continues all batches.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.BatchCollection.ExecuteOnBatches(System.Action{Siriona.Library.Scheduling.IBatch})">
            <summary>
            Executes the specified method on each batch and manage exceptions.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Siriona.Library.Scheduling.EveryDaySchedule">
            <summary>
            Represents a schedule occuring every day at given times.
            </summary>
        </member>
        <member name="T:Siriona.Library.Scheduling.ISchedule">
            <summary>
            Represents a schedule.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.ISchedule.OccuredSince(System.DateTime,System.DateTime)">
            <summary>
            Gets a value indicating whether the schedule occured between given dates.
            </summary>
            <param name="now">The current date.</param>
            <param name="lastTime">The last time.</param>
            <returns>
            A value indicating whether the schedule occured between given dates
            </returns>
        </member>
        <member name="M:Siriona.Library.Scheduling.EveryDaySchedule.#ctor(System.TimeSpan[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.EveryDaySchedule"/> class.
            </summary>
            <param name="timesOfDay">The times of day.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.EveryDaySchedule.#ctor(Siriona.Library.TimeZone,System.TimeSpan[])">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.EveryDaySchedule"/> class.
            </summary>
            <param name="timeZone">The time zone.</param>
            <param name="timesOfDay">The times of day.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.EveryDaySchedule.OccuredSince(System.DateTime,System.DateTime)">
            <summary>
            Gets a value indicating whether the schedule occured between given dates.
            </summary>
            <param name="now">The current date.</param>
            <param name="lastTime">The last time.</param>
            <returns>
            A value indicating whether the schedule occured between given dates
            </returns>
        </member>
        <member name="T:Siriona.Library.Scheduling.IBatch">
            <summary>
            Represents a batch.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.IBatch.Pause">
            <summary>
            Pauses the batch.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.IBatch.Continue">
            <summary>
            Continues a paused batch.
            </summary>
        </member>
        <member name="T:Siriona.Library.Scheduling.IJob">
            <summary>
            Represents a job.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.IJob.Process">
            <summary>
            Processes the job.
            </summary>
        </member>
        <member name="T:Siriona.Library.Scheduling.ITimer">
            <summary>
            Represents a timer that calls back when a due time elapses.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.ITimer.Start">
            <summary>
            Starts the timer for a new single time laps.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.ITimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.ITimer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.ITimer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="P:Siriona.Library.Scheduling.ITimer.DueTime">
            <summary>
            Gets or sets the due time.
            </summary>
            <value>The due time.</value>
        </member>
        <member name="P:Siriona.Library.Scheduling.ITimer.Period">
            <summary>
            Gets or sets the period.
            </summary>
            <value>The period.</value>
        </member>
        <member name="E:Siriona.Library.Scheduling.ITimer.Elapsed">
            <summary>
            Occurs when the timer elapsed.
            </summary>
        </member>
        <member name="T:Siriona.Library.Scheduling.Job">
            <summary>
            Provides a base implementation of the <see cref="T:Siriona.Library.Scheduling.IJob"/> interface.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Job.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Job.Commit">
            <summary>
            Commits the job.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Job.Rollback">
            <summary>
            Rollbacks the job.
            </summary>
        </member>
        <member name="T:Siriona.Library.Scheduling.ScheduledBatch">
            <summary>
            Implements a batch that launches a job on scheduled time.
            </summary>
        </member>
        <member name="T:Siriona.Library.Scheduling.TimerBatch">
            <summary>
            Implements batch that lauches au job on regular time basis.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
            <param name="startNow">if set to <c>true</c> [start now].</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
            <param name="dueTime">The due time.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,Siriona.Library.Scheduling.ITimer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="timer">The timer.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(System.TimeSpan,Siriona.Library.Scheduling.TransactionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="transactionMode">The transaction mode.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan,Siriona.Library.Scheduling.TransactionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
            <param name="transactionMode">The transaction mode.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan,System.Boolean,Siriona.Library.Scheduling.TransactionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
            <param name="startNow">if set to <c>true</c> [start now].</param>
            <param name="transactionMode">The transaction mode.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan,System.TimeSpan,Siriona.Library.Scheduling.TransactionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
            <param name="dueTime">The due time.</param>
            <param name="transactionMode">The transaction mode.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.#ctor(Siriona.Library.Scheduling.IJob,Siriona.Library.Scheduling.ITimer,Siriona.Library.Scheduling.TransactionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="timer">The timer.</param>
            <param name="transactionMode">The transaction mode.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Continue">
            <summary>
            Continues this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Process">
            <summary>
            Executes the batch process.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnStarting">
            <summary>
            Called when the batch is starting.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnStarted">
            <summary>
            Called when the batch has started.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnStopping">
            <summary>
            Called when the batch is stopping.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnStopped">
            <summary>
            Called when the batch has stopped.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnPausing">
            <summary>
            Called when the batch is pausing.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnPaused">
            <summary>
            Called when the batch is paused.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnContinuing">
            <summary>
            Called when the batch is continuing.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnContinued">
            <summary>
            Called when the batch is continued.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnProcessing">
            <summary>
            Called when the batch process is starting.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnProcessed">
            <summary>
            Called when the batch process succeeded.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnError(System.Exception)">
            <summary>
            Called when an error occured during the batch process.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.OnTimerElapsed">
            <summary>
            Called when the timer elapsed.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.InternalProcess">
            <summary>
            Handle the calling of the Process mehtod.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.TimerBatch.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Siriona.Library.Scheduling.TimerBatch.Job">
            <summary>
            Gets the job.
            </summary>
            <value>The job.</value>
        </member>
        <member name="M:Siriona.Library.Scheduling.ScheduledBatch.#ctor(Siriona.Library.Scheduling.IJob,System.TimeSpan,Siriona.Library.Scheduling.ISchedule)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.ScheduledBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="interval">The interval.</param>
            <param name="schedule">The schedule.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.ScheduledBatch.#ctor(System.TimeSpan,Siriona.Library.Scheduling.ISchedule)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.ScheduledBatch"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="schedule">The schedule.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.ScheduledBatch.#ctor(Siriona.Library.Scheduling.IJob,Siriona.Library.Scheduling.ITimer,Siriona.Library.Scheduling.ISchedule,Siriona.Library.Scheduling.IDateProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.ScheduledBatch"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="timer">The timer.</param>
            <param name="schedule">The schedule.</param>
            <param name="dateProvider">The date provider.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.ScheduledBatch.OnTimerElapsed">
            <summary>
            Called when the timer elapsed.
            </summary>
        </member>
        <member name="P:Siriona.Library.Scheduling.ScheduledBatch.LastDate">
            <summary>
            Gets or sets the last date.
            </summary>
            <value>The last date.</value>
        </member>
        <member name="T:Siriona.Library.Scheduling.IDateProvider">
            <summary>
             Represents a class that can give current date.
            </summary>
        </member>
        <member name="P:Siriona.Library.Scheduling.IDateProvider.Now">
            <summary>
            Gets the current date and time.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:Siriona.Library.Scheduling.IDateProvider.UtcNow">
            <summary>
            Gets the current UTC date and time.
            </summary>
            <value>The UTC now.</value>
        </member>
        <member name="T:Siriona.Library.Scheduling.DateProvider">
            <summary>
            Implements the <see cref="T:Siriona.Library.Scheduling.IDateProvider"/> interface.
            </summary>
        </member>
        <member name="P:Siriona.Library.Scheduling.DateProvider.Now">
            <summary>
            Gets the current date and time.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:Siriona.Library.Scheduling.DateProvider.UtcNow">
            <summary>
            Gets the current UTC date and time.
            </summary>
            <value>The UTC now.</value>
        </member>
        <member name="T:Siriona.Library.Scheduling.Timer">
            <summary>
            Implements the <see cref="T:Siriona.Library.Scheduling.ITimer"/> interface with <see cref="T:System.Threading.Timer"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.Timer"/> class.
            </summary>
            <param name="period">The period.</param>
            <param name="dueTime">The due time.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="period">The period.</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.TimerBatch"/> class.
            </summary>
            <param name="period">The period.</param>
            <param name="startNow">if set to <c>true</c> [start now].</param>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Scheduling.Timer"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.Start">
            <summary>
            Starts the timer for a new single time laps.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:Siriona.Library.Scheduling.Timer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="P:Siriona.Library.Scheduling.Timer.DueTime">
            <summary>
            Gets or sets the due time.
            </summary>
            <value>The due time.</value>
        </member>
        <member name="P:Siriona.Library.Scheduling.Timer.Period">
            <summary>
            Gets or sets the period.
            </summary>
            <value>The period.</value>
        </member>
        <member name="E:Siriona.Library.Scheduling.Timer.Elapsed">
            <summary>
            Occurs when the timer elapsed
            </summary>
        </member>
        <member name="T:Siriona.Library.SensitiveData">
            <summary>
            Provides utilities for handling code elements marked as sensitive data.
            </summary>
        </member>
        <member name="M:Siriona.Library.SensitiveData.IsSensitiveContext">
            <summary>
            Determines whether context contains sensitive data.
            </summary>
            <returns>
            	<c>true</c> if context contains sensitive data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.SensitiveData.IsSensitiveContext(System.Diagnostics.StackTrace)">
            <summary>
            Determines whether the specified stack trace contains sensitive data.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <returns>
            	<c>true</c> if specified stack trace contains sensitive data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.SensitiveData.IsSensitiveContext(System.Diagnostics.StackFrame)">
            <summary>
            Determines whether the specified stack frame contains sensitive data.
            </summary>
            <param name="stackFrame">The stack frame.</param>
            <returns>
            	<c>true</c> if specified stack frame contains sensitive data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.SensitiveData.IsSensitive(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified method is sensitive.
            </summary>
            <param name="member">The method.</param>
            <returns>
            	<c>true</c> if the specified method is sensitive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.SensitiveData.IsSensitive(System.Type)">
            <summary>
            Determines whether the specified type is sensitive.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is sensitive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.SensitiveData.IsSensitive(System.Object)">
            <summary>
            Determines whether the specified value is sensitive.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is sensitive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Siriona.Library.SensitiveDataAttribute">
            <summary>
            Represents an interface, a class, a method, a property or a parameter (on data access layers only) that contains sensitive data.
            </summary>
            <remarks>Sensitive data are not reported in error reports created using <see cref="T:Siriona.Library.Diagnostics.ErrorReport"/>. This attribute should be used in conjunction with <c>[MethodImpl(MethodImplOptions.NoInlining)]</c> in order to prevent methods from being inlined.</remarks>
        </member>
        <member name="T:Siriona.Library.Temporality.Flatten`5">
            <summary>
            Provides fluency for the Flatten method.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`5.#ctor(Siriona.Library.Temporality.ITemporal{`0},Siriona.Library.Temporality.ITemporal{`1},Siriona.Library.Temporality.ITemporal{`2},Siriona.Library.Temporality.ITemporal{`3},Siriona.Library.Temporality.ITemporal{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Flatten`4"/> class.
            </summary>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="source4">The source4.</param>
            <param name="source5">The source5.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`5.Into``1">
            <summary>
            Flattens properties into specified type..
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`5.ToTuple">
            <summary>
            Flattens properties into a tuple.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`5.Using``1(Siriona.Library.Func{`0,`1,`2,`3,`4,``0})">
            <summary>
            Flattens properties into using the specified projection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Flatten`4">
            <summary>
            Provides fluency for the Flatten method.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`4.#ctor(Siriona.Library.Temporality.ITemporal{`0},Siriona.Library.Temporality.ITemporal{`1},Siriona.Library.Temporality.ITemporal{`2},Siriona.Library.Temporality.ITemporal{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Flatten`4"/> class.
            </summary>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
            <param name="source4">The source4.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`4.Into``1">
            <summary>
            Flattens properties into specified type..
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`4.ToTuple">
            <summary>
            Flattens properties into a tuple.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`4.Using``1(Siriona.Library.Func{`0,`1,`2,`3,``0})">
            <summary>
            Flattens properties into using the specified projection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`4.And``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Flattens with specified property.
            </summary>
            <typeparam name="T5">The type of the 5.</typeparam>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Flatten`3">
            <summary>
            Provides fluency for the Flatten method.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`3.#ctor(Siriona.Library.Temporality.ITemporal{`0},Siriona.Library.Temporality.ITemporal{`1},Siriona.Library.Temporality.ITemporal{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Flatten`3"/> class.
            </summary>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
            <param name="source3">The source3.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`3.Into``1">
            <summary>
            Flattens properties into specified type..
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`3.ToTuple">
            <summary>
            Flattens properties into a tuple.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`3.Using``1(Siriona.Library.Func{`0,`1,`2,``0})">
            <summary>
            Flattens properties into using the specified projection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`3.And``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Flattens with specified property.
            </summary>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Flatten`2">
            <summary>
            Provides fluency for the Flatten method.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`2.#ctor(Siriona.Library.Temporality.ITemporal{`0},Siriona.Library.Temporality.ITemporal{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Flatten`2"/> class.
            </summary>
            <param name="source1">The source1.</param>
            <param name="source2">The source2.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`2.Into``1">
            <summary>
            Flattens properties into specified type..
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`2.ToTuple">
            <summary>
            Flattens properties into a tuple.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`2.Using``1(Siriona.Library.Func{`0,`1,``0})">
            <summary>
            Flattens properties into using the specified projection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Flatten`2.And``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Flattens with specified property.
            </summary>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Operator">
            <summary>
            Provides access to operator methods.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.CanAdd``1">
            <summary>
            Determines whether this instance can add.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            	<c>true</c> if this instance can add; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.Add``1(``0,``0)">
            <summary>
            Adds the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.CanSubtract``1">
            <summary>
            Determines whether this instance can subtract.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            	<c>true</c> if this instance can subtract; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.Subtract``1(``0,``0)">
            <summary>
            Subtracts the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.CanMultiply``1">
            <summary>
            Determines whether this instance can multiply.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            	<c>true</c> if this instance can multiply; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.Multiply``1(``0,``0)">
            <summary>
            Multiplies the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.CanDivide``1">
            <summary>
            Determines whether this instance can divide.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
            	<c>true</c> if this instance can divide; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.Divide``1(``0,``0)">
            <summary>
            Divides the specified values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.GreaterThan``1(``0,``0)">
            <summary>
            Compares values and indicates if x is greater that y.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.GreaterOrEqual``1(``0,``0)">
            <summary>
            Compares values and indicates if x is greater that y or equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.LessThan``1(``0,``0)">
            <summary>
            Compares values and indicates if x is less that y.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Operator.LessOrEqual``1(``0,``0)">
            <summary>
            Compares values and indicates if x is less that y or equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.OptionalTemporal`1">
            <summary>
            Represents an optional temporary value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.OptionalTemporal`1.#ctor(Siriona.Library.Temporality.ITemporal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.OptionalTemporal`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.OptionalTemporal`1.op_Addition(Siriona.Library.Temporality.OptionalTemporal{`0},Siriona.Library.Temporality.OptionalTemporal{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Periods">
            <summary>
            Represents a collection of date intervals.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Period})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Periods"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.#ctor(Siriona.Library.Period)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Periods"/> struct.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.From(System.Collections.Generic.IEnumerable{Siriona.Library.Period})">
            <summary>
            Create a new <see cref="T:Siriona.Library.Temporality.Periods"/> from specified source.
            </summary>
            <param name="source">The newly created <see cref="T:Siriona.Library.Temporality.Periods"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.From(Siriona.Library.Period,Siriona.Library.DaysOfWeek)">
            <summary>
            Create a new <see cref="T:Siriona.Library.Temporality.Periods"/> from specified period for specified days.
            </summary>
            <param name="source">The source.</param>
            <param name="daysOfWeek">The days of week.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.FromPeriod(Siriona.Library.Period)">
            <summary>
            Creates a new date range from the period.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="F:Siriona.Library.Temporality.Periods.Empty">
            <summary>
            Gets an empty date range.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Contains(System.DateTime)">
            <summary>
            Determines whether [contains] [the specified date].
            </summary>
            <param name="date">The date.</param>
            <returns>
            	<c>true</c> if [contains] [the specified date]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Contains(Siriona.Library.Period)">
            <summary>
            Determines whether the Periods contains the specified period.
            </summary>
            <param name="period">The period.</param>
            <returns>
            	<c>true</c> if  Periods contains the specified period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Clamp(Siriona.Library.Period)">
            <summary>
            Clamps the date range specified clamp period.
            </summary>
            <param name="clampPeriod">The clamp period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Split(Siriona.Library.Temporality.Periods)">
            <summary>
            Splits the specified Periods.
            </summary>
            <param name="Periods">The Periods.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.ToArray">
            <summary>
            Converths the date ranges to an <see cref="T:System.DateTime"/> <see cref="T:Siriona.Library.Interval`1"/> array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Where(System.Predicate{Siriona.Library.Period})">
            <summary>
            Get Periods containing periods passing the specified predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.DefaultIfEmpty(Siriona.Library.Period)">
            <summary>
            Gets a Periods containing the specified period if empty.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Concat(Siriona.Library.Temporality.Periods)">
            <summary>
            Concats the specified Periods.
            </summary>
            <param name="Periods">The Periods.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Count">
            <summary>
            Gets the period count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.First">
            <summary>
            Gets the first period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.First(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the first period.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.FirstOrDefault">
            <summary>
            Gets the first period or default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.FirstOrDefault(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the first period or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Last">
            <summary>
            Gets the last period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Last(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the last period.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.LastOrDefault">
            <summary>
            Gets the last period or default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.LastOrDefault(System.Predicate{Siriona.Library.Period})">
            <summary>
            Gets the last period or default.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.ElementAt(System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.ElementAtOrDefault(System.Int32)">
            <summary>
            Get the element at specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Intersect(Siriona.Library.Temporality.Periods)">
            <summary>
            Intersects the specified Periods.
            </summary>
            <param name="Periods">The Periods.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.SplitIntersect(Siriona.Library.Temporality.Periods)">
            <summary>
            Splits the intersect.
            </summary>
            <param name="Periods">The Periods.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Merge">
            <summary>
            Merges this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Merge(Siriona.Library.Temporality.Periods)">
            <summary>
            Merges the specified Periods.
            </summary>
            <param name="Periods">The Periods.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.ToList">
            <summary>
            Creates a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Enumerate">
            <summary>
            Enumerates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Skip(System.Int32)">
            <summary>
            Skips the specified item count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.SkipWhile(System.Predicate{Siriona.Library.Period})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.SkipWhile(Siriona.Library.Func{Siriona.Library.Period,System.Int32,System.Boolean})">
            <summary>
            Skips items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Take(System.Int32)">
            <summary>
            Takes the specified item count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.TakeWhile(System.Predicate{Siriona.Library.Period})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.TakeWhile(Siriona.Library.Func{Siriona.Library.Period,System.Int32,System.Boolean})">
            <summary>
            Takes the items while the predicate is verified.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Select``1(Siriona.Library.Func{Siriona.Library.Period,``0})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing projections of the elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projection">The projection.</param>
            <returns>The projected enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.Select(Siriona.Library.Func{Siriona.Library.Period,Siriona.Library.Period})">
            <summary>
            Selects the specified projection.
            </summary>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.SelectMany``1(Siriona.Library.Func{Siriona.Library.Period,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns an <see cref="T:Siriona.Library.Collections.Enumerable`1"/> containing projections of the elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projection">The projection.</param>
            <returns>The projected enumerable.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Periods.op_Implicit(Siriona.Library.Period)~Siriona.Library.Temporality.Periods">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.Period"/> to <see cref="T:Siriona.Library.Temporality.Periods"/>.
            </summary>
            <param name="period">The period.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Siriona.Library.Temporality.Periods.Source">
            <summary>
            Gets the underlying Period list.
            </summary>
        </member>
        <member name="P:Siriona.Library.Temporality.Periods.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has intervals.
            </summary>
            <value>
            	<c>true</c> if this instance has intervals; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Siriona.Library.Temporality.Periods.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Periods.End">
            <summary>
            Gets the end.
            </summary>
            <value>The end.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Periods.Period">
            <summary>
            Gets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:Siriona.Library.Temporality.PeriodsExtensions">
            <summary>
            Provides extension methods for manipulating <see cref="T:Siriona.Library.Temporality.Periods"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsExtensions.Merge(System.Collections.Generic.IEnumerable{Siriona.Library.Period})">
            <summary>
            Merge periods as a new <see cref="T:Siriona.Library.Temporality.Periods"/> object.
            </summary>
            <param name="source">The source periods.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.PeriodsUtility">
            <summary>
            Provides helpers to work with temporal values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Split(Siriona.Library.Temporality.Periods[])">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Split(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Splits the specified temporal values.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.InternalSplit(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Merge(Siriona.Library.Temporality.Periods[])">
            <summary>
            Merges the specified temporal values date ranges.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Merge(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Merges the specified temporal values date ranges.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Clamp(Siriona.Library.Temporality.Periods,Siriona.Library.Period)">
            <summary>
            Clamps the specified intervals to specifier clamp interval.
            </summary>
            <param name="intervals">The intervals.</param>
            <param name="clampInterval">The clamp interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.InternalClamp(System.Collections.Generic.IEnumerable{Siriona.Library.Period},Siriona.Library.Period)">
            <summary>
            Clamps the specified intervals to specifier clamp interval.
            </summary>
            <param name="intervals">The intervals.</param>
            <param name="clampInterval">The clamp interval.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.SplitIntersect(Siriona.Library.Temporality.Periods[])">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.SplitIntersect(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Splits the specified temporal values.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.InternalSplitIntersect(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.ApplyDays(Siriona.Library.Period,Siriona.Library.DaysOfWeek)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified period.
            </summary>
            <value></value>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Intersect(Siriona.Library.Temporality.Periods[])">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.Intersect(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Splits the specified temporal values.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.PeriodsUtility.InternalIntersect(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Periods})">
            <summary>
            Gets the intervals on which specified temporal values are all constant.
            </summary>
            <param name="temporalValues">The temporal values.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.TemporalList`1">
            <summary>
            Represents a list containing temporary values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.TemporalList`1.#ctor(System.Collections.Generic.IEnumerable{Siriona.Library.Temporality.Temporary{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.TemporalList`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.TemporalList`1.#ctor(Siriona.Library.Temporality.ITemporal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.TemporalList`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.TemporalList`1.#ctor(System.Collections.Generic.List{Siriona.Library.Temporality.Temporary{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.TemporalList`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.TemporalList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.TemporalList`1.FormatDate(System.Text.StringBuilder,System.DateTime)">
            <summary>
            Formats the date.
            </summary>
            <param name="builder">The builder.</param>
            <param name="date">The date.</param>
        </member>
        <member name="P:Siriona.Library.Temporality.TemporalList`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the IEnumerable&lt;Temporary&lt;T&gt;&gt; with the specified period.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Temporality.Temporal`1">
            <summary>
            Encapsulate a <see cref="T:Siriona.Library.Temporality.ITemporal`1"/> to provide additional methods on the interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.#ctor(Siriona.Library.Temporality.ITemporal{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Temporal`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Where(System.Predicate{`0})">
            <summary>
            Selects periods from source where predicate matches.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.DefaultTo(`0)">
            <summary>
            Returns a <see cref="T:Siriona.Library.Temporality.ITemporal`1"/> where holes are field with default value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Merge">
            <summary>
            Merges the consecutive periods with same value from source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Select``1(Siriona.Library.Func{`0,``0})">
            <summary>
            Selects values for source using specified projection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Switch``1(Siriona.Library.Func{`0,Siriona.Library.Temporality.ITemporal{``0}})">
            <summary>
            Switches the specified projection.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="projection">The projection.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.FlattenWith``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Flattens values with specified temporal into a single temporal value.
            </summary>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Intersect``1(Siriona.Library.Temporality.ITemporal{``0})">
            <summary>
            Intersects the specified filter.
            </summary>
            <typeparam name="TOther">The type of the other.</typeparam>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.ToList">
            <summary>
            Converts the temporal to a temporal list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.ToList(Siriona.Library.Period)">
            <summary>
            Converts the temporal to a temporal list.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Memo">
            <summary>
            Memoes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.Memo(System.String)">
            <summary>
            Memoes this instance using specified display name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.OverwriteWith(Siriona.Library.Temporality.ITemporal{`0})">
            <summary>
            Overwrites this instance data with specified values.
            </summary>
            <param name="temporal">The temporal.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_Addition(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator +.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_Subtraction(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator -.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_Multiply(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator *.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_Division(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator /.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_GreaterThan(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_LessThan(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_GreaterThanOrEqual(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_LessThanOrEqual(Siriona.Library.Temporality.Temporal{`0},Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporal`1.op_OnesComplement(Siriona.Library.Temporality.Temporal{`0})">
            <summary>
            Implements the operator ~.
            </summary>
            <param name="x">The x.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Siriona.Library.Temporality.Temporal`1.Siriona#Library#Temporality#ITemporal{T}#Item(Siriona.Library.Period)">
            <summary>
            Gets the the temporary values within the specified period.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Temporality.Temporal`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the the temporary values within the specified period.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Temporality.Temporal`1.Periods">
            <summary>
            Gets the periods.
            </summary>
            <value>The periods.</value>
        </member>
        <member name="T:Siriona.Library.Temporality.Temporary">
            <summary>
            Provides method to create a temporary.
            </summary>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary.Create``1(System.DateTime,System.DateTime,``0)">
            <summary>
            Creates the specified temporary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary.Create``1(Siriona.Library.Period,``0)">
            <summary>
            Creates the specified temporary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary.Create``1(System.DateTime,System.Int32,``0)">
            <summary>
            Creates the specified temporary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="dayCount">The day count.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Temporality.Temporary`1">
            <summary>
            Represents a temporary value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.#ctor(System.DateTime,System.DateTime,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Temporary`1"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.#ctor(Siriona.Library.Period,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Temporary`1"/> class.
            </summary>
            <param name="period">The period.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.Equals(Siriona.Library.Temporality.Temporary{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.op_Equality(Siriona.Library.Temporality.Temporary{`0},Siriona.Library.Temporality.Temporary{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.Temporality.Temporary`1.op_Inequality(Siriona.Library.Temporality.Temporary{`0},Siriona.Library.Temporality.Temporary{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Siriona.Library.Temporality.Temporary`1.Period">
            <summary>
            Gets the period.
            </summary>
            <value>The period.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Temporary`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Siriona.Library.RefreshingLate`1">
            <summary>
            Represents a temporary value, that is automatically reloaded after a specified time interval.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Siriona.Library.RefreshingLate`1.#ctor(Siriona.Library.Func{`0},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.RefreshingLate`1"/> class.
            </summary>
            <param name="loader">The loader.</param>
            <param name="lifeTime">The life time.</param>
        </member>
        <member name="M:Siriona.Library.RefreshingLate`1.op_Implicit(Siriona.Library.RefreshingLate{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Siriona.Library.RefreshingLate`1"/> to <c>TValue</c>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Siriona.Library.RefreshingLate`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.RefreshingLate`1.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Temporality.Weekly`1">
            <summary>
            Represents a property whose value is defined on a per-week basis.
            </summary>
            <typeparam name="T">The type of the property value.</typeparam>
        </member>
        <member name="M:Siriona.Library.Temporality.Weekly`1.#ctor(Siriona.Library.Period,Siriona.Library.DaysOfWeek,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Weekly`1"/> class.
            </summary>
            <param name="definitionPeriod">The definition period.</param>
            <param name="daysOfWeek">The days of week.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Siriona.Library.Temporality.Weekly`1.#ctor(Siriona.Library.Temporality.Weekly{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Temporality.Weekly`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:Siriona.Library.Temporality.Weekly`1.DefinitionPeriod">
            <summary>
            Gets the definition period.
            </summary>
            <value>The definition period.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Weekly`1.DaysOfWeek">
            <summary>
            Gets the days of week.
            </summary>
            <value>The days of week.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Weekly`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Siriona.Library.Temporality.Weekly`1.Item(Siriona.Library.Period)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified period.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.LookAheadSet">
            
             A token look-ahead set. This class contains a set of token id
             sequences. All sequences in the set are limited in length, so
             that no single sequence is longer than a maximum value. This
             class also filters out duplicates. Each token sequence also
             contains a repeat flag, allowing the look-ahead set to contain
             information about possible infinite repetitions of certain
             sequences. That information is important when conflicts arise
             between two look-ahead sets, as such a conflict cannot be
             resolved if the conflicting sequences can be repeated (would
             cause infinite loop).
            
             author   Per Cederberg, per at percederberg dot net
             version  1.1
            
        </member>
        <member name="F:Siriona.Library.Text.Parsing.LookAheadSet.elements">
            <summary>
             The set of token look-ahead sequences. Each sequence in
             turn is represented by an ArrayList with Integers for the
             token id:s.
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.Parsing.LookAheadSet.maxLength">
            <summary>
             The maximum length of any look-ahead sequence.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.#ctor(System.Int32)">
            <summary>
            Creates a new look-ahead set with the specified maximum
            length.
             </summary>
            <param name="maxLength">the maximum token sequence length</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.GetMinLength">
            <summary>
             Returns the length of the shortest token sequence in this
             set. This method will return zero (0) if the set is empty.
            </summary>
             <returns> the length of the shortest token sequence</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.GetMaxLength">
            <summary>
             Returns the length of the longest token sequence in this
             set. This method will return zero (0) if the set is empty.
            </summary>
             <returns> the length of the longest token sequence</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.GetInitialTokens">
            <summary>
             Returns a list of the initial token id:s in this look-ahead
             set. The list returned will not contain any duplicates.
            </summary>
             <returns> a list of the inital token id:s in this look-ahead set</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.IsRepetitive">
            <summary>
             Checks if this look-ahead set contains a repetitive token
             sequence.
            </summary>
             <returns> true if at least one token sequence is repetitive, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.IsOverlap(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
             Checks if another look-ahead set has an overlapping token
             sequence. An overlapping token sequence is a token sequence
             that is identical to another sequence, but for the length.
             I.e. one of the two sequences may be longer than the other.
            </summary>
            <param name="set">the look-ahead set to check</param>
             <returns> true if there is some token sequence that overlaps, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.IsOverlap(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
             Checks if a token sequence is overlapping. An overlapping token
             sequence is a token sequence that is identical to another
             sequence, but for the length. I.e. one of the two sequences may
             be longer than the other.
            </summary>
            <param name="seq">the token sequence to check</param>
             <returns> true if there is some token sequence that overlaps, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.Contains(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
            Checks if the specified token sequence is present in the
            set.
            </summary>
            <param name="elem">the token sequence to check.</param>
            <returns>
            	<c>true</c> if the sequence is present in this set, or otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.Intersects(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
            Intersectses the specified set.
            </summary>
            <param name="set">the look-ahead set to compare with</param>
            <returns>true if the look-ahead sets intersect, or
            false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.FindSequence(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
            Finds the sequence.
            </summary>
            <param name="elem">the token sequence to search for.</param>
            <returns>
            an identical the token sequence if found, or
            null if not found
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.Add(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
            Adds a token sequence to this set. The sequence will only
            be added if it is not already in the set. Also, if the
            sequence is longer than the allowed maximum, a truncated
            sequence will be added instead.
            </summary>
            <param name="seq">the token sequence to add.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.Add(System.Int32)">
            <summary>
            Adds a new token sequence with a single token to this set.
            The sequence will only be added if it is not already in the
            set.
            </summary>
            <param name="token">the token to add.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.AddAll(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
            Adds all the token sequences from a specified set. Only
            sequences not already in this set will be added.
            </summary>
            <param name="set">the set to add from.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.AddEmpty">
            <summary>
             Adds an empty token sequence to this set. The sequence will
             only be added if it is not already in the set.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.Remove(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
            Removes a token sequence from this set.
            </summary>
            <param name="seq">the token sequence to remove.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.RemoveAll(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
            Removes all the token sequences from a specified set. Only
            sequences already in this set will be removed.
            </summary>
            <param name="set">the set to remove from.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.CreateNextSet(System.Int32)">
            <summary>
             Creates a new look-ahead set that is the result of reading
             the specified token. The new look-ahead set will contain
             the rest of all the token sequences that started with the
             specified token.
            </summary>
             <param name="token">the token to read.</param>
             <returns> a new look-ahead set containing the remaining tokens</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.CreateIntersection(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
             Creates a new look-ahead set that is the intersection of
             this set with another set. The token sequences in the net
             set will only have the repeat flag set if it was set in
             both the identical token sequences.
            </summary>
             <param name="set">the set to intersect with</param>
             <returns> a new look-ahead set containing the intersection</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.CreateCombination(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
             Creates a new look-ahead set that is the combination of
             this set with another set. The combination is created by
             creating new token sequences that consist of appending all
             elements from the specified set onto all elements in this
             set. This is sometimes referred to as the cartesian
             product.
            </summary>
             <param name="set">the set to combine with</param>
             <returns> a new look-ahead set containing the combination</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.CreateOverlaps(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
             Creates a new look-ahead set with overlaps from another. All
             token sequences in this set that overlaps with the other set
             will be added to the new look-ahead set.
            </summary>
             <param name="set">the look-ahead set to check with.</param>
             <returns> a new look-ahead set containing the overlaps</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.CreateFilter(Siriona.Library.Text.Parsing.LookAheadSet)">
            <summary>
             Creates a new look-ahead set filter. The filter will contain
             all sequences from this set, possibly left trimmed by each one
             of the sequences in the specified set.
            </summary>
             <param name="set">the look-ahead set to trim with</param>
             <returns> a new look-ahead set filter</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.CreateRepetitive">
            <summary>
             Creates a new identical look-ahead set, except for the
             repeat flag being set in each token sequence.
            </summary>
             <returns> a new repetitive look-ahead set</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.ToString">
            <summary>
             Returns a string representation of this object.
            </summary>
             <returns> a string representation of this object</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.ToString(Siriona.Library.Text.Parsing.Tokenizer)">
            <summary>
             Returns a string representation of this object.
            </summary>
             <param name="tokenizer">the tokenizer containing the tokens.</param>
             <returns> a string representation of this object</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSet.Prepare">
            <summary>
            Prepares this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.LookAheadSet.Size">
            <summary>Returns the size of this look-ahead set.</summary>
            <returns> the number of token sequences in the set</returns>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.LookAheadSetRuntime">
            
             A token look-ahead set. This class contains a set of token id
             sequences. All sequences in the set are limited in length, so
             that no single sequence is longer than a maximum value. This
             class also filters out duplicates. Each token sequence also
             contains a repeat flag, allowing the look-ahead set to contain
             information about possible infinite repetitions of certain
             sequences. That information is important when conflicts arise
             between two look-ahead sets, as such a conflict cannot be
             resolved if the conflicting sequences can be repeated (would
             cause infinite loop).
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.1
            
        </member>
        <member name="F:Siriona.Library.Text.Parsing.LookAheadSetRuntime.elements">
            <summary>
             The set of token look-ahead sequences. Each sequence in
             turn is represented by an ArrayList with Integers for the
             token id:s.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSetRuntime.#ctor(Siriona.Library.Text.Parsing.Sequence[])">
            <summary>
            Creates a new look-ahead set with the specified maximum
            length.
             </summary>
            <param name="elements">the maximum token sequence length</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSetRuntime.GetMaxLength">
            <summary>
             Returns the length of the longest token sequence in this
             set. This method will return zero (0) if the set is empty.
            </summary>
             <returns> the length of the longest token sequence</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSetRuntime.GetInitialTokens">
            <summary>
             Returns a list of the initial token id:s in this look-ahead
             set. The list returned will not contain any duplicates.
            </summary>
             <returns> a list of the inital token id:s in this look-ahead set</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSetRuntime.IsNext(Siriona.Library.Text.Parsing.ParserRuntime)">
            <summary>
             Checks if the next token(s) in the parser match any token
             sequence in this set.
            </summary>
            <param name="parser">the parser to check</param>
             <returns> true if the next tokens are in the set, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSetRuntime.ToString">
            <summary>
             Returns a string representation of this object.
            </summary>
             <returns> a string representation of this object</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.LookAheadSetRuntime.ToString(Siriona.Library.Text.Parsing.Tokenizer)">
            <summary>
             Returns a string representation of this object.
            </summary>
             <param name="tokenizer">the tokenizer containing the tokens</param>
             <returns> a string representation of this object</returns>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Node">
            <summary>
             An abstract parse tree node. This class is inherited by all
             nodes in the parse tree, i.e. by the token and production
             classes.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Node.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.Parsing.Node"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Node.IsHidden">
            <summary>
             Checks if this node is hidden, i.e. if it should not be
             visible outside the parser.
             </summary>
             <returns>true if the node should be hidden, or false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Node.GetDescendantCount">
            <summary>
            Gets the descendant count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Node.PrintTo(System.IO.TextWriter)">
            <summary>
            Prints the node to text writer.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Node.PrintTo(System.IO.TextWriter,System.String)">
            <summary>
            Prints the node to text writer.
            </summary>
            <param name="output">The output.</param>
            <param name="indent">The indent.</param>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Children">
            <summary>
            Gets the children node.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.IsToken">
            <summary>
            Gets a value indicating whether this instance is token.
            </summary>
            <value><c>true</c> if this instance is token; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Id">
            <summary>
             The node type id property (read-only). This value is set as
             a unique identifier for each type of node, in order to
             simplify later identification.
            </summary>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Name">
            <summary>
            The node name property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.StartLine">
            <summary>
            Gets the start line.
            </summary>
            <value>The start line.</value>
            The line number property of the first character in this
            node (read-only). If the node has child elements, this
            value will be fetched from the first child.
            @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.StartColumn">
            <summary>
            Gets the start column.
            </summary>
            <value>The start column.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.EndLine">
            <summary>
            Gets the end line.
            </summary>
            <value>The end line.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.EndColumn">
            <summary>
            Gets the end column.
            </summary>
            <value>The end column.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Text.Parsing.Node"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Node.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ParseException">
             A parse exception.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.type">
            The error type.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.info">
            The additional information string.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.details">
            The additional details information. This variable is only
            used for unexpected token errors.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.line">
            The line number.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.column">
            The column number.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParseException.#ctor(Siriona.Library.Text.Parsing.ParseException.ErrorType,System.String,System.Int32,System.Int32)">
             Creates a new parse exception.
            
             @param type           the parse error type
             @param info           the additional information
             @param line           the line number, or -1 for unknown
             @param column         the column number, or -1 for unknown
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParseException.#ctor(Siriona.Library.Text.Parsing.ParseException.ErrorType,System.String,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
             Creates a new parse exception. This constructor is only
             used to supply the detailed information array, which is
             only used for expected token errors. The list then contains
             descriptions of the expected tokens.
            
             @param type           the parse error type
             @param info           the additional information
             @param details        the additional detailed information
             @param line           the line number, or -1 for unknown
             @param column         the column number, or -1 for unknown
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParseException.GetMessageDetails">
             Returns a string containing all the detailed information in
             a list. The elements are separated with a comma.
            
             @return the detailed information string
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.Type">
             The error type property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.Info">
             The additional error information property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.Details">
             The additional detailed error information property
             (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.Line">
             The line number property (read-only). This is the line
             number where the error occured, or -1 if unknown.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.Column">
             The column number property (read-only). This is the column
             number where the error occured, or -1 if unknown.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.Message">
             The message property (read-only). This property contains
             the detailed exception error message, including line and
             column numbers when available.
            
             @see #ErrorMessage
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParseException.ErrorMessage">
             The error message property (read-only). This property
             contains all the information available, except for the line
             and column number information.
            
             @see #Message
            
             @since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ParseException.ErrorType">
            The error type enumeration.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.ErrorType.IO">
            The I/O error type is used for stream I/O errors.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.ErrorType.UnexpectedEof">
            The unexpected end of file error type is used when end
            of file is encountered instead of a valid token.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.ErrorType.UnexpectedChar">
            The unexpected character error type is used when a
            character is read that isn't handled by one of the
            token patterns.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.ErrorType.UnexpectedToken">
            The unexpected token error type is used when another
            token than the expected one is encountered.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.ErrorType.InvalidToken">
            The invalid token error type is used when a token
            pattern with an error message is matched. The
            additional information provided should contain the
            error message.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParseException.ErrorType.Analysis">
            The analysis error type is used when an error is
            encountered in the analysis. The additional information
            provided should contain the error message.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ParserCreationException">
             A parser creation exception. This exception is used for signalling
             an error in the token or production patterns, making it impossible
             to create a working parser or tokenizer.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.type">
            The error type.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.name">
            The token or production pattern name. This variable is only
            set for some error types.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.info">
            The additional error information string. This variable is only
            set for some error types.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.details">
            The error details list. This variable is only set for some
            error types.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.#ctor(Siriona.Library.Text.Parsing.ParserCreationException.ErrorType,System.String)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param info           the additional error information
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.#ctor(Siriona.Library.Text.Parsing.ParserCreationException.ErrorType,System.String,System.String)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param name           the token or production pattern name
             @param info           the additional error information
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.#ctor(Siriona.Library.Text.Parsing.ParserCreationException.ErrorType,System.String,System.String,System.Collections.Generic.List{System.String})">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param name           the token or production pattern name
             @param info           the additional error information
             @param details        the error details list
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.GetErrorType">
             Returns the error type.
            
             @return the error type
            
             @see #Type
            
             @deprecated Use the Type property instead.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.GetName">
             Returns the token or production name.
            
             @return the token or production name
            
             @see #Name
            
             @deprecated Use the Name property instead.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.GetInfo">
             Returns the additional error information.
            
             @return the additional error information
            
             @see #Info
            
             @deprecated Use the Info property instead.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.GetDetails">
             Returns the detailed error information as a string
            
             @return the detailed error information
            
             @see #Details
            
             @deprecated Use the Details property instead.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserCreationException.GetMessage">
             Returns the error message. This message will contain all the
             information available.
            
             @return the error message
            
             @see #Message
            
             @deprecated Use the Message property instead.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserCreationException.Type">
             The error type property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserCreationException.Name">
             The token or production name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserCreationException.Info">
             The additional error information property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserCreationException.Details">
             The detailed error information property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserCreationException.Message">
            The message property (read-only). This property contains
            the detailed exception error message.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType">
            The error type enumeration.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType.INTERNAL">
            The internal error type is only used to signal an
            error that is a result of a bug in the parser or
            tokenizer code.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType.INVALID_PARSER">
            The invalid parser error type is used when the parser
            as such is invalid. This error is typically caused by
            using a parser without any patterns.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType.INVALID_TOKEN">
            The invalid token error type is used when a token
            pattern is erroneous. This error is typically caused
            by an invalid pattern type or an erroneous regular
            expression.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType.INVALID_PRODUCTION">
            The invalid production error type is used when a
            production pattern is erroneous. This error is
            typically caused by referencing undeclared productions,
            or violating some other production pattern constraint.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType.INFINITE_LOOP">
            The infinite loop error type is used when an infinite
            loop has been detected in the grammar. One of the
            productions in the loop will be reported.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserCreationException.ErrorType.INHERENT_AMBIGUITY">
            The inherent ambiguity error type is used when the set
            of production patterns (i.e. the grammar) contains
            ambiguities that cannot be resolved.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ParserLogException">
             A parser log exception. This class contains a list of all the
             parse errors encountered while parsing.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.1
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserLogException.errors">
            The list of errors found.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserLogException.GetErrorCount">
             Returns the number of errors in this log.
            
             @return the number of errors in this log
            
             @see #Count
            
             @deprecated Use the Count property instead.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserLogException.GetError(System.Int32)">
             Returns a specific error from the log.
            
             @param index          the error index, 0 &lt;= index &lt; count
            
             @return the parse error requested
            
             @deprecated Use the class indexer instead.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserLogException.AddError(Siriona.Library.Text.Parsing.ParseException)">
             Adds a parse error to the log.
            
             @param e              the parse error to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserLogException.GetMessage">
             Returns the detailed error message. This message will contain
             the error messages from all errors in this log, separated by
             a newline.
            
             @return the detailed error message
            
             @see #Message
            
             @deprecated Use the Message property instead.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserLogException.Message">
            The message property (read-only). This property contains
            the detailed exception error message.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserLogException.Count">
             The error count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ParserLogException.Item(System.Int32)">
             The error index (read-only). This index contains all the
             errors in this error log.
            
             @param index          the error index, 0 &lt;= index &lt; Count
            
             @return the parse error requested
            
             @since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ParserRuntime">
             A base parser class. This class provides the standard parser
             interface, as well as token handling.
            
             ->author   Per Cederberg, per at percederberg dot net
             ->version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.tokenizer">
            The tokenizer to use.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.analyzer">
            The analyzer to use for callbacks.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.patterns">
            The list of production patterns.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.patternIds">
            The map with production patterns and their id:s. This map
            contains the production patterns indexed by their id:s.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.tokens">
            The list of buffered tokens. This list will contain tokens that
            have been read from the tokenizer, but not yet consumed.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.errorLog">
            The error log. All parse errors will be added to this log as
            the parser attempts to recover from the error. If the error
            count is higher than zero (0), this log will be thrown as the
            result from the parse() method.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ParserRuntime.errorRecovery">
            The error recovery counter. This counter is initially set to a
            negative value to indicate that no error requiring recovery
            has been encountered. When a parse error is found, the counter
            is set to three (3), and is then decreased by one for each
            correctly read token until it reaches zero (0).
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.Parse(System.IO.TextReader)">
             Parses the token stream and returns a parse tree. This
             method will call Prepare() if not previously called. It
             will also call the Reset() method, to make sure that only
             the Tokenizer.Reset() method must be explicitly called in
             order to reuse a parser for multiple input streams. In case
             of a parse error, the parser will attempt to recover and
             throw all the errors found in a parser log exception in the
             end.
            
             ->return the parse tree
            
             ->throws ParserCreationException if the parser couldn't be
                         initialized correctly
             ->throws ParserLogException if the input couldn't be parsed
                         correctly
            
             ->see #Prepare
             ->see #Reset
             ->see Tokenizer#Reset
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.ParseStart">
             Parses the token stream and returns a parse tree.
            
             ->return the parse tree
            
             ->throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.AddError(Siriona.Library.Text.Parsing.ParseException,System.Boolean)">
             Adds an error to the error log. If the parser is in error
             recovery mode, the error will not be added to the log. If the
             recovery flag is set, this method will set the error recovery
             counter thus enter error recovery mode. Only lexical or
             syntactical errors require recovery, so this flag shouldn't be
             set otherwise.
            
             ->param e              the error to add
             ->param recovery       the recover flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.GetPattern(System.Int32)">
             Returns the production pattern with the specified id.
            
             ->param id             the production pattern id
            
             ->return the production pattern found, or
                     null if non-existent
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.GetStartPattern">
             Returns the production pattern for the starting production.
            
             ->return the start production pattern, or
                     null if no patterns have been added
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.ExitNode(Siriona.Library.Text.Parsing.Node)">
             Handles the parser leaving a production. This method calls the
             appropriate analyzer callback if the node is not hidden, and
             returns the result. Note that this method will not call any
             callback if an error requiring recovery has ocurred.
            
             ->param node           the parse tree node
            
             ->return the parse tree node, or
                     null if no parse tree should be created
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.AddNode(Siriona.Library.Text.Parsing.Production,Siriona.Library.Text.Parsing.Node)">
             Handles the parser adding a child node to a production. This
             method calls the appropriate analyzer callback. Note that this
             method will not call any callback if an error requiring
             recovery has ocurred.
            
             ->param node           the parent parse tree node
             ->param child          the child parse tree node, or null
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.NextToken">
             Reads and consumes the next token in the queue. If no token
             was available for consumation, a parse error will be
             thrown.
            
             ->return the token consumed
            
             ->throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.NextToken(System.Int32)">
             Reads and consumes the next token in the queue. If no token was
             available for consumation, a parse error will be thrown. A
             parse error will also be thrown if the token id didn't match
             the specified one.
            
             ->param id             the expected token id
            
             ->return the token consumed
            
             ->throws ParseException if the input stream couldn't be parsed
                         correctly, or if the token wasn't expected
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.PeekToken(System.Int32)">
             Returns a token from the queue. This method is used to check
             coming tokens before they have been consumed. Any number of
             tokens forward can be checked.
            
             ->param steps          the token queue number, zero (0) for first
            
             ->return the token in the queue, or
                     null if no more tokens in the queue
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.ToString">
             Returns a string representation of this parser. The string will
             contain all the production definitions and various additional
             information.
            
             ->return a detailed string representation of this parser
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.ToString(Siriona.Library.Text.Parsing.ProductionPatternRuntime)">
             Returns a string representation of a production pattern.
            
             ->param prod           the production pattern
            
             ->return a detailed string representation of the pattern
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.ToString(Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime)">
             Returns a string representation of a production pattern
             alternative.
            
             ->param alt            the production pattern alternative
            
             ->return a detailed string representation of the alternative
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.ToString(Siriona.Library.Text.Parsing.ProductionPatternElementRuntime)">
             Returns a string representation of a production pattern
             element.
            
             ->param elem           the production pattern element
            
             ->return a detailed string representation of the element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.GetTokenDescription(System.Int32)">
             Returns a token description for a specified token.
            
             ->param token          the token to describe
            
             ->return the token description
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ParserRuntime.NewProduction(Siriona.Library.Text.Parsing.ProductionPattern)">
             Factory method to create a new production node. This method
             can be overridden to provide other production implementations
             than the default one.
            
             ->param pattern        the production pattern
            
             ->return the new production node
            
             ->since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Production">
             A production node. This class represents a grammar production
             (i.e. a list of child nodes) in a parse tree. The productions
             are created by a parser, that adds children a according to a
             set of production patterns (i.e. grammar rules).
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Production.pattern">
            The production pattern used for this production.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Production.children">
            The child nodes.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Production.#ctor(Siriona.Library.Text.Parsing.ProductionPattern)">
             Creates a new production node.
            
             @param pattern        the production pattern
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Production.AddChild(Siriona.Library.Text.Parsing.Node)">
             Adds a child node. The node will be added last in the list of
             children.
            
             @param child          the child node to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Production.IsHidden">
             Checks if this node is hidden, i.e. if it should not be visible
             outside the parser.
            
             @return true if the node should be hidden, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Production.ToString">
             Returns a string representation of this production.
            
             @return a string representation of this production
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Production.Name">
             The node name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Production.Count">
             The child node count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Production.Item(System.Int32)">
             The child node index (read-only).
            
             @param index          the child index, 0 &lt;= index &lt; Count
            
             @return the child node found, or
                     null if index out of bounds
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Production.Pattern">
             The production pattern property (read-only). This property
             contains the production pattern linked to this production.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Production.Children">
            <summary>
            child nodes
            </summary>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ProductionPattern">
             A production pattern. This class represents a set of production
             alternatives that together forms a single production. A
             production pattern is identified by an integer id and a name,
             both provided upon creation. The pattern id is used for
             referencing the production pattern from production pattern
             elements.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPattern.id">
            The production pattern identity.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPattern.name">
            The production pattern name.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPattern.synthetic">
            The synthectic production flag. If this flag is set, the
            production identified by this pattern has been artificially
            inserted into the grammar.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPattern.alternatives">
            The list of production pattern alternatives.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPattern.defaultAlt">
            The default production pattern alternative. This alternative
            is used when no other alternatives match. It may be set to
            -1, meaning that there is no default (or fallback) alternative.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPattern.lookAhead">
            The look-ahead set associated with this pattern.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPattern.#ctor(System.Int32,System.String)">
             Creates a new production pattern.
            
             @param id             the production pattern id
             @param name           the production pattern name
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPattern.IsLeftRecursive">
             Checks if this pattern is recursive on the left-hand side.
             This method checks if any of the production pattern
             alternatives is left-recursive.
            
             @return true if at least one alternative is left recursive, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPattern.IsMatchingEmpty">
             Checks if this pattern would match an empty stream of
             tokens. This method checks if any one of the production
             pattern alternatives would match the empty token stream.
            
             @return true if at least one alternative match no tokens, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPattern.AddAlternative(Siriona.Library.Text.Parsing.ProductionPatternAlternative)">
             Adds a production pattern alternative.
            
             @param alt            the production pattern alternative to add
            
             @throws ParserCreationException if an identical alternative has
                         already been added
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPattern.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.Id">
             The production pattern identity property (read-only). This
             property contains the unique identity value.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.Name">
             The production pattern name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.Synthetic">
             The synthetic production pattern property. If this property
             is set, the production identified by this pattern has been
             artificially inserted into the grammar. No parse tree nodes
             will be created for such nodes, instead the child nodes
             will be added directly to the parent node. By default this
             property is set to false.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.LookAhead">
            The look-ahead set property. This property contains the
            look-ahead set associated with this alternative.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.DefaultAlternative">
            The default pattern alternative property. The default
            alternative is used when no other alternative matches. The
            default alternative must previously have been added to the
            list of alternatives. This property is set to null if no
            default pattern alternative has been set.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.Count">
             The production pattern alternative count property
             (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPattern.Item(System.Int32)">
             The production pattern alternative index (read-only).
            
             @param index          the alternative index, 0 &lt;= pos &lt; Count
            
             @return the alternative found
            
             @since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ProductionPatternAlternative">
             A production pattern alternative. This class represents a list of
             production pattern elements. In order to provide productions that
             cannot be represented with the element occurance counters, multiple
             alternatives must be created and added to the same production
             pattern. A production pattern alternative is always contained
             within a production pattern.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternAlternative.pattern">
            The production pattern.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternAlternative.elements">
            The element list.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternAlternative.lookAhead">
            The look-ahead set associated with this alternative.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.IsLeftRecursive">
             Checks if this alternative is recursive on the left-hand
             side. This method checks all the possible left side
             elements and returns true if the pattern itself is among
             them.
            
             @return true if the alternative is left side recursive, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.IsMatchingEmpty">
             Checks if this alternative would match an empty stream of
             tokens. This check is equivalent of getMinElementCount()
             returning zero (0).
            
             @return true if the rule can match an empty token stream, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.GetMinElementCount">
             Returns the minimum number of elements needed to satisfy
             this alternative. The value returned is the sum of all the
             elements minimum count.
            
             @return the minimum number of elements
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.AddToken(System.Int32,System.Int32,System.Int32)">
             Adds a token to this alternative. The token is appended to
             the end of the element list. The multiplicity values
             specified define if the token is optional or required, and
             if it can be repeated.
            
             @param id             the token (pattern) id
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   -1 for infinite
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.AddProduction(System.Int32,System.Int32,System.Int32)">
             Adds a production to this alternative. The production is
             appended to the end of the element list. The multiplicity
             values specified define if the production is optional or
             required, and if it can be repeated.
            
             @param id             the production (pattern) id
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   -1 for infinite
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.AddElement(Siriona.Library.Text.Parsing.ProductionPatternElement)">
             Adds a production pattern element to this alternative. The
             element is appended to the end of the element list.
            
             @param elem           the production pattern element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.AddElement(Siriona.Library.Text.Parsing.ProductionPatternElement,System.Int32,System.Int32)">
             Adds a production pattern element to this alternative. The
             multiplicity values in the element will be overridden with
             the specified values. The element is appended to the end of
             the element list.
            
             @param elem           the production pattern element
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   -1 for infinite
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.Equals(System.Object)">
             Checks if this object is equal to another. This method only
             returns true for another production pattern alternative
             with identical elements in the same order.
            
             @param obj            the object to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.Equals(Siriona.Library.Text.Parsing.ProductionPatternAlternative)">
             Checks if this alternative is equal to another. This method
             returns true if the other production pattern alternative
             has identical elements in the same order.
            
             @param alt            the alternative to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.GetHashCode">
             Returns a hash code for this object.
            
             @return a hash code for this object
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternative.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternative.Pattern">
             The production pattern property (read-only). This property
             contains the pattern having this alternative.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternative.LookAhead">
            The look-ahead set property. This property contains the
            look-ahead set associated with this alternative.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternative.Count">
             The production pattern element count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternative.Item(System.Int32)">
             The production pattern element index (read-only).
            
             @param index          the element index, 0 &lt;= pos &lt; Count
            
             @return the element found
            
             @since 1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.pattern">
            <summary>
            The production pattern.
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.elements">
            <summary>
            The element list.
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.lookAhead">
            <summary>
            The look-ahead set associated with this alternative.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.#ctor(Siriona.Library.Text.Parsing.ProductionPattern,Siriona.Library.Text.Parsing.ProductionPatternElementRuntime[],Siriona.Library.Text.Parsing.LookAheadSetRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="elements">The elements.</param>
            <param name="lookAhead">The look ahead.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.Pattern">
            <summary>
            The production pattern property (read-only). This property
            contains the pattern having this alternative.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.LookAhead">
            <summary>
            The look-ahead set property. This property contains the
            look-ahead set associated with this alternative.
            </summary>
            <value>The look ahead.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.Count">
            <summary>
            The production pattern element count property (read-only).
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ProductionPatternElement">
             A production pattern element. This class represents a reference to
             either a token or a production. Each element also contains minimum
             and maximum occurence counters, controlling the number of
             repetitions allowed. A production pattern element is always
             contained within a production pattern rule.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElement.isToken">
            The token flag. This flag is true for token elements, and
            false for production elements.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElement.id">
            The node identity.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElement.min">
            The minimum occurance count.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElement.max">
            The maximum occurance count.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElement.lookAhead">
            The look-ahead set associated with this element.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElement.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
             Creates a new element. If the maximum value if zero (0) or
             negative, it will be set to Int32.MaxValue.
            
             @param isToken        the token flag
             @param id             the node identity
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   negative for infinite
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElement.IsToken">
             Returns true if this element represents a token.
            
             @return true if the element is a token, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElement.IsProduction">
             Returns true if this element represents a production.
            
             @return true if the element is a production, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElement.Equals(System.Object)">
             Checks if this object is equal to another. This method only
             returns true for another identical production pattern
             element.
            
             @param obj            the object to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElement.GetHashCode">
             Returns a hash code for this object.
            
             @return a hash code for this object
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElement.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElement.Id">
             The node identity property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElement.MinCount">
             The minimum occurence count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElement.MaxCount">
             The maximum occurence count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElement.LookAhead">
            The look-ahead set property. This is the look-ahead set
            associated with this alternative.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime">
             A production pattern element. This class represents a reference to
             either a token or a production. Each element also contains minimum
             and maximum occurence counters, controlling the number of
             repetitions allowed. A production pattern element is always
             contained within a production pattern rule.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.isToken">
            The token flag. This flag is true for token elements, and
            false for production elements.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.id">
            The node identity.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.min">
            The minimum occurance count.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.max">
            The maximum occurance count.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.lookAhead">
            The look-ahead set associated with this element.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,Siriona.Library.Text.Parsing.LookAheadSetRuntime)">
             Creates a new element. If the maximum value if zero (0) or
             negative, it will be set to Int32.MaxValue.
            
             @param isToken        the token flag
             @param id             the node identity
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   negative for infinite
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.IsToken">
             Returns true if this element represents a token.
            
             @return true if the element is a token, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.IsMatch(Siriona.Library.Text.Parsing.Token)">
             Checks if a specific token matches this element. This
             method will only return true if this element is a token
             element, and the token has the same id and this element.
            
             @param token          the token to check
            
             @return true if the token matches this element, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.Equals(System.Object)">
             Checks if this object is equal to another. This method only
             returns true for another identical production pattern
             element.
            
             @param obj            the object to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.GetHashCode">
             Returns a hash code for this object.
            
             @return a hash code for this object
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.Id">
             The node identity property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.MinCount">
             The minimum occurence count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.MaxCount">
             The maximum occurence count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternElementRuntime.LookAhead">
            The look-ahead set property. This is the look-ahead set
            associated with this alternative.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ProductionPatternRuntime">
             A production pattern. This class represents a set of production
             alternatives that together forms a single production. A
             production pattern is identified by an integer id and a name,
             both provided upon creation. The pattern id is used for
             referencing the production pattern from production pattern
             elements.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternRuntime.id">
            The production pattern identity.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternRuntime.name">
            The production pattern name.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternRuntime.alternatives">
            The list of production pattern alternatives.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternRuntime.defaultAlt">
            The default production pattern alternative. This alternative
            is used when no other alternatives match. It may be set to
            -1, meaning that there is no default (or fallback) alternative.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ProductionPatternRuntime.lookAhead">
            The look-ahead set associated with this pattern.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternRuntime.#ctor(System.Int32,System.String,Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime[],System.Int32,Siriona.Library.Text.Parsing.LookAheadSetRuntime)">
             Creates a new production pattern.
            
             @param id             the production pattern id
             @param name           the production pattern name
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ProductionPatternRuntime.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternRuntime.Id">
             The production pattern identity property (read-only). This
             property contains the unique identity value.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternRuntime.Name">
             The production pattern name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternRuntime.LookAhead">
            The look-ahead set property. This property contains the
            look-ahead set associated with this alternative.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternRuntime.DefaultAlternative">
            The default pattern alternative property. The default
            alternative is used when no other alternative matches. The
            default alternative must previously have been added to the
            list of alternatives. This property is set to null if no
            default pattern alternative has been set.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternRuntime.Count">
             The production pattern alternative count property
             (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ProductionPatternRuntime.Item(System.Int32)">
             The production pattern alternative index (read-only).
            
             @param index          the alternative index, 0 &lt;= pos &lt; Count
            
             @return the alternative found
            
             @since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.ReaderBuffer">
             A character buffer that automatically reads from an input source
             stream when needed. This class keeps track of the current position
             in the buffer and its line and column number in the original input
             source. It allows unlimited look-ahead of characters in the input,
             reading and buffering the required data internally. As the
             position is advanced, the buffer content prior to the current
             position is subject to removal to make space for reading new
             content. A few characters before the current position are always
             kept to enable boundary condition checks.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.BlockSize">
            The stream reading block size. All reads from the underlying
            character stream will be made in multiples of this block size.
            Also the character buffer size will always be a multiple of
            this factor.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.buffer">
            The character buffer.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.pos">
            The current character buffer position.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.length">
            The number of characters in the buffer.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.input">
            The input source character reader.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.line">
            The line number of the next character to read. This value will
            be incremented when reading past line breaks.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.ReaderBuffer.column">
            The column number of the next character to read. This value
            will be updated for every character read.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.#ctor(System.IO.TextReader)">
             Creates a new tokenizer character buffer.
            
             @param input           the input source character reader
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.Dispose">
            Discards all resources used by this buffer. This will also
            close the source input stream. Disposing a previously disposed
            buffer has no effect.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.Substring(System.Int32,System.Int32)">
             Returns a substring already in the buffer. Note that this
             method may behave in unexpected ways when performing
             operations that modifies the buffer content.
            
             @param index          the start index, inclusive
             @param length         the substring length
            
             @return the substring specified
            
             @throws IndexOutOfBoundsException if one of the indices were
                         negative or not less than (or equal) than length()
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.ToString">
             Returns the current content of the buffer as a string. Note
             that content before the current position will also be
             returned.
            
             @return the current buffer content
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.Peek(System.Int32)">
             Returns a character relative to the current position. This
             method may read from the input source and may also trim the
             buffer content prior to the current position. The result of
             calling this method may therefore be that the buffer length
             and content have been modified.
            
             The character offset must be positive, but is allowed to span
             the entire size of the input source stream. Note that the
             internal buffer must hold all the intermediate characters,
             which may be wasteful if the offset is too large.
            
             @param offset         the character offset, from 0 and up
            
             @return the character found as an integer in the range 0 to
             65535 (0x00-0xffff), or -1 if the end of the stream was reached
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.Read(System.Int32)">
             Reads the specified number of characters from the current
             position. This will also move the current position forward.
             This method will not attempt to move beyond the end of the
             input source stream. When reaching the end of file, the
             returned string might be shorter than requested. Any
             remaining characters will always be returned before returning
             null.
            
             @param offset         the character offset, from 0 and up
            
             @return the string containing the characters read, or
                     null no more characters remain in the buffer
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.UpdateLineColumnNumbers(System.Int32)">
             Updates the line and column numbers counters. This method
             requires all the characters to be processed (i.e. returned
             as read) to be present in the buffer, starting at the
             current buffer position.
            
             @param offset          the number of characters to process
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.EnsureBuffered(System.Int32)">
             Ensures that the specified offset is read into the buffer.
             This method will read characters from the input stream and
             appends them to the buffer if needed. This method is safe to
             call even after end of file has been reached. This method also
             handles removal of characters at the beginning of the buffer
             once the current position is high enough. It will also enlarge
             the buffer as needed.
            
             @param offset         the read offset, from 0 and up
            
             @throws IOException if an error was encountered while reading
                         the input stream
        </member>
        <member name="M:Siriona.Library.Text.Parsing.ReaderBuffer.EnsureCapacity(System.Int32)">
             Ensures that the buffer has at least the specified capacity.
            
             @param size           the minimum buffer size
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ReaderBuffer.Position">
            The current buffer position property (read-only).
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ReaderBuffer.LineNumber">
            The current line number property (read-only). This number
            is the line number of the next character to read.
        </member>
        <member name="P:Siriona.Library.Text.Parsing.ReaderBuffer.ColumnNumber">
            The current column number property (read-only). This number
            is the column number of the next character to read.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RecursiveDescentParser`1">
            <summary>
            Represents a recursive descent parser
            </summary>
            <typeparam name="TToken">The type of the token.</typeparam>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser`1.#ctor(Siriona.Library.Text.Parsing.Tokenizer,Siriona.Library.Text.Parsing.Analyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.Parsing.RecursiveDescentParser`1"/> class.
            </summary>
            <param name="tokenizer"></param>
            <param name="analyzer"></param>
            Creates a new parser.
            @param tokenizer      the tokenizer to use
            @param analyzer       the analyzer callback to use
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser`1.StartPattern(`0)">
            <summary>
            Starts the pattern.
            </summary>
            <param name="tokenId">The token id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser`1.StartSynteticPattern(`0)">
            <summary>
            Starts the syntetic pattern.
            </summary>
            <param name="tokenId">The token id.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParser`1.CreateSyntheticProduction(Siriona.Library.Text.Parsing.ProductionPattern)">
            <summary>
            Creates the synthetic production.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime">
             A recursive descent parser. This parser handles LL(n) grammars,
             selecting the appropriate pattern to parse based on the next few
             tokens. The parser is more efficient the fewer look-ahead tokens
             that is has to consider.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.#ctor(Siriona.Library.Text.Parsing.Tokenizer,Siriona.Library.Text.Parsing.Analyzer,Siriona.Library.Text.Parsing.ProductionPatternRuntime[])">
             Creates a new parser.
            
             @param tokenizer      the tokenizer to use
             @param analyzer       the analyzer callback to use
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.ParseStart">
             Parses the input stream and creates a parse tree.
            
             @return the parse tree
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.ParsePattern(Siriona.Library.Text.Parsing.ProductionPatternRuntime)">
             Parses a production pattern. A parse tree node may or may
             not be created depending on the analyzer callbacks.
            
             @param pattern        the production pattern to parse
            
             @return the parse tree node created, or null
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.ParseAlternative(Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime)">
             Parses a production pattern alternative. A parse tree node
             may or may not be created depending on the analyzer
             callbacks.
            
             @param alt            the production pattern alternative
            
             @return the parse tree node created, or null
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.ParseElement(Siriona.Library.Text.Parsing.Production,Siriona.Library.Text.Parsing.ProductionPatternElementRuntime)">
             Parses a production pattern element. All nodes parsed may
             or may not be added to the parse tree node specified,
             depending on the analyzer callbacks.
            
             @param node           the production parse tree node
             @param elem           the production pattern element to parse
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.IsNext(Siriona.Library.Text.Parsing.ProductionPatternRuntime)">
             Checks if the next tokens match a production pattern. The
             pattern look-ahead set will be used if existing, otherwise
             this method returns false.
            
             @param pattern        the pattern to check
            
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.IsNext(Siriona.Library.Text.Parsing.ProductionPatternAlternativeRuntime)">
             Checks if the next tokens match a production pattern
             alternative. The pattern alternative look-ahead set will be
             used if existing, otherwise this method returns false.
            
             @param alt            the pattern alternative to check
            
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.IsNext(Siriona.Library.Text.Parsing.ProductionPatternElementRuntime)">
             Checks if the next tokens match a production pattern
             element. If the element has a look-ahead set it will be
             used, otherwise the look-ahead set of the referenced
             production or token will be used.
            
             @param elem           the pattern element to check
            
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RecursiveDescentParserRuntime.ThrowParseException(Siriona.Library.Text.Parsing.LookAheadSetRuntime)">
             Throws a parse exception that matches the specified look-ahead
             set. This method will take into account any initial matching
             tokens in the look-ahead set.
            
             @param setRuntime            the look-ahead set to match
            
             @throws ParseException always thrown by this method
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement">
             A regular expression alternative element. This element matches
             the longest alternative element.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.Element">
             A regular expression element. This is the common base class for
             all regular expression elements, i.e. the parts of the regular
             expression.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Element.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Element.Match(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Element.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement.elem1">
            The first alternative element.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement.elem2">
            The second alternative element.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement.#ctor(Siriona.Library.Text.Parsing.RegularExpressions.Element,Siriona.Library.Text.Parsing.RegularExpressions.Element)">
             Creates a new alternative element.
            
             @param first          the first alternative
             @param second         the second alternative
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement.Match(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.AlternativeElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement">
             A regular expression character set element. This element
             matches a single character inside (or outside) a character set.
             The character set is user defined and may contain ranges of
             characters. The set may also be inverted, meaning that only
             characters not inside the set will be considered to match.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Dot">
            The dot ('.') character set. This element matches a single
            character that is not equal to a newline character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Digit">
            The digit character set. This element matches a single
            numeric character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.NonDigit">
            The non-digit character set. This element matches a single
            non-numeric character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Whitespace">
            The whitespace character set. This element matches a single
            whitespace character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.NonWhitespace">
            The non-whitespace character set. This element matches a
            single non-whitespace character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Word">
            The word character set. This element matches a single word
            character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.NonWord">
            The non-word character set. This element matches a single
            non-word character.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.inverted">
            The inverted character set flag.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.contents">
            The character set content. This array may contain either
            range objects or Character objects.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.#ctor(System.Boolean)">
             Creates a new character set element. If the inverted character
             set flag is set, only characters NOT in the set will match.
            
             @param inverted       the inverted character set flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.AddCharacter(System.Char)">
             Adds a single character to this character set.
            
             @param c              the character to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.AddCharacters(System.String)">
             Adds multiple characters to this character set.
            
             @param str            the string with characters to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.AddCharacters(Siriona.Library.Text.Parsing.RegularExpressions.StringElement)">
             Adds multiple characters to this character set.
            
             @param elem           the string element with characters to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.AddRange(System.Char,System.Char)">
             Adds a character range to this character set.
            
             @param min            the minimum character value
             @param max            the maximum character value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.AddCharacterSet(Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement)">
             Adds a character subset to this character set.
            
             @param elem           the character set to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Clone">
             Returns this element as the character set shouldn't be
             modified after creation. This partially breaks the contract
             of clone(), but as new characters are not added to the
             character set after creation, this will work correctly.
            
             @return this character set element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Match(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also be
             specified, but numbers higher than zero (0) cause a failed
             match for any element that doesn't attempt to combine other
             elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.InSet(System.Char)">
             Checks if the specified character matches this character
             set. This method takes the inverted flag into account.
            
             @param c               the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.InDotSet(System.Char)">
             Checks if the specified character is present in the 'dot'
             set. This method does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is present, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.InDigitSet(System.Char)">
             Checks if the specified character is a digit. This method
             does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is a digit, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.InWhitespaceSet(System.Char)">
             Checks if the specified character is a whitespace
             character. This method does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is a whitespace character, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.InWordSet(System.Char)">
             Checks if the specified character is a word character. This
             method does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is a word character, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.InUserSet(System.Char)">
             Checks if the specified character is present in the user-
             defined set. This method does not consider the inverted
             flag.
            
             @param value           the character to check
            
             @return true if the character is present, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.ToString">
             Returns a string description of this character set.
            
             @return a string description of this character set
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Range">
            A character range class.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Range.min">
            The minimum character value.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Range.max">
            The maximum character value.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Range.#ctor(System.Char,System.Char)">
             Creates a new character range.
            
             @param min        the minimum character value
             @param max        the maximum character value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Range.Inside(System.Char)">
             Checks if the specified character is inside the range.
            
             @param c          the character to check
            
             @return true if the character is in the range, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CharacterSetElement.Range.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement">
             A regular expression combination element. This element matches
             two consecutive elements.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement.elem1">
            The first element.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement.elem2">
            The second element.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement.#ctor(Siriona.Library.Text.Parsing.RegularExpressions.Element,Siriona.Library.Text.Parsing.RegularExpressions.Element)">
             Creates a new combine element.
            
             @param first          the first element
             @param second         the second element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement.Match(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also be
             specified, but numbers higher than zero (0) cause a failed
             match for any element that doesn't attempt to combine other
             elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.CombineElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.Matcher">
             A regular expression string matcher. This class handles the
             matching of a specific string with a specific regular
             expression. It contains state information about the matching
             process, as for example the position of the latest match, and a
             number of flags that were set. This class is not thread-safe.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.element">
            The base regular expression element.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.buffer">
            The input character buffer to work with.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.ignoreCase">
            The character case ignore flag.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.start">
            The start of the latest match found.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.length">
            The length of the latest match found.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.endOfString">
            The end of string reached flag. This flag is set if the end
            of the string was encountered during the latest match.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.#ctor(Siriona.Library.Text.Parsing.RegularExpressions.Element,Siriona.Library.Text.Parsing.ReaderBuffer,System.Boolean)">
             Creates a new matcher with the specified element.
            
             @param e              the base regular expression element
             @param buffer         the input character buffer to work with
             @param ignoreCase     the character case ignore flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.IsCaseInsensitive">
             Checks if this matcher compares in case-insensitive mode.
            
             @return true if the matching is case-insensitive, or
                     false otherwise
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.Reset">
            Resets the information about the last match. This will
            clear all flags and set the match length to a negative
            value. This method is automatically called before starting
            a new match.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.Reset(System.String)">
             Resets the matcher for use with a new input string. This
             will clear all flags and set the match length to a negative
             value.
            
             @param str            the new string to work with
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.Reset(Siriona.Library.Text.Parsing.ReaderBuffer)">
             Resets the matcher for use with a new look-ahead character
             input stream. This will clear all flags and set the match
             length to a negative value.
            
             @param buffer          the character input buffer
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.Start">
             Returns the start position of the latest match. If no match
             has been encountered, this method returns zero (0).
            
             @return the start position of the latest match
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.End">
             Returns the end position of the latest match. This is one
             character after the match end, i.e. the first character
             after the match. If no match has been encountered, this
             method returns the same value as start().
            
             @return the end position of the latest match
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.Length">
             Returns the length of the latest match.
            
             @return the length of the latest match, or
                     -1 if no match was found
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.HasReadEndOfString">
             Checks if the end of the string was encountered during the
             last match attempt. This flag signals that more input may
             be needed in order to get a match (or a longer match).
            
             @return true if the end of string was encountered, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.MatchFromBeginning">
             Attempts to find a match starting at the beginning of the
             string.
            
             @return true if a match was found, or
                     false otherwise
            
             @throws IOException if an I/O error occurred while reading
                         an input stream
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.MatchFrom(System.Int32)">
             Attempts to find a match starting at the specified position
             in the string.
            
             @param pos            the starting position of the match
            
             @return true if a match was found, or
                     false otherwise
            
             @throws IOException if an I/O error occurred while reading
                         an input stream
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.ToString">
             Returns the latest matched string. If no string has been
             matched, an empty string will be returned.
            
             @return the latest matched string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.Matcher.SetReadEndOfString">
            Sets the end of string encountered flag. This method is
            called by the various elements analyzing the string.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.RegExp">
             A regular expression. This class creates and holds an internal
             data structure representing a regular expression. It also
             allows creating matchers. This class is thread-safe. Multiple
             matchers may operate simultanously on the same regular
             expression.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.element">
            The base regular expression element.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.pattern">
            The regular expression pattern.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ignoreCase">
            The character case ignore flag.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.pos">
            The current position in the pattern. This variable is used by
            the parsing methods.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.#ctor(System.String)">
             Creates a new case-sensitive regular expression.
            
             @param pattern        the regular expression pattern
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.#ctor(System.String,System.Boolean)">
             Creates a new regular expression. The regular expression
             can be either case-sensitive or case-insensitive.
            
             @param pattern        the regular expression pattern
             @param ignoreCase     the character case ignore flag
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.Matcher(System.String)">
             Creates a new matcher for the specified string.
            
             @param str            the string to work with
            
             @return the regular expresion matcher
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.Matcher(Siriona.Library.Text.Parsing.ReaderBuffer)">
             Creates a new matcher for the specified look-ahead
             character input stream.
            
             @param buffer         the character input buffer
            
             @return the regular expresion matcher
            
             @since 1.5
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ToString">
             Returns a string representation of the regular expression.
            
             @return a string representation of the regular expression
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseExpr">
             Parses a regular expression. This method handles the Expr
             production in the grammar (see regexp.grammar).
            
             @return the element representing this expression
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseTerm">
             Parses a regular expression term. This method handles the
             Term production in the grammar (see regexp.grammar).
            
             @return the element representing this term
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseFact">
             Parses a regular expression factor. This method handles the
             Fact production in the grammar (see regexp.grammar).
            
             @return the element representing this factor
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseAtom">
             Parses a regular expression atom. This method handles the
             Atom production in the grammar (see regexp.grammar).
            
             @return the element representing this atom
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseAtomModifier(Siriona.Library.Text.Parsing.RegularExpressions.Element)">
             Parses a regular expression atom modifier. This method handles
             the AtomModifier production in the grammar (see regexp.grammar).
            
             @param elem           the element to modify
            
             @return the modified element
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseCharSet">
             Parses a regular expression character set. This method handles
             the contents of the '[...]' construct in a regular expression.
            
             @return the element representing this character set
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseChar">
             Parses a regular expression character. This method handles
             a single normal character in a regular expression.
            
             @return the element representing this character
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ParseEscapeChar">
             Parses a regular expression character escape. This method
             handles a single character escape in a regular expression.
            
             @return the element representing this character escape
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.FixChar(System.Char)">
             Adjusts a character for inclusion in a string or character
             set element. For case-insensitive regular expressions, this
             transforms the character to lower-case.
            
             @param c               the input character
            
             @return the adjusted character
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ReadNumber">
             Reads a number from the pattern. If the next character isn't a
             numeric character, an exception is thrown. This method reads
             several consecutive numeric characters.
            
             @return the numeric value read
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ReadChar">
             Reads the next character in the pattern. If no next character
             exists, an exception is thrown.
            
             @return the character read
            
             @throws RegExpException if no next character was available in
                         the pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.ReadChar(System.Char)">
             Reads the next character in the pattern. If the character
             wasn't the specified one, an exception is thrown.
            
             @param c              the character to read
            
             @return the character read
            
             @throws RegExpException if the character read didn't match the
                         specified one, or if no next character was
                         available in the pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.PeekChar(System.Int32)">
             Returns a character that has not yet been read from the
             pattern. If the requested position is beyond the end of the
             pattern string, -1 is returned.
            
             @param count          the preview position, from zero (0)
            
             @return the character found, or
                     -1 if beyond the end of the pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExp.CombineElements(System.Collections.Generic.IList{Siriona.Library.Text.Parsing.RegularExpressions.Element})">
             Combines a list of elements. This method takes care to always
             concatenate adjacent string elements into a single string
             element.
            
             @param list           the list with elements
            
             @return the combined element
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException">
             A regular expression exception. This exception is thrown if a
             regular expression couldn't be processed (or "compiled")
             properly.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.0
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.type">
            The error type constant.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.position">
            The error position.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.pattern">
            The regular expression pattern.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.#ctor(Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType,System.Int32,System.String)">
             Creates a new regular expression exception.
            
             @param type           the error type constant
             @param pos            the error position
             @param pattern        the regular expression pattern
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.GetMessage">
             Returns the exception error message.
            
             @return the exception error message
        </member>
        <member name="P:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.Message">
            The message property. This property contains the detailed
            exception error message.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType">
            The error type enumeration.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType.UNEXPECTED_CHARACTER">
            The unexpected character error constant. This error is
            used when a character was read that didn't match the
            allowed set of characters at the given position.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType.UNTERMINATED_PATTERN">
            The unterminated pattern error constant. This error is
            used when more characters were expected in the pattern.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType.UNSUPPORTED_SPECIAL_CHARACTER">
            The unsupported special character error constant. This
            error is used when special regular expression
            characters are used in the pattern, but not supported
            in this implementation.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType.UNSUPPORTED_ESCAPE_CHARACTER">
            The unsupported escape character error constant. This
            error is used when an escape character construct is
            used in the pattern, but not supported in this
            implementation.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RegExpException.ErrorType.INVALID_REPEAT_COUNT">
            The invalid repeat count error constant. This error is
            used when a repetition count of zero is specified, or
            when the minimum exceeds the maximum.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement">
             A regular expression element repeater. The element repeats the
             matches from a specified element, attempting to reach the
             maximum repetition count.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.elem">
            The element to repeat.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.min">
            The minimum number of repetitions.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.max">
            The maximum number of repetitions.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.type">
            The repeat type.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.matchStart">
            The start position of the last set of matches.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.matches">
            A set with all matches starting at matchStart. A match with
            a specific length is reported by a non-zero bit in the bit
            array.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.#ctor(Siriona.Library.Text.Parsing.RegularExpressions.Element,System.Int32,System.Int32,Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.RepeatType)">
             Creats a new element repeater.
            
             @param elem           the element to repeat
             @param min            the minimum count
             @param max            the maximum count
             @param type           the repeat type constant
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.Match(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also be
             specified.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.MatchGreedy(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of the longest possible matching string
             starting at the specified position. The number of matches
             to skip can also be specified.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.MatchReluctant(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of the shortest possible matching string
             starting at the specified position. The number of matches to
             skip can also be specified.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the shortest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.MatchPossessive(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of the maximum number of elements matching
             the string starting at the specified position. This method
             allows no backtracking, i.e. no skips..
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param count          the start count, normally zero (0)
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.FindMatches(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32,System.Int32,System.Int32)">
             Finds all matches and adds the lengths to the matches set.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param length         the match length at the start position
             @param count          the number of sub-elements matched
             @param attempt        the number of match attempts here
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.RepeatType">
            The repeat type constants.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.RepeatType.GREEDY">
            The greedy repeat type constant.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.RepeatType.RELUCTANT">
            The reluctant repeat type constant.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.RepeatElement.RepeatType.POSSESSIVE">
            The possesive repeat type constant.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegularExpressions.StringElement">
             A regular expression string element. This element only matches
             an exact string. Once created, the string element is immutable.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.value">
            The string to match with.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.#ctor(System.Char)">
             Creates a new string element.
            
             @param c              the character to match with
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.#ctor(System.String)">
             Creates a new string element.
            
             @param str            the string to match with
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.GetString">
             Returns the string to be matched.
            
             @return the string to be matched
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.Clone">
             Returns this element as it is immutable.
            
             @return this string element
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.Match(Siriona.Library.Text.Parsing.RegularExpressions.Matcher,Siriona.Library.Text.Parsing.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegularExpressions.StringElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Sequence">
            
             A token sequence. This class contains a list of token ids.
             It is immutable after creation, meaning that no changes
             will be made to an instance after creation.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.0
            
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Sequence.tokens">
            
             The list of token ids in this sequence.
            
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Sequence.repeat">
            
             The repeat flag. If this flag is set, the token
             sequence or some part of it may be repeated infinitely.
            
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.#ctor">
            
             Creates a new empty token sequence. The repeat flag
             will be set to false.
            
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.#ctor(System.Boolean,System.Int32)">
            <summary>
             Creates a new token sequence with a single token.
            </summary>
             <param name="repeat">the repeat flag value</param>
             <param name="token">the token to add</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.#ctor(System.Boolean,System.Int32[])">
            <summary>
             Creates a new token sequence that is a duplicate of
             another sequence. Only a limited number of tokens will
             be copied however. The repeat flag from the original
             will be kept intact.
            </summary>
             <param name="repeat">the maximum number of tokens to copy</param>
             <param name="tokens">the sequence to copy</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.#ctor(System.Boolean,Siriona.Library.Text.Parsing.Sequence)">
            <summary>
             Creates a new token sequence that is a duplicate of
             another sequence. The new value of the repeat flag will
             be used however.
             </summary>
            <param name="repeat">the new repeat flag value</param>
             <param name="seq">the sequence to copy</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.TryGetToken(System.Int32,System.Int32@)">
            <summary>
            Returns a token at a specified position in the sequence.
            </summary>
            <param name="pos">the sequence position.</param>
            <param name="token">The token.</param>
            <returns>the token id found, or null</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.Equals(System.Object)">
            <summary>
             Checks if this sequence is equal to another object.
             Only token sequences with the same tokens in the same
             order will be considered equal. The repeat flag will be
             disregarded.
            </summary>
             <param name="obj">the object to compare with</param>
             <returns> true if the objects are equal, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.Equals(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
             Checks if this sequence is equal to another sequence.
             Only sequences with the same tokens in the same order
             will be considered equal. The repeat flag will be
             disregarded.
            </summary>
             <param name="seq">the sequence to compare with.</param>
             <returns> true if the sequences are equal, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.GetHashCode">
            <summary>
             Returns a hash code for this object.
            </summary>
             <returns> a hash code for this object</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.StartsWith(Siriona.Library.Text.Parsing.Sequence)">
            <summary>
             Checks if this token sequence starts with the tokens from
             another sequence. If the other sequence is longer than this
             sequence, this method will always return false.
            </summary>
             <param name="seq">the token sequence to check.</param>
             <returns> true if this sequence starts with the other, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.IsRepetitive">
            <summary>
             Checks if this token sequence is repetitive. A repetitive
             token sequence is one with the repeat flag set.
            </summary>
             <returns> true if this token sequence is repetitive, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.IsNext(Siriona.Library.Text.Parsing.ParserRuntime)">
            <summary>
             Checks if the next token(s) in the parser matches this
             token sequence.
            </summary>
             <param name="parser">the parser to check.</param>
             <returns> true if the next tokens are in the sequence, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.IsNext(Siriona.Library.Text.Parsing.ParserRuntime,System.Int32)">
            <summary>
             Checks if the next token(s) in the parser matches this
             token sequence.
            </summary>
             <param name="parser">the parser to check.</param>
             <param name="length">the maximum number of tokens to check.</param>
             <returns> true if the next tokens are in the sequence, or
                     false otherwise</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.ToString">
            <summary>
             Returns a string representation of this object.
            </summary>
             <returns> a string representation of this object</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.ToString(Siriona.Library.Text.Parsing.Tokenizer)">
            <summary>
             Returns a string representation of this object.
            </summary>
             <param name="tokenizer">the tokenizer containing the tokens</param>
             <returns> a string representation of this object</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.Concat(System.Int32,Siriona.Library.Text.Parsing.Sequence)">
            <summary>
             Creates a new token sequence that is the concatenation
             of this sequence and another. A maximum length for the
             new sequence is also specified.
            </summary>
             <param name="length">the maximum length of the result</param>
             <param name="sequence">the other sequence</param>
             <returns> the concatenated token sequence</returns>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Sequence.Subsequence(System.Int32)">
            <summary>
             Creates a new token sequence that is a subsequence of
             this one.
            </summary>
             <param name="start">the subsequence start position.</param>
             <returns> the new token subsequence</returns>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Sequence.Length">
            <summary>
             Returns the length of the token sequence.
            </summary>
             <returns> the number of tokens in the sequence</returns>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Token">
             A token node. This class represents a token (i.e. a set of adjacent
             characters) in a parse tree. The tokens are created by a tokenizer,
             that groups characters together into tokens according to a set of
             token patterns.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.pattern">
            The token pattern used for this token.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.image">
            The characters that constitute this token. This is normally
            referred to as the token image.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.startLine">
            The line number of the first character in the token image.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.startColumn">
            The column number of the first character in the token image.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.endLine">
            The line number of the last character in the token image.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.endColumn">
            The column number of the last character in the token image.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.Token.previous">
            The previous token in the list of tokens.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Token.#ctor(Siriona.Library.Text.Parsing.TokenPattern,System.String,System.Int32,System.Int32)">
             Creates a new token.
            
             @param pattern        the token pattern
             @param image          the token image (i.e. characters)
             @param line           the line number of the first character
             @param col            the column number of the first character
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Token.ToString">
             Returns a string representation of this token.
            
             @return a string representation of this token
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Token.ToShortString">
             Returns a short string representation of this token. The
             string will only contain the token image and possibly the
             token pattern name.
            
             @return a short string representation of this token
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.Name">
             The node name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.StartLine">
             The line number property of the first character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the first child.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.StartColumn">
             The column number property of the first character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the first child.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.EndLine">
             The line number property of the last character in this node
             (read-only). If the node has child elements, this value
             will be fetched from the last child.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.EndColumn">
             The column number property of the last character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the last child.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.Image">
             The token image property (read-only). The token image
             consists of the input characters matched to form this
             token.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.Children">
            <summary>
            Get children.
            </summary>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.IsToken">
            <summary>
            Gets a value indicating whether this instance is token.
            </summary>
            <value><c>true</c> if this instance is token; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.Pattern">
            The token pattern property (read-only).
        </member>
        <member name="P:Siriona.Library.Text.Parsing.Token.Previous">
             The previous token property. If the token list feature is
             used in the tokenizer, all tokens found will be chained
             together in a double-linked list. The previous token may be
             a token that was ignored during the parsing, due to it's
             ignore flag being set. If there is no previous token or if
             the token list feature wasn't used in the tokenizer (the
             default), the previous token will always be null.
            
             @see #Next
             @see Tokenizer#UseTokenList
            
             @since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TokenMatcher">
            A token pattern matcher. This class is the base class for the
            various types of token matchers that exist. The token matcher
            checks for matches with the tokenizer buffer, and maintains the
            state of the last match.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenMatcher.patterns">
            The array of token patterns.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenMatcher.ignoreCase">
            The ignore character case flag.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatcher.#ctor(System.Boolean)">
             Creates a new token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatcher.Match(Siriona.Library.Text.Parsing.ReaderBuffer,Siriona.Library.Text.Parsing.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatcher.GetPattern(System.Int32)">
             Returns the token pattern with the specified id. Only
             token patterns handled by this matcher can be returned.
            
             @param id         the token pattern id
            
             @return the token pattern found, or
                     null if not found
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatcher.AddPattern(Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a string token pattern to this matcher.
            
             @param pattern        the pattern to add
            
             @throws Exception if the pattern couldn't be added to the matcher
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatcher.ToString">
             Returns a string representation of this matcher. This will
             contain all the token patterns.
            
             @return a detailed string representation of this matcher
        </member>
        <member name="T:Siriona.Library.Text.Parsing.StringDFAMatcher">
            A token pattern matcher using a DFA for string tokens. This
            class only supports string tokens and must be complemented
            with another matcher for regular expressions. Internally it
            uses a DFA to provide high performance.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.StringDFAMatcher.automaton">
            The deterministic finite state automaton used for
            matching.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.StringDFAMatcher.#ctor(System.Boolean)">
             Creates a new string token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.StringDFAMatcher.AddPattern(Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a string token pattern to this matcher.
            
             @param pattern        the pattern to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.StringDFAMatcher.Match(Siriona.Library.Text.Parsing.ReaderBuffer,Siriona.Library.Text.Parsing.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFAMatcher">
            A token pattern matcher using a NFA for both string and
            regular expression tokens. This class has limited support for
            regular expressions and must be complemented with another
            matcher providing full regular expression support. Internally
            it uses a NFA to provide high performance and low memory
            usage.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAMatcher.automaton">
            The non-deterministic finite state automaton used for
            matching.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAMatcher.#ctor(System.Boolean)">
             Creates a new NFA token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAMatcher.AddPattern(Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a token pattern to this matcher.
            
             @param pattern        the pattern to add
            
             @throws Exception if the pattern couldn't be added to the matcher
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAMatcher.Match(Siriona.Library.Text.Parsing.ReaderBuffer,Siriona.Library.Text.Parsing.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.RegExpMatcher">
            A token pattern matcher for complex regular expressions. This
            class only supports regular expression tokens and must be
            complemented with another matcher for string tokens.
            Internally it uses the Grammatica RE package for high
            performance or the native java.util.regex package for maximum
            compatibility.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.RegExpMatcher.regExps">
            The regular expression handlers.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegExpMatcher.#ctor(System.Boolean)">
             Creates a new regular expression token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegExpMatcher.AddPattern(Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a regular expression token pattern to this matcher.
            
             @param pattern        the pattern to add
            
             @throws Exception if the pattern couldn't be added to the matcher
        </member>
        <member name="M:Siriona.Library.Text.Parsing.RegExpMatcher.Match(Siriona.Library.Text.Parsing.ReaderBuffer,Siriona.Library.Text.Parsing.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.REHandler">
            The regular expression handler base class.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.REHandler.Match(Siriona.Library.Text.Parsing.ReaderBuffer)">
             Checks if the start of the input stream matches this
             regular expression.
            
             @param buffer         the input buffer to check
            
             @return the longest match found, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.GrammaticaRE">
            The Grammatica built-in regular expression handler.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.GrammaticaRE.regExp">
            The compiled regular expression.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.GrammaticaRE.matcher">
            The regular expression matcher to use.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.GrammaticaRE.#ctor(System.String,System.Boolean)">
             Creates a new Grammatica regular expression handler.
            
             @param regex          the regular expression text
             @param ignoreCase      the character case ignore flag
            
             @throws Exception if the regular expression contained
                         invalid syntax
        </member>
        <member name="M:Siriona.Library.Text.Parsing.GrammaticaRE.Match(Siriona.Library.Text.Parsing.ReaderBuffer)">
             Checks if the start of the input stream matches this
             regular expression.
            
             @param buffer         the input buffer to check
            
             @return the longest match found, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.SystemRE">
            The .NET system regular expression handler.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.SystemRE.reg">
            The parsed regular expression.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.SystemRE.#ctor(System.String,System.Boolean)">
             Creates a new .NET system regular expression handler.
            
             @param regex          the regular expression text
             @param ignoreCase      the character case ignore flag
            
             @throws Exception if the regular expression contained
                         invalid syntax
        </member>
        <member name="M:Siriona.Library.Text.Parsing.SystemRE.Match(Siriona.Library.Text.Parsing.ReaderBuffer)">
             Checks if the start of the input stream matches this
             regular expression.
            
             @param buffer         the input buffer to check
            
             @return the longest match found, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.Tokenizer`1">
             <summary>
             A character stream tokenizer. This class groups the characters read
             from the stream together into tokens ("words"). The grouping is
             controlled by token patterns that contain either a fixed string to
            search for, or a regular expression. If the stream of characters
            don't match any of the token patterns, a parse exception is thrown.
             </summary>
             <typeparam name="TToken">The type of the token.</typeparam>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer`1.AddPattern(`0,Siriona.Library.Text.Parsing.PatternType,System.String)">
            <summary>
            Adds the pattern.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Siriona.Library.Text.Parsing.Tokenizer`1.AddIgnorePattern(`0,Siriona.Library.Text.Parsing.PatternType,System.String)">
            <summary>
            Adds the ignore pattern.
            </summary>
            <param name="id">The id.</param>
            <param name="type">The type.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TokenMatch">
             The token match status. This class contains logic to ensure that
             only the longest match is considered. It also prefers lower token
             pattern identifiers if two matches have the same length.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenMatch.length">
            The length of the longest match.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenMatch.pattern">
            The pattern in the longest match.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatch.Clear">
            Clears the current match information.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenMatch.Update(System.Int32,Siriona.Library.Text.Parsing.TokenPattern)">
             Updates this match with new values. The new values will only
             be considered if the length is longer than any previous match
             found.
            
             @param length         the matched length
             @param pattern        the matched pattern
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenMatch.Length">
            The length of the longest match found (read-only).
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenMatch.Pattern">
            The token pattern for the longest match found (read-only).
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TokenNFA">
             A non-deterministic finite state automaton (NFA) for matching
             tokens. It supports both fixed strings and simple regular
             expressions, but should perform similar to a DFA due to highly
             optimized data structures and tuning. The memory footprint during
             matching should be near zero, since no heap memory is allocated
             unless the pre-allocated queues need to be enlarged. The NFA also
             does not use recursion, but iterates in a loop instead.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenNFA.initialChar">
            The initial state lookup table, indexed by the first ASCII
            character. This array is used to for speed optimizing the
            first step in the match, since the initial state would
            otherwise have a long list of transitions to consider.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenNFA.initial">
            The initial state. This state contains any transitions not
            already stored in the initial text state array, i.e. non-ASCII
            or complex transitions (such as regular expressions).
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenNFA.queue">
            The NFA state queue to use.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenNFA.AddTextMatch(System.String,System.Boolean,Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a string match to this automaton. New states and
             transitions will be added to extend this automaton to support
             the specified string.
            
             @param str            the string to match
             @param ignoreCase     the case-insensitive match flag
             @param value          the match value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenNFA.AddRegExpMatch(System.String,System.Boolean,Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a regular expression match to this automaton. New states
             and transitions will be added to extend this automaton to
             support the specified string. Note that this method only
             supports a subset of the full regular expression syntax, so
             a more complete regular expression library must also be
             provided.
            
             @param pattern        the regular expression string
             @param ignoreCase     the case-insensitive match flag
             @param value          the match value
            
             @throws RegExpException if the regular expression parsing
                         failed
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenNFA.Match(Siriona.Library.Text.Parsing.ReaderBuffer,Siriona.Library.Text.Parsing.TokenMatch)">
             Checks if this NFA matches the specified input text. The
             matching will be performed from position zero (0) in the
             buffer. This method will not read any characters from the
             stream, just peek ahead.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @return the number of characters matched, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFAState">
            An NFA state. The NFA consists of a series of states, each
            having zero or more transitions to other states.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAState.value">
            The optional state value (if it is a final state).
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAState.incoming">
            The incoming transitions to this state.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAState.outgoing">
            The outgoing transitions from this state.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAState.epsilonOut">
            The outgoing epsilon transitions flag.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.HasTransitions">
             Checks if this state has any incoming or outgoing
             transitions.
            
             @return true if this state has transitions, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.IsAsciiOutgoing">
             Checks if all outgoing transitions only match ASCII
             characters.
            
             @return true if all transitions are ASCII-only, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.AddIn(Siriona.Library.Text.Parsing.NFATransition)">
             Adds a new incoming transition.
            
             @param trans          the transition to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.AddOut(System.Char,System.Boolean,Siriona.Library.Text.Parsing.NFAState)">
             Adds a new outgoing character transition. If the target
             state specified was null and an identical transition
             already exists, it will be reused and its target returned.
            
             @param ch             he character to match
             @param ignoreCase     the case-insensitive flag
             @param state          the target state, or null
            
             @return the transition target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.AddOut(Siriona.Library.Text.Parsing.NFATransition)">
             Adds a new outgoing transition.
            
             @param trans          the transition to add
            
             @return the transition target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.MergeInto(Siriona.Library.Text.Parsing.NFAState)">
             Merges all the transitions in this state into another
             state.
            
             @param state      the state to merge into
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.FindUniqueCharTransition(System.Char)">
             Finds a unique character transition if one exists. The
             transition must be the only matching single character
             transition and no other transitions may reach the same
             state.
            
             @param ch             the character to search for
            
             @return the unique transition state found, or
                     null if not found
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.MatchTransitions(System.Char,Siriona.Library.Text.Parsing.NFAStateQueue,System.Boolean)">
             Attempts a match on each of the transitions leading from
             this state. If a match is found, its state will be added
             to the queue. If the initial match flag is set, epsilon
             transitions will also be matched (and their targets called
             recursively).
            
             @param ch         the character to match
             @param queue      the state queue
             @param initial    the initial match flag
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAState.MatchEmpty(Siriona.Library.Text.Parsing.NFAStateQueue)">
             Adds all the epsilon transition targets to the specified
             queue.
            
             @param queue      the state queue
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFATransition">
            An NFA state transition. A transition checks a single
            character of input an determines if it is a match. If a match
            is encountered, the NFA should move forward to the transition
            state.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFATransition.state">
            The target state of the transition.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFATransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new state transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFATransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFATransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFATransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFAEpsilonTransition">
            The special epsilon transition. This transition matches the
            empty input, i.e. it is an automatic transition that doesn't
            read any input. As such, it returns false in the match method
            and is handled specially everywhere.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAEpsilonTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new epsilon transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAEpsilonTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAEpsilonTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAEpsilonTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFACharTransition">
            A single character match transition.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFACharTransition.match">
            The character to match.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharTransition.#ctor(System.Char,Siriona.Library.Text.Parsing.NFAState)">
             Creates a new character transition.
            
             @param match          the character to match
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFACharRangeTransition">
            A character range match transition. Used for user-defined
            character sets in regular expressions.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFACharRangeTransition.inverse">
            The inverse match flag.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFACharRangeTransition.ignoreCase">
            The case-insensitive match flag.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFACharRangeTransition.contents">
            The character set content. This array may contain either
            range objects or Character objects.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.#ctor(System.Boolean,System.Boolean,Siriona.Library.Text.Parsing.NFAState)">
             Creates a new character range transition.
            
             @param inverse        the inverse match flag
             @param ignoreCase     the case-insensitive match flag
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.AddCharacter(System.Char)">
             Adds a single character to this character set.
            
             @param c              the character to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.AddRange(System.Char,System.Char)">
             Adds a character range to this character set.
            
             @param min            the minimum character value
             @param max            the maximum character value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.AddContent(System.Object)">
             Adds an object to the character set content array.
            
             @param obj            the object to add
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFACharRangeTransition.Range">
            A character range class.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFACharRangeTransition.Range.min">
            The minimum character value.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFACharRangeTransition.Range.max">
            The maximum character value.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.Range.#ctor(System.Char,System.Char)">
             Creates a new character range.
            
             @param min        the minimum character value
             @param max        the maximum character value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.Range.IsAscii">
             Checks if this range only matches ASCII characters
            
             @return true if this range only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFACharRangeTransition.Range.Inside(System.Char)">
             Checks if the specified character is inside the range.
            
             @param c          the character to check
            
             @return true if the character is in the range, or
                     false otherwise
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFADotTransition">
            The dot ('.') character set transition. This transition
            matches a single character that is not equal to a newline
            character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADotTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new dot character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADotTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADotTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADotTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFADigitTransition">
            The digit character set transition. This transition matches a
            single numeric character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADigitTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new digit character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADigitTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADigitTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFADigitTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFANonDigitTransition">
            The non-digit character set transition. This transition
            matches a single non-numeric character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonDigitTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new non-digit character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonDigitTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonDigitTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonDigitTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFAWhitespaceTransition">
            The whitespace character set transition. This transition
            matches a single whitespace character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWhitespaceTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new whitespace character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWhitespaceTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWhitespaceTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWhitespaceTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFANonWhitespaceTransition">
            The non-whitespace character set transition. This transition
            matches a single non-whitespace character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWhitespaceTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new non-whitespace character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWhitespaceTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWhitespaceTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWhitespaceTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFAWordTransition">
            The word character set transition. This transition matches a
            single word character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWordTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new word character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWordTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWordTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAWordTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFANonWordTransition">
            The non-word character set transition. This transition matches
            a single non-word character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWordTransition.#ctor(Siriona.Library.Text.Parsing.NFAState)">
             Creates a new non-word character set transition.
            
             @param state          the target state
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWordTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWordTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFANonWordTransition.Copy(Siriona.Library.Text.Parsing.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:Siriona.Library.Text.Parsing.NFAStateQueue">
             An NFA state queue. This queue is used during processing to
             keep track of the current and subsequent NFA states. The
             current state is read from the beginning of the queue, and new
             states are added at the end. A marker index is used to
             separate the current from the subsequent states.
            
             The queue implementation is optimized for quick removal at the
             beginning and addition at the end. It will attempt to use a
             fixed-size array to store the whole queue, and moves the data
             in this array only when absolutely needed. The array is also
             enlarged automatically if too many states are being processed
             at a single time.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAStateQueue.queue">
            The state queue array. Will be enlarged as needed.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAStateQueue.first">
            The position of the first entry in the queue (inclusive).
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAStateQueue.last">
            The position just after the last entry in the queue
            (exclusive).
        </member>
        <member name="F:Siriona.Library.Text.Parsing.NFAStateQueue.mark">
            The current queue mark position.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAStateQueue.Clear">
            Clears this queue. This operation is fast, as it just
            resets the queue position indices.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAStateQueue.MarkEnd">
            Marks the end of the queue. This means that the next entry
            added to the queue will be marked (when it becomes the
            first in the queue). This operation is fast.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAStateQueue.RemoveFirst">
             Removes and returns the first entry in the queue. This
             operation is fast, since it will only update the index of
             the first entry in the queue.
            
             @return the previous first entry in the queue
        </member>
        <member name="M:Siriona.Library.Text.Parsing.NFAStateQueue.AddLast(Siriona.Library.Text.Parsing.NFAState)">
             Adds a new entry at the end of the queue. This operation
             is mostly fast, unless all the allocated queue space has
             already been used.
            
             @param state          the state to add
        </member>
        <member name="P:Siriona.Library.Text.Parsing.NFAStateQueue.Empty">
            The empty queue property (read-only).
        </member>
        <member name="P:Siriona.Library.Text.Parsing.NFAStateQueue.Marked">
            The marked first entry property (read-only). This is set
            to true if the first entry in the queue has been marked.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.PatternType">
            The pattern type enumeration.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.PatternType.String">
            The string pattern type is used for tokens that only
            match an exact string.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.PatternType.RegularExpression">
            The regular expression pattern type is used for tokens
            that match a regular expression.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TokenPattern">
             A token pattern. This class contains the definition of a token
             (i.e. it's pattern), and allows testing a string against this
             pattern. A token pattern is uniquely identified by an integer id,
             that must be provided upon creation.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.id">
            The token pattern identity.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.name">
            The token pattern name.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.type">
            The token pattern type.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.pattern">
            The token pattern.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.error">
             The token error flag. If this flag is set, it means that an
             error should be reported if the token is found. The error
             message is present in the errorMessage variable.
            
             @see #errorMessage
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.errorMessage">
             The token error message. This message will only be set if the
             token error flag is set.
            
             @see #error
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.ignore">
             The token ignore flag. If this flag is set, it means that the
             token should be ignored if found. If an ignore message is
             present in the ignoreMessage variable, it will also be reported
             as a warning.
            
             @see #ignoreMessage
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.ignoreMessage">
             The token ignore message. If this message is set when the token
             ignore flag is also set, a warning message will be printed if
             the token is found.
            
             @see #ignore
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenPattern.debugInfo">
            The optional debug information message. This is normally set
            when the token pattern is analyzed by the tokenizer.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenPattern.#ctor(System.Int32,System.String,Siriona.Library.Text.Parsing.PatternType,System.String)">
             Creates a new token pattern.
            
             @param id             the token pattern id
             @param name           the token pattern name
             @param type           the token pattern type
             @param pattern        the token pattern
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenPattern.ToString">
             Returns a string representation of this object.
            
             @return a token pattern string representation
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenPattern.ToShortString">
             Returns a short string representation of this object.
            
             @return a short string representation of this object
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.Id">
             The token pattern identity property (read-only). This
             property contains the unique token pattern identity value.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.Name">
             The token pattern name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.Type">
             The token pattern type property (read-only).
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.Pattern">
             The token pattern property (read-only). This property
             contains the actual pattern (string or regexp) which have
             to be matched.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.Error">
             The error flag property. If this property is true, the
             token pattern corresponds to an error token and an error
             should be reported if a match is found. When setting this
             property to true, a default error message is created if
             none was previously set.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.ErrorMessage">
             The token error message property. The error message is
             printed whenever the token is matched. Setting the error
             message property also sets the error flag to true.
            
             @see #Error
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.Ignore">
             The ignore flag property. If this property is true, the
             token pattern corresponds to an ignore token and should be
             skipped if a match is found.
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.IgnoreMessage">
             The token ignore message property. The ignore message is
             printed whenever the token is matched. Setting the ignore
             message property also sets the ignore flag to true.
            
             @see #Ignore
            
             @since 1.5
        </member>
        <member name="P:Siriona.Library.Text.Parsing.TokenPattern.DebugInfo">
             The token debug info message property. This is normally be
             set when the token pattern is analyzed by the tokenizer.
            
             @since 1.5
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TokenRegExpParser">
             A regular expression parser. The parser creates an NFA for the
             regular expression having a single start and acceptance states.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.pattern">
            The regular expression pattern.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.ignoreCase">
            The character case ignore flag.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.pos">
            The current position in the pattern. This variable is used by
            the parsing methods.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.start">
            The start NFA state for this regular expression.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.end">
            The end NFA state for this regular expression.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.stateCount">
            The number of states found.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.transitionCount">
            The number of transitions found.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenRegExpParser.epsilonCount">
            The number of epsilon transitions found.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.#ctor(System.String)">
             Creates a new case-sensitive regular expression parser. Note
             that this will trigger the parsing of the regular expression.
            
             @param pattern        the regular expression pattern
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.#ctor(System.String,System.Boolean)">
             Creates a new regular expression parser. The regular
             expression can be either case-sensitive or case-insensitive.
             Note that this will trigger the parsing of the regular
             expression.
            
             @param pattern        the regular expression pattern
             @param ignoreCase     the character case ignore flag
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.GetDebugInfo">
             Returns the debug information for the generated NFA.
            
             @return the debug information for the generated NFA
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.UpdateStats(Siriona.Library.Text.Parsing.NFAState,System.Collections.Hashtable)">
             Updates the statistical counters for the NFA generated.
            
             @param state          the current state to visit
             @param visited        the lookup map of visited states
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseExpr(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression. This method handles the Expr
             production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseTerm(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression term. This method handles the
             Term production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseFact(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression factor. This method handles the
             Fact production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseAtom(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression atom. This method handles the
             Atom production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseAtomModifier(Siriona.Library.Text.Parsing.NFAState,Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression atom modifier. This method handles
             the AtomModifier production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
             @param end            the terminal NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseCharSet(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression character set. This method handles
             the contents of the '[...]' construct in a regular expression.
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseChar(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression character. This method handles
             a single normal character in a regular expression.
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ParseEscapeChar(Siriona.Library.Text.Parsing.NFAState)">
             Parses a regular expression character escape. This method
             handles a single character escape in a regular expression.
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ReadEscapeChar">
             Reads a regular expression character escape. This method
             handles a single character escape in a regular expression.
            
             @return the character read
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ReadNumber">
             Reads a number from the pattern. If the next character isn't a
             numeric character, an exception is thrown. This method reads
             several consecutive numeric characters.
            
             @return the numeric value read
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ReadChar">
             Reads the next character in the pattern. If no next character
             exists, an exception is thrown.
            
             @return the character read
            
             @throws RegExpException if no next character was available in
                         the pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.ReadChar(System.Char)">
             Reads the next character in the pattern. If the character
             wasn't the specified one, an exception is thrown.
            
             @param c              the character to read
            
             @return the character read
            
             @throws RegExpException if the character read didn't match the
                         specified one, or if no next character was
                         available in the pattern string
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenRegExpParser.PeekChar(System.Int32)">
             Returns a character that has not yet been read from the
             pattern. If the requested position is beyond the end of the
             pattern string, -1 is returned.
            
             @param count          the preview position, from zero (0)
            
             @return the character found, or
                     -1 if beyond the end of the pattern string
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TokenStringDFA">
             A deterministic finite state automaton for matching exact strings.
             It uses a sorted binary tree representation of the state
             transitions in order to enable quick matches with a minimal memory
             footprint. It only supports a single character transition between
             states, but may be run in an all case-insensitive mode.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenStringDFA.ascii">
            The lookup table for root states, indexed by the first ASCII
            character. This array is used to for speed optimizing the
            first step in the match.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TokenStringDFA.nonAscii">
            The automaton state transition tree for non-ASCII characters.
            Each transition from one state to another is added to the tree
            with the corresponding character.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenStringDFA.#ctor">
            Creates a new empty string automaton.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenStringDFA.AddMatch(System.String,System.Boolean,Siriona.Library.Text.Parsing.TokenPattern)">
             Adds a string match to this automaton. New states and
             transitions will be added to extend this automaton to
             support the specified string.
            
             @param str              the string to match
             @param caseInsensitive  the case-insensitive flag
             @param value            the match value
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenStringDFA.Match(Siriona.Library.Text.Parsing.ReaderBuffer,System.Boolean)">
             Checks if the automaton matches an input stream. The
             matching will be performed from a specified position. This
             method will not read any characters from the stream, just
             peek ahead. The comparison can be done either in
             case-sensitive or case-insensitive mode.
            
             @param input            the input stream to check
             @param pos              the starting position
             @param caseInsensitive  the case-insensitive flag
            
             @return the match value, or
                     null if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TokenStringDFA.ToString">
             Returns a detailed string representation of this automaton.
            
             @return a detailed string representation of this automaton
        </member>
        <member name="T:Siriona.Library.Text.Parsing.DFAState">
             An automaton state. This class represents a state in the DFA
             graph.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.DFAState.value">
            The token pattern matched at this state.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.DFAState.tree">
            The automaton state transition tree. Each transition from one
            state to another is added to the tree with the corresponding
            character.
        </member>
        <member name="T:Siriona.Library.Text.Parsing.TransitionTree">
             An automaton state transition tree. This class contains a
             binary search tree for the automaton transitions from one
             state to another. All transitions are linked to a single
             character.
            
             @author   Per Cederberg, per at percederberg dot net
             @version  1.5
             @since    1.5
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TransitionTree.value">
            The transition character. If this value is set to the zero
            character ('\0'), this tree is empty.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TransitionTree.state">
            The transition target state.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TransitionTree.left">
            The left subtree.
        </member>
        <member name="F:Siriona.Library.Text.Parsing.TransitionTree.right">
            The right subtree.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TransitionTree.#ctor">
            Creates a new empty automaton transition tree.
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TransitionTree.Find(System.Char,System.Boolean)">
             Finds an automaton state from the specified transition
             character. This method searches this transition tree for a
             matching transition. The comparison can optionally be done
             with a lower-case conversion of the character.
            
             @param c              the character to search for
             @param lowerCase      the lower-case conversion flag
            
             @return the automaton state found, or
                     null if no transition exists
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TransitionTree.Add(System.Char,System.Boolean,Siriona.Library.Text.Parsing.DFAState)">
             Adds a transition to this tree. If the lower-case flag is
             set, the character will be converted to lower-case before
             being added.
            
             @param c              the character to transition for
             @param lowerCase      the lower-case conversion flag
             @param state          the state to transition to
        </member>
        <member name="M:Siriona.Library.Text.Parsing.TransitionTree.PrintTo(System.Text.StringBuilder,System.String)">
             Prints the automaton tree to the specified string buffer.
            
             @param buffer         the string buffer
             @param indent         the current indentation
        </member>
        <member name="T:Siriona.Library.Text.SimplifyOptions">
            <summary>
            Represents the options for a simplification operation
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.SimplifyOptions.None">
            <summary>
            Copies the input string
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.SimplifyOptions.RemoveAccents">
            <summary>
            Remove accents from the string.
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.SimplifyOptions.ExpandLigatures">
            <summary>
            Expand ligatures in the string.
            </summary>
        </member>
        <member name="F:Siriona.Library.Text.SimplifyOptions.All">
            <summary>
            Apply all simplifications
            </summary>
        </member>
        <member name="T:Siriona.Library.Text.SimplifyOptionsExtensionMethods">
            <summary>
            Provides extension methods for <see cref="T:Siriona.Library.Text.SimplifyOptions"/> values.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.Count(Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Counts the number of flags set.
            </summary>
            <param name="flags">The flags.</param>
            <returns>The number of flags set.</returns>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.Contains(Siriona.Library.Text.SimplifyOptions,Siriona.Library.Text.SimplifyOptions[])">
            <summary>
            Determines whether this instance contains at least one of the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="testFlags">The test flags.</param>
            <returns>
                  <c>true</c> if the instance contains at least one of the specified flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.AddIf(Siriona.Library.Text.SimplifyOptions,System.Boolean,Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Adds the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, adds the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.RemoveIf(Siriona.Library.Text.SimplifyOptions,System.Boolean,Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Removes the specified flags if the specified condition is <c>true</c>.
            </summary>
            <param name="flags">The flags.</param>
            <param name="condition">if set to <c>true</c>, removes the flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.Add(Siriona.Library.Text.SimplifyOptions,Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Adds the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.Remove(Siriona.Library.Text.SimplifyOptions,Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Removes the specified flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="newFlags">The new flags.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:Siriona.Library.Text.SimplifyOptionsExtensionMethods.Differences(Siriona.Library.Text.SimplifyOptions,Siriona.Library.Text.SimplifyOptions)">
            <summary>
            Retrieves differences between two sets of flags.
            </summary>
            <param name="currentFlags">The current flags.</param>
            <param name="previousFlags">The previous flags.</param>
            <returns>The added and removed flags.</returns>
        </member>
        <member name="T:Siriona.Library.Text.TemplateResolver">
            <summary>
            Represents a generic template resolver, filling a resource with the values of an object properties.
            </summary>
        </member>
        <member name="M:Siriona.Library.Text.TemplateResolver.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.TemplateResolver"/> class.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="itemPattern">The customizable items pattern, as a regular expression.</param>
        </member>
        <member name="M:Siriona.Library.Text.TemplateResolver.#ctor(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.TemplateResolver"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="itemPattern">The customizable items pattern, as a regular expression.</param>
        </member>
        <member name="M:Siriona.Library.Text.TemplateResolver.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Text.TemplateResolver"/> class.
            </summary>
            <param name="baseType">The type used to resolve resources.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="itemPattern">The customizable items pattern, as a regular expression.</param>
        </member>
        <member name="M:Siriona.Library.Text.TemplateResolver.Resolve(System.Object)">
            <summary>
            Resolves the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The resolved version of the template for the given item.</returns>
        </member>
        <member name="M:Siriona.Library.Text.TemplateResolver.ResolveValue(System.Object,System.String)">
            <summary>
            Resolves the value.
            </summary>
            <param name="item">The item.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>An object representing the property value for the given item.</returns>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskFactory`1">
            <summary>
            Provides methods to create tasks.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.#ctor(Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory`1"/> class.
            </summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.#ctor(Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory`1"/> class.
            </summary>
            <param name="creationOptions">The creation options.</param>
            <param name="continuationOptions">The continuation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.#ctor(Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskFactory`1"/> class.
            </summary>
            <param name="scheduler">The scheduler.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="continuationOptions">The continuation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}[]})">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0}[],``0})">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}[]},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0}[],``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}[]},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0}[],``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}[]},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when all.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0}[],``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when all.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}})">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0})">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny(Siriona.Library.Threading.Tasks.Task{`0}[],System.Action{Siriona.Library.Threading.Tasks.Task{`0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when any.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(Siriona.Library.Threading.Tasks.Task{`0}[],Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler,Siriona.Library.Threading.StackCrawlMark@)">
            <summary>
            Continues the when any.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="tasks">The tasks.</param>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <param name="stackMark">The stack mark.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,Siriona.Library.Func{System.IAsyncResult,`0})">
            <summary>
            Froms the async.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync(Siriona.Library.Func{System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},System.Object)">
            <summary>
            Froms the async.
            </summary>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,Siriona.Library.Func{System.IAsyncResult,`0},Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Froms the async.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync(Siriona.Library.Func{System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Froms the async.
            </summary>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync``1(Siriona.Library.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},``0,System.Object)">
            <summary>
            Froms the async.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,Siriona.Library.Func{System.IAsyncResult,`0},Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Froms the async.
            </summary>
            <param name="asyncResult">The async result.</param>
            <param name="endMethod">The end method.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync``1(Siriona.Library.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},``0,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Froms the async.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync``2(Siriona.Library.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
            <summary>
            Froms the async.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync``2(Siriona.Library.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},``0,``1,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Froms the async.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync``3(Siriona.Library.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
            <summary>
            Froms the async.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TArg3">The type of the arg3.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.FromAsync``3(Siriona.Library.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},Siriona.Library.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Froms the async.
            </summary>
            <typeparam name="TArg1">The type of the arg1.</typeparam>
            <typeparam name="TArg2">The type of the arg2.</typeparam>
            <typeparam name="TArg3">The type of the arg3.</typeparam>
            <param name="beginMethod">The begin method.</param>
            <param name="endMethod">The end method.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.StartNew(Siriona.Library.Func{`0})">
            <summary>
            Starts the new.
            </summary>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.StartNew(Siriona.Library.Func{`0},Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts the new.
            </summary>
            <param name="function">The function.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.StartNew(Siriona.Library.Func{System.Object,`0},System.Object)">
            <summary>
            Starts the new.
            </summary>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.StartNew(Siriona.Library.Func{`0},Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts the new.
            </summary>
            <param name="function">The function.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.StartNew(Siriona.Library.Func{System.Object,`0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Starts the new.
            </summary>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskFactory`1.StartNew(Siriona.Library.Func{System.Object,`0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Starts the new.
            </summary>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory`1.ContinuationOptions">
            <summary>
            Gets the continuation options.
            </summary>
            <value>The continuation options.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory`1.CreationOptions">
            <summary>
            Gets the creation options.
            </summary>
            <value>The creation options.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory`1.DefaultScheduler">
            <summary>
            Gets the default scheduler.
            </summary>
            <value>The default scheduler.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.TaskFactory`1.Scheduler">
            <summary>
            Gets the scheduler.
            </summary>
            <value>The scheduler.</value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.Task`1">
            <summary>
            Represetns a task that returns a result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task`1"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.#ctor(Siriona.Library.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task`1"/> class.
            </summary>
            <param name="function">The function.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.#ctor(Siriona.Library.Func{`0},Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task`1"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="creationOptions">The creation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.#ctor(Siriona.Library.Func{System.Object,`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task`1"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.#ctor(Siriona.Library.Func{System.Object,`0},System.Object,Siriona.Library.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.Task`1"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="state">The state.</param>
            <param name="creationOptions">The creation options.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task{`0}})">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},Siriona.Library.Threading.Tasks.Task{``0}})">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0})">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task{`0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task{`0}},Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0},Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},Siriona.Library.Threading.Tasks.Task{``0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},Siriona.Library.Threading.Tasks.Task{``0}},Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith(System.Action{Siriona.Library.Threading.Tasks.Task{`0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <param name="continuationAction">The continuation action.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},Siriona.Library.Threading.Tasks.Task{``0}},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.Task`1.ContinueWith``1(Siriona.Library.Func{Siriona.Library.Threading.Tasks.Task{`0},``0},Siriona.Library.Threading.Tasks.TaskContinuationOptions,Siriona.Library.Threading.Tasks.TaskScheduler)">
            <summary>
            Continues the with.
            </summary>
            <typeparam name="TNewResult">The type of the new result.</typeparam>
            <param name="continuationFunction">The continuation function.</param>
            <param name="continuationOptions">The continuation options.</param>
            <param name="scheduler">The scheduler.</param>
            <returns></returns>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task`1.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task`1.Factory">
            <summary>
            Gets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.Task`1.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskSchedulerException">
            <summary>
            The exception that occures in the scheduler.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskSchedulerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskSchedulerException"/> class.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskSchedulerException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskSchedulerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskSchedulerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.TaskSchedulerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.TaskStatus">
            <summary>
            Represents the status of a task.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.Created">
            <summary>
            The task has been created.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary>
            The task is waiting for activation.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task is waiting to run.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task is waiting for children to complete.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task ran to completion.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task has been canceled.
            </summary>
        </member>
        <member name="F:Siriona.Library.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task has faulted.
            </summary>
        </member>
        <member name="T:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs">
            <summary>
             Provides data for the event that is raised when a faulted Task's exception goes unobserved.
            </summary>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(Siriona.Library.Threading.Tasks.AggregateException)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
            <summary>
            Sets the exception as observed.
            </summary>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
            <summary>
            Gets a value indicating whether this <see cref="T:Siriona.Library.Threading.Tasks.UnobservedTaskExceptionEventArgs"/> is observed.
            </summary>
            <value><c>true</c> if observed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Siriona.Library.Time">
            <summary>
            Provides time utility functions.
            </summary>
        </member>
        <member name="F:Siriona.Library.Time.OneDay">
            <summary>Duration of one day.</summary>
        </member>
        <member name="M:Siriona.Library.Time.IsValidFileTime(System.DateTime)">
            <summary>
            Determines whether the specified time is a valid file time.
            </summary>
            <param name="time">The time.</param>
            <returns>
            	<c>true</c> if the specified time is a valid file time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Time.GetYearTimeSpan(System.Int32)">
            <summary>
            Creates a one-year-long TimeSpan
            </summary>
            <param name="year">Base year of the TimeSpan</param>
            <returns>The One-year-long TimeSpan</returns>
        </member>
        <member name="M:Siriona.Library.Time.GetMonthTimeSpan(System.Int32,System.Int32)">
            <summary>
            Creates a one-month-long TimeSpan
            </summary>
            <param name="year">The base year of the TimeSpan</param>
            <param name="month">The base month of the TimeSpan</param>
            <returns>A One-month-long TimeSpan for the given year and month</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsBetween(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Tests if given date is within to times of the days.
            </summary>
            <param name="now">Date to test.</param>
            <param name="start">Begining of the interval.</param>
            <param name="end">End of the interval.</param>
            <returns>Returns <c>true</c> if the given time is in the hour following start time.</returns>
            <remarks>
            The order of start and end matters. If start is greater than end,
            the date is considered as between start and end if it is between start and midnight
            or between midnight and end.
            </remarks>
        </member>
        <member name="M:Siriona.Library.Time.IsInInterval(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Tests if given date follows start time of less than duration.
            </summary>
            <param name="now">Date to test.</param>
            <param name="start">Begining of the interval.</param>
            <param name="duration">Duration of the interval.</param>
            <returns><c>true</c> if the date is in the interval, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsInInterval(System.DateTime,System.TimeSpan[],System.TimeSpan)">
            <summary>
            Tests if given date follows one of the start times of less than duration.
            </summary>
            <param name="now">Date to test.</param>
            <param name="starts">Beginnings of the intervals.</param>
            <param name="duration">Durations of the intervals.</param>
            <returns><c>true</c> if the date is in one of the intervals, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Siriona.Library.Time.MakeDayOfYear(System.TimeSpan)">
            <summary>
            Makes the day of year.
            </summary>
            <param name="time">The time.</param>
            <returns>the new time value.</returns>
        </member>
        <member name="M:Siriona.Library.Time.MakeTimeOfDay(System.TimeSpan)">
            <summary>
            Changes a time span to make it fit in one day.
            </summary>
            <param name="time">The time value to change.</param>
            <returns>The new time value.</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsInSameInterval(System.DateTime,System.DateTime,System.TimeSpan[],System.TimeSpan)">
            <summary>
            Tests two dates against time intervals and check if the belong to the same.
            </summary>
            <param name="now">First date value.</param>
            <param name="lastTime">Second date value.</param>
            <param name="starts">Beginings of time intervals.</param>
            <param name="duration">Duration of intervals.</param>
            <returns>Returns true if the to dates are in the same interval.</returns>
            <remarks>The function returns false if the dates are in the same interval but from different days.</remarks>
        </member>
        <member name="M:Siriona.Library.Time.IsInSameInterval(System.DateTime,System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Tests two dates against time interval and check if they belong to it.
            </summary>
            <param name="now">First date value.</param>
            <param name="lastTime">Second date value.</param>
            <param name="start">Begining of time interval.</param>
            <param name="duration">Duration of interval.</param>
            <returns>Returns true if the to dates are in the same interval.</returns>
            <remarks>The function returns false if the dates are in the same interval but from different days.</remarks>
        </member>
        <member name="M:Siriona.Library.Time.IsFirstTimeSince(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Test if two time values both passed given time of day the same day.
            </summary>
            <param name="now">Time value to test.</param>
            <param name="lastTime">Time value of reference.</param>
            <param name="timeOfDay">Time of day.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsFirstTimeSince(System.DateTime,System.DateTime,Siriona.Library.TimeZone,System.TimeSpan)">
            <summary>
            Test if two time values both passed given time of day the same day.
            </summary>
            <param name="now">Time value to test in utc.</param>
            <param name="lastTime">Time value of reference in utc.</param>
            <param name="timeZone">The time zone.</param>
            <param name="timeOfDay">Time of day.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsFirstTimeSince(System.DateTime,System.DateTime,System.TimeSpan[])">
            <summary>
            Test if two time values both passed the last given time of day the same day.
            </summary>
            <param name="now">Time value to test.</param>
            <param name="lastTime">Time value of reference.</param>
            <param name="timesOfDay">Times of day.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsFirstTimeSince(System.DateTime,System.DateTime,Siriona.Library.TimeZone,System.TimeSpan[])">
            <summary>
            Test if two time values both passed the last given time of day the same day.
            </summary>
            <param name="now">Time value to test.</param>
            <param name="lastTime">Time value of reference.</param>
            <param name="timeZone">The time zone.</param>
            <param name="timesOfDay">Times of day.</param>
            <returns>Returns true if the condition is met.</returns>
        </member>
        <member name="M:Siriona.Library.Time.UnixToDateTime(System.Int64)">
            <summary>
            Converts a Unix timestamp into a <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="unixTimestamp">The Unix timestamp to convert.</param>
            <returns>The date and time corresponding to the unix timestamp.</returns>
        </member>
        <member name="M:Siriona.Library.Time.DateTimeToUnix(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> object into a Unix timestamp.
            </summary>
            <param name="dateTime">The date to convert.</param>
            <returns><c>0</c> if the given date is lower or equal to 1/1/1970, otherwise the timestamp value.</returns>
        </member>
        <member name="M:Siriona.Library.Time.GetLastTimeOccurrence(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the date and time of the last occurrence of the given time of day preceding given DateTime value.
            </summary>
            <param name="now">DateTime value.</param>
            <param name="timeOfDay">Time of day.</param>
            <returns>The comupted DateTime value.</returns>
            <remarks>The <c>TimeOfDay</c> part of the result is always equal to <c>timeOfDay</c>. The <c>Date</c> part of the
            result is the same as the one of <c>now</c> or the day before.</remarks>
        </member>
        <member name="M:Siriona.Library.Time.GetLastTimeOccurrence(System.DateTime,Siriona.Library.TimeZone,System.TimeSpan)">
            <summary>
            Gets the date and time of the last occurrence of the given time of day preceding given DateTime value.
            </summary>
            <param name="now">DateTime value.</param>
            <param name="timeZone">The time zone.</param>
            <param name="timeOfDay">Time of day.</param>
            <returns>The comupted DateTime value.</returns>
            <remarks>The <c>TimeOfDay</c> part of the result is always equal to <c>timeOfDay</c>. The <c>Date</c> part of the
            result is the same as the one of <c>now</c> or the day before.</remarks>
        </member>
        <member name="M:Siriona.Library.Time.GetNextTimeOccurrence(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the date and time of the next occurrence of the given time of day following given DateTime value.
            </summary>
            <param name="now">DateTime value.</param>
            <param name="timeOfDay">Time of day.</param>
            <returns>The comupted DateTime value.</returns>
            <remarks>The <c>TimeOfDay</c> part of the result is always equal to <c>timeOfDay</c>. The <c>Date</c> part of the
            result is the same as the one of <c>now</c> or the day before.</remarks>
        </member>
        <member name="M:Siriona.Library.Time.GetNextTimeOccurrence(System.DateTime,Siriona.Library.TimeZone,System.TimeSpan)">
            <summary>
            Gets the date and time of the next occurrence of the given time of day following given DateTime value.
            </summary>
            <param name="now">DateTime value.</param>
            <param name="timeZone">The time zone.</param>
            <param name="timeOfDay">Time of day.</param>
            <returns>The comupted DateTime value.</returns>
            <remarks>The <c>TimeOfDay</c> part of the result is always equal to <c>timeOfDay</c>. The <c>Date</c> part of the
            result is the same as the one of <c>now</c> or the day before.</remarks>
        </member>
        <member name="M:Siriona.Library.Time.IsTimeOfDay(System.TimeSpan)">
            <summary>
            Test if given time is a time of day.
            </summary>
            <param name="time">The time to test</param>
            <returns>Returns true if condition is met.</returns>
        </member>
        <member name="M:Siriona.Library.Time.IsDayOfYear(System.TimeSpan)">
            <summary>
            Determines whether the specified time is a day of year.
            </summary>
            <param name="time">The time.</param>
            <returns>
            	<c>true</c> if the specified time is a day of year; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Siriona.Library.Time.IsDateValid(System.DateTime)">
            <summary>
            Test is given date is valid
            </summary>
            <param name="date">The date to test</param>
            <returns>Returns true if the date is valid</returns>
        </member>
        <member name="M:Siriona.Library.Time.Round(System.DateTime,Siriona.Library.TimeStep)">
            <summary>
            Rounds the specified date.
            </summary>
            <param name="date">The date.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.Round(System.DateTime,Siriona.Library.TimeStep,System.Globalization.CultureInfo)">
            <summary>
            Rounds the specified date.
            </summary>
            <param name="date">The date.</param>
            <param name="step">The step.</param>
            <param name="culture">The culture info.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.Round(System.DateTime,Siriona.Library.TimeStep,System.DayOfWeek)">
            <summary>
            Rounds the specified date.
            </summary>
            <param name="date">The date.</param>
            <param name="step">The step.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetDayInWeek(System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            Gets the day in week.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetDayInWeek(System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Gets the day in week.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetDayInWeek(System.DayOfWeek)">
            <summary>
            Gets the day in week.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetDayInWeek(System.DateTime)">
            <summary>
            Gets the day in week.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetDayInWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the day in week.
            </summary>
            <param name="date">The date.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetDayInWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the day in week.
            </summary>
            <param name="date">The date.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Time.GetOccurences(System.DateTime,System.DateTime,Siriona.Library.TimeZone,System.TimeSpan[])">
            <summary>
            Gets the occurences of specified events.
            </summary>
            <param name="now">The now.</param>
            <param name="lastTime">The last time.</param>
            <param name="timeZone">The time zone.</param>
            <param name="timesOfDay">The times of day.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.TimeStep">
            <summary>
            Defines duration steps.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Millisecond">
            <summary>
            The duration is expressed in millisecondes.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Second">
            <summary>
            The duration is expressed in secondes.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Minute">
            <summary>
            The duration is expressed in minutes.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Hour">
            <summary>
            The duration is expressed in hours.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Day">
            <summary>
            The duration is expressed in days.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Week">
            <summary>
            The duration is expressed in weeks.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Month">
            <summary>
            The duration is expressed in months.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeStep.Year">
            <summary>
            The duration is expressed in years.
            </summary>
        </member>
        <member name="T:Siriona.Library.TimeZone">
            <summary>
            Represents a TimeZone
            </summary>
        </member>
        <member name="M:Siriona.Library.TimeZone.FromName(System.String)">
            <summary>
            Gets a Time zone from its name.
            </summary>
            <param name="name">The name.</param>
            <returns>The Time zone</returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.ToUniversalTime(Siriona.Library.Period)">
            <summary>
            Returns the coordinated universal (UTC) period that corresponds to a specified local period start and end times.
            </summary>
            <param name="period">The period.</param>
            A <see cref="T:Siriona.Library.Period"/> instance whose values are the UTC time that corresponds to specified period bounds.
        </member>
        <member name="M:Siriona.Library.TimeZone.ToUniversalTime(System.DateTime)">
            <summary>
            Returns the coordinated universal time (UTC) that corresponds to a specified local time.
            </summary>
            <param name="time">The local date and time.</param>
            <returns>
            A <see cref="T:System.DateTime"></see> instance whose value is the UTC time that corresponds to time.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.ToLocalTime(Siriona.Library.Period)">
            <summary>
            Returns the local time period that corresponds to a specified coordinated universal (UTC) start and end times.
            </summary>
            <param name="period">The period.</param>
            A <see cref="T:Siriona.Library.Period"/> instance whose values are the local time that corresponds to specified period bounds.
        </member>
        <member name="M:Siriona.Library.TimeZone.ToLocalTime(System.DateTime)">
            <summary>
            Returns the local time that corresponds to a specified coordinated universal time (UTC).
            </summary>
            <param name="time">A UTC time.</param>
            <returns>
            A <see cref="T:System.DateTime"></see> instance whose value is the local time that corresponds to time.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.GetUtcOffset(System.DateTime)">
            <summary>
            Returns the coordinated universal time (UTC) offset for the specified local time.
            </summary>
            <param name="time">The local date and time.</param>
            <returns>
            The UTC offset from time, measured in ticks.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Returns a value indicating whether the specified date and time is within a daylight saving time period.
            </summary>
            <param name="time">A date and time.</param>
            <returns>
            true if time is in a daylight saving time period; false otherwise, or if time is null.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.GetDaylightChanges(System.Int32)">
            <summary>
            Returns the daylight saving time period for a particular year.
            </summary>
            <param name="year">The year to which the daylight saving time period applies.</param>
            <returns>
            A <see cref="T:System.Globalization.DaylightTime"></see> instance containing the start and end date for daylight saving time in year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999. </exception>
        </member>
        <member name="M:Siriona.Library.TimeZone.GetStandardName(System.DateTime)">
            <summary>
            Gets the standard name of the time zone at the specified time.
            </summary>
            <param name="time">The time.</param>
            <returns>The standard name</returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.GetDaylightName(System.DateTime)">
            <summary>
            Gets the standard name of the time zone at the specified time.
            </summary>
            <param name="time">The time.</param>
            <returns>The standard name</returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.op_Inequality(Siriona.Library.TimeZone,Siriona.Library.TimeZone)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="timeZone1">The time zone1.</param>
            <param name="timeZone2">The time zone2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.op_Equality(Siriona.Library.TimeZone,Siriona.Library.TimeZone)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="timeZone1">The time zone1.</param>
            <param name="timeZone2">The time zone2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.Equals(Siriona.Library.TimeZone)">
            <summary>
            Determines whether the specified <see cref="T:Siriona.Library.TimeZone"></see> is equal to the current <see cref="T:Siriona.Library.TimeZone"></see>.
            </summary>
            <param name="timeZone">The <see cref="T:Siriona.Library.TimeZone"></see> to compare with the current <see cref="T:Siriona.Library.TimeZone"></see>.</param>
            <returns>
            true if the specified <see cref="T:Siriona.Library.TimeZone"></see> is equal to the current <see cref="T:Siriona.Library.TimeZone"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Siriona.Library.TimeZone.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Siriona.Library.TimeZone.StandardName">
            <summary>
            Gets the standard time zone name.
            </summary>
            <value></value>
            <returns>The standard time zone name.</returns>
            <exception cref="T:System.ArgumentNullException">Attempted to set this property to null. </exception>
        </member>
        <member name="P:Siriona.Library.TimeZone.DaylightName">
            <summary>
            Gets the daylight saving time zone name.
            </summary>
            <value></value>
            <returns>The daylight saving time zone name.</returns>
        </member>
        <member name="P:Siriona.Library.TimeZone.TimeZones">
            <summary>
            Gets all defined time zones.
            </summary>
            <value>The time zones.</value>
        </member>
        <member name="P:Siriona.Library.TimeZone.ZoneName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Siriona.Library.TimeZone.AliasZoneName">
            <summary>
            Gets the name of the alias zone.
            </summary>
            <value>The name of the alias zone.</value>
        </member>
        <member name="P:Siriona.Library.TimeZone.IsAliasZone">
            <summary>
            Gets a value indicating whether this instance is an alias zone.
            </summary>
            <value>
            	<c>true</c> if this instance is an alias zone; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Siriona.Library.TimeZones">
            <summary>
            Represents known timezones.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeZones.Utc">
            <summary>
            The UTC time zone.
            </summary>
        </member>
        <member name="F:Siriona.Library.TimeZones.Gmt">
            <summary>
            The GMT time zone.
            </summary>
            <remarks>GMT time zone differs from UTC since GMT is the official UK time zone and is subject to daylight saving.</remarks>
        </member>
        <member name="M:Siriona.Library.TimeZones.GetTimeZone(System.String)">
            <summary>
            Gets the time zone.
            </summary>
            <param name="name">The name.</param>
            <returns>The time zone.</returns>
        </member>
        <member name="P:Siriona.Library.TimeZones.AllNames">
            <summary>
            Gets all names.
            </summary>
            <value>All names.</value>
        </member>
        <member name="P:Siriona.Library.TimeZones.AllTimeZones">
            <summary>
            Gets all defined time zones.
            </summary>
            <value>The time zones.</value>
        </member>
        <member name="T:Siriona.Library.TokenType">
            <summary>
            Defines token type found during money string parsing.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.Other">
            <summary>
            The token is an unknown token.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.WhiteSpace">
            <summary>
            The token is a whitespace.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.MultipleWhiteSpace">
            <summary>
            The token is a string of multiple whitespace.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.CurrencySymbol">
            <summary>
            The token is a localized currency symbol.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.IsoCurrencySymbol">
            <summary>
            The token is an three letters ISO code.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.NegativeSign">
            <summary>
            The token is a localized negative sign.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.LeftParenthesis">
            <summary>
            The token is a left parenthesis.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.RightParenthesis">
            <summary>
            The token is a right parenthesis.
            </summary>
        </member>
        <member name="F:Siriona.Library.TokenType.Amount">
            <summary>
            The token is an amount.
            </summary>
        </member>
        <member name="T:Siriona.Library.Transaction">
            <summary>
            Represents a transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.Transaction.#ctor(Siriona.Library.ITransactionable)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Transaction"/> class.
            </summary>
            <param name="transactionableItem">The transactionable item.</param>
        </member>
        <member name="M:Siriona.Library.Transaction.Complete">
            <summary>
            Completes this transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.Transaction.Rollback">
            <summary>
            Rollbacks this transaction.
            </summary>
        </member>
        <member name="M:Siriona.Library.Transaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Siriona.Library.TypeUtility">
            <summary>
            Provides utility for the enum class.
            </summary>
        </member>
        <member name="M:Siriona.Library.TypeUtility.GetType(System.String)">
            <summary>
            Gets the type.
            </summary>
            <param name="typeName">The fully qualified type name.</param>
            <returns>The type.</returns>
        </member>
        <member name="T:Siriona.Library.Reflection.TypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Siriona.Library.Reflection.TypeExtensions.GetFullTypeNameWithoutVersions(System.Type)">
            <summary>
            Gets the serializable name of the type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Reflection.TypeExtensions.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type with generic arguments.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.Reflection.TypeExtensions.GetMethodName(System.Reflection.MethodBase)">
            <summary>
            Gets the name of the method with generic arguments.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Siriona.Library.URational">
            <summary>
            Represents an unsigned rational number.
            </summary>
        </member>
        <member name="M:Siriona.Library.URational.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.Rational"/> class.
            </summary>
            <param name="value">The float value.</param>
            <param name="precision">The precision, in digits.</param>
        </member>
        <member name="M:Siriona.Library.URational.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Siriona.Library.URational"/> class.
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
        </member>
        <member name="M:Siriona.Library.URational.ToString">
            <exclude/>
        </member>
        <member name="M:Siriona.Library.URational.ToString(System.String)">
            <summary>
            Returns a string representation of the rational number.
            </summary>
            <param name="format">The format of the string representation.</param>
            <returns>A string value representing the rational number.</returns>
        </member>
        <member name="M:Siriona.Library.URational.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the rational number.
            </summary>
            <param name="formatProvider">The format provider for the string localization.</param>
            <returns>A string value representing the rational number.</returns>
        </member>
        <member name="M:Siriona.Library.URational.Simplify">
            <summary>
            Returns the simplified value of the current rational number.
            </summary>
            <returns>The simplified value of the rational number.</returns>
        </member>
        <member name="M:Siriona.Library.URational.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the rational number.
            </summary>
            <param name="format">The format of the string representation.</param>
            <param name="formatProvider">The format provider for the string localization.</param>
            <returns>A string value representing the rational number.</returns>
            <remarks>
            The following values are supported : 
            <list type="bullet">
            	<listheader>
            		<term>Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"<c>g</c>", "<c>G</c>"</term>
            		<description>A full (rational and floating-point) representation of the rational number. A precision specifier can be used. This is the default value.</description>
            	</item>
            	<item>
            		<term>"<c>f</c>", "<c>F</c>"</term>
            		<description>A full (floating-point and rational) representation of the rational number. A precision specifier can be used.</description>
            	</item>
            	<item>
            		<term>"<c>v</c>", "<c>V</c>"</term>
            		<description>A floating-point representation of the rational number. A precision specifier can be used.</description>
            	</item>
            	<item>
            		<term>"<c>r</c>", "<c>R</c>"</term>
            		<description>A rational representation of the number.</description>
            	</item>
            	<item>
            		<term>"<c>n</c>", "<c>N</c>"</term>
            		<description>The numerator of the number.</description>
            	</item>
            	<item>
            		<term>"<c>d</c>", "<c>D</c>"</term>
            		<description>The denominator of the number.</description>
            	</item>
            </list>
            
            Upper case values uses the simplified value of the rational number.
            </remarks>
        </member>
        <member name="M:Siriona.Library.URational.op_Inequality(Siriona.Library.URational,Siriona.Library.URational)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="uRational1">The u rational1.</param>
            <param name="uRational2">The u rational2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.URational.op_Equality(Siriona.Library.URational,Siriona.Library.URational)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="uRational1">The u rational1.</param>
            <param name="uRational2">The u rational2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Siriona.Library.URational.Equals(Siriona.Library.URational)">
            <summary>
            Equalses the specified u rational.
            </summary>
            <param name="other">The u rational.</param>
            <returns></returns>
        </member>
        <member name="M:Siriona.Library.URational.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Siriona.Library.URational.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Siriona.Library.URational.IsDefined">
            <summary>
            Gets a <c>bool</c> value indicating whether the rational represents a defined value.
            </summary>
        </member>
        <member name="P:Siriona.Library.URational.IsFinite">
            <summary>
            Gets a <c>bool</c> value indicating whether the rational represents a finite value.
            </summary>
        </member>
        <member name="P:Siriona.Library.URational.Numerator">
            <summary>
            Gets the numerator of the rational number.
            </summary>
        </member>
        <member name="P:Siriona.Library.URational.Denominator">
            <summary>
            Gets the denominator of the rational number.
            </summary>
        </member>
        <member name="P:Siriona.Library.URational.Value">
            <summary>
            Gets the floating-point value of the rational number.
            </summary>
        </member>
    </members>
</doc>
